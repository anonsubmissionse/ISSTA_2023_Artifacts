/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 21:06:55 GMT 2022
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import org.apache.bcel.classfile.AnnotationEntry;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.InnerClasses;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.SourceFile;
import org.apache.bcel.classfile.Visitor;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ClassLoaderRepository;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaClass_ESTest extends JavaClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotNull(javaClass0);
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStatic());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isSuper());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(49, javaClass0.getModifiers());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertEquals("java.lang.String", javaClass0.getFileName());
      
      JavaClass javaClass1 = javaClass0.copy();
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertTrue(javaClass1.equals((Object)javaClass0));
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass1);
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStatic());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isSuper());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(49, javaClass0.getModifiers());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertTrue(javaClass1.isSuper());
      assertFalse(javaClass1.isEnum());
      assertFalse(javaClass1.isVarArgs());
      assertFalse(javaClass1.isProtected());
      assertTrue(javaClass1.isFinal());
      assertFalse(javaClass1.isStrictfp());
      assertEquals("String.java", javaClass1.getSourceFileName());
      assertFalse(javaClass1.isAbstract());
      assertFalse(javaClass1.isInterface());
      assertTrue(javaClass1.isSynchronized());
      assertEquals("java.lang.String", javaClass1.getFileName());
      assertEquals("java.lang.String", javaClass1.getClassName());
      assertEquals(49, javaClass1.getModifiers());
      assertFalse(javaClass1.isSynthetic());
      assertFalse(javaClass1.isPrivate());
      assertEquals(52, javaClass1.getMajor());
      assertEquals(147, javaClass1.getSuperclassNameIndex());
      assertEquals(43, javaClass1.getClassNameIndex());
      assertFalse(javaClass1.isStatic());
      assertFalse(javaClass1.isAnnotation());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertTrue(javaClass1.isPublic());
      assertEquals(49, javaClass1.getAccessFlags());
      assertFalse(javaClass1.isNative());
      assertEquals(0, javaClass1.getMinor());
      assertTrue(javaClass1.isClass());
      assertEquals("java.lang", javaClass1.getPackageName());
      assertFalse(javaClass1.isVolatile());
      assertEquals((byte)2, javaClass1.getSource());
      assertFalse(javaClass1.isTransient());
      
      // Undeclared exception!
      try { 
        javaClass1.implementationOf(javaClass0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.String is no interface
         //
         verifyException("org.apache.bcel.classfile.JavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<SequenceInputStream> class0 = SequenceInputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotNull(javaClass0);
      assertTrue(javaClass0.isClass());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isNative());
      assertEquals("java.io.SequenceInputStream", javaClass0.getFileName());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("SequenceInputStream.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isPrivate());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isVolatile());
      assertEquals(24, javaClass0.getClassNameIndex());
      assertEquals("java.io", javaClass0.getPackageName());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertEquals("java.io.InputStream", javaClass0.getSuperclassName());
      assertEquals("java.io.SequenceInputStream", javaClass0.getClassName());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals(16, javaClass0.getSuperclassNameIndex());
      
      int int0 = javaClass0.getSuperclassNameIndex();
      assertEquals(16, int0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertTrue(javaClass0.isClass());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isNative());
      assertEquals("java.io.SequenceInputStream", javaClass0.getFileName());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("SequenceInputStream.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isPrivate());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isVolatile());
      assertEquals(24, javaClass0.getClassNameIndex());
      assertEquals("java.io", javaClass0.getPackageName());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertEquals("java.io.InputStream", javaClass0.getSuperclassName());
      assertEquals("java.io.SequenceInputStream", javaClass0.getClassName());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals(16, javaClass0.getSuperclassNameIndex());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass0);
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isFinal());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertTrue(javaClass0.isSuper());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertEquals(0, javaClass0.getMinor());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(33, javaClass0.getAccessFlags());
      
      javaClass0.setSuperclassNameIndex((-1102));
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertFalse(javaClass0.isSynthetic());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertEquals((-1102), javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isFinal());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertTrue(javaClass0.isSuper());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertEquals(0, javaClass0.getMinor());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(33, javaClass0.getAccessFlags());
      
      int int0 = javaClass0.getSuperclassNameIndex();
      assertEquals((-1102), int0);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertFalse(javaClass0.isSynthetic());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertEquals((-1102), javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isFinal());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertTrue(javaClass0.isSuper());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertEquals(0, javaClass0.getMinor());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(33, javaClass0.getAccessFlags());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isPrivate());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isInterface());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      
      JavaClass[] javaClassArray0 = javaClass0.getSuperClasses();
      assertEquals(0, javaClassArray0.length);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertNotNull(javaClassArray0);
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isPrivate());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isInterface());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals("Object.java", javaClass0.getSourceFileName());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<InnerClasses> class0 = InnerClasses.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isAbstract());
      assertEquals("InnerClasses.java", javaClass0.getSourceFileName());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("org.apache.bcel.classfile.InnerClasses", javaClass0.getClassName());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isTransient());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isVolatile());
      assertEquals("org.apache.bcel.classfile.Attribute", javaClass0.getSuperclassName());
      assertEquals(29, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isNative());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isSynthetic());
      assertTrue(javaClass0.isClass());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("org.apache.bcel.classfile.InnerClasses", javaClass0.getFileName());
      assertEquals(32, javaClass0.getSuperclassNameIndex());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isInterface());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      
      JavaClass javaClass1 = javaClass0.getSuperClass();
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertFalse(javaClass1.equals((Object)javaClass0));
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotNull(javaClass1);
      assertFalse(javaClass0.isAbstract());
      assertEquals("InnerClasses.java", javaClass0.getSourceFileName());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("org.apache.bcel.classfile.InnerClasses", javaClass0.getClassName());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isTransient());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isVolatile());
      assertEquals("org.apache.bcel.classfile.Attribute", javaClass0.getSuperclassName());
      assertEquals(29, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isNative());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isSynthetic());
      assertTrue(javaClass0.isClass());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("org.apache.bcel.classfile.InnerClasses", javaClass0.getFileName());
      assertEquals(32, javaClass0.getSuperclassNameIndex());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isInterface());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass1.isNative());
      assertEquals("Attribute.java", javaClass1.getSourceFileName());
      assertEquals("org.apache.bcel.classfile.Attribute", javaClass1.getFileName());
      assertFalse(javaClass1.isSynthetic());
      assertEquals(89, javaClass1.getClassNameIndex());
      assertTrue(javaClass1.isClass());
      assertFalse(javaClass1.isPrivate());
      assertEquals(52, javaClass1.getMajor());
      assertFalse(javaClass1.isInterface());
      assertEquals("org.apache.bcel.classfile", javaClass1.getPackageName());
      assertFalse(javaClass1.isAnnotation());
      assertFalse(javaClass1.isStatic());
      assertEquals(1057, javaClass1.getModifiers());
      assertFalse(javaClass1.isFinal());
      assertFalse(javaClass1.isStrictfp());
      assertEquals((byte)2, javaClass1.getSource());
      assertFalse(javaClass1.isProtected());
      assertTrue(javaClass1.isAbstract());
      assertFalse(javaClass1.isVarArgs());
      assertTrue(javaClass1.isSuper());
      assertEquals("org.apache.bcel.classfile.Attribute", javaClass1.getClassName());
      assertFalse(javaClass1.isEnum());
      assertEquals(101, javaClass1.getSuperclassNameIndex());
      assertFalse(javaClass1.isTransient());
      assertEquals(0, javaClass1.getMinor());
      assertEquals(1057, javaClass1.getAccessFlags());
      assertTrue(javaClass1.isSynchronized());
      assertTrue(javaClass1.isPublic());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertFalse(javaClass1.isVolatile());
      
      javaClass1.isSynthetic(true);
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertFalse(javaClass0.equals((Object)javaClass1));
      assertFalse(javaClass1.equals((Object)javaClass0));
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertFalse(javaClass0.isAbstract());
      assertEquals("InnerClasses.java", javaClass0.getSourceFileName());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("org.apache.bcel.classfile.InnerClasses", javaClass0.getClassName());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isTransient());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isVolatile());
      assertEquals("org.apache.bcel.classfile.Attribute", javaClass0.getSuperclassName());
      assertEquals(29, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isNative());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isSynthetic());
      assertTrue(javaClass0.isClass());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("org.apache.bcel.classfile.InnerClasses", javaClass0.getFileName());
      assertEquals(32, javaClass0.getSuperclassNameIndex());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isInterface());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass1.isNative());
      assertTrue(javaClass1.isSynthetic());
      assertEquals("Attribute.java", javaClass1.getSourceFileName());
      assertEquals("org.apache.bcel.classfile.Attribute", javaClass1.getFileName());
      assertEquals(89, javaClass1.getClassNameIndex());
      assertEquals(5153, javaClass1.getAccessFlags());
      assertTrue(javaClass1.isClass());
      assertFalse(javaClass1.isPrivate());
      assertEquals(52, javaClass1.getMajor());
      assertFalse(javaClass1.isInterface());
      assertEquals("org.apache.bcel.classfile", javaClass1.getPackageName());
      assertFalse(javaClass1.isAnnotation());
      assertFalse(javaClass1.isStatic());
      assertEquals(5153, javaClass1.getModifiers());
      assertFalse(javaClass1.isFinal());
      assertFalse(javaClass1.isStrictfp());
      assertEquals((byte)2, javaClass1.getSource());
      assertFalse(javaClass1.isProtected());
      assertTrue(javaClass1.isAbstract());
      assertFalse(javaClass1.isVarArgs());
      assertTrue(javaClass1.isSuper());
      assertEquals("org.apache.bcel.classfile.Attribute", javaClass1.getClassName());
      assertFalse(javaClass1.isEnum());
      assertEquals(101, javaClass1.getSuperclassNameIndex());
      assertFalse(javaClass1.isTransient());
      assertEquals(0, javaClass1.getMinor());
      assertTrue(javaClass1.isSynchronized());
      assertTrue(javaClass1.isPublic());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertFalse(javaClass1.isVolatile());
      
      JavaClass javaClass2 = javaClass0.getSuperClass();
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass0, javaClass2);
      assertNotSame(javaClass2, javaClass0);
      assertSame(javaClass2, javaClass1);
      assertFalse(javaClass0.equals((Object)javaClass1));
      assertFalse(javaClass2.equals((Object)javaClass0));
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass2);
      assertFalse(javaClass0.isAbstract());
      assertEquals("InnerClasses.java", javaClass0.getSourceFileName());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("org.apache.bcel.classfile.InnerClasses", javaClass0.getClassName());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isTransient());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isVolatile());
      assertEquals("org.apache.bcel.classfile.Attribute", javaClass0.getSuperclassName());
      assertEquals(29, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isNative());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isSynthetic());
      assertTrue(javaClass0.isClass());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("org.apache.bcel.classfile.InnerClasses", javaClass0.getFileName());
      assertEquals(32, javaClass0.getSuperclassNameIndex());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isInterface());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertEquals(0, javaClass2.getMinor());
      assertEquals(5153, javaClass2.getAccessFlags());
      assertTrue(javaClass2.isClass());
      assertFalse(javaClass2.isFinal());
      assertFalse(javaClass2.isVarArgs());
      assertTrue(javaClass2.isSynthetic());
      assertFalse(javaClass2.isNative());
      assertEquals((byte)2, javaClass2.getSource());
      assertFalse(javaClass2.isVolatile());
      assertEquals(89, javaClass2.getClassNameIndex());
      assertFalse(javaClass2.isEnum());
      assertFalse(javaClass2.isPrivate());
      assertFalse(javaClass2.isTransient());
      assertTrue(javaClass2.isPublic());
      assertEquals(101, javaClass2.getSuperclassNameIndex());
      assertEquals(52, javaClass2.getMajor());
      assertEquals("java.lang.Object", javaClass2.getSuperclassName());
      assertTrue(javaClass2.isSynchronized());
      assertTrue(javaClass2.isAbstract());
      assertFalse(javaClass2.isStatic());
      assertFalse(javaClass2.isAnnotation());
      assertFalse(javaClass2.isStrictfp());
      assertTrue(javaClass2.isSuper());
      assertEquals("org.apache.bcel.classfile.Attribute", javaClass2.getClassName());
      assertEquals(5153, javaClass2.getModifiers());
      assertEquals("Attribute.java", javaClass2.getSourceFileName());
      assertEquals("org.apache.bcel.classfile.Attribute", javaClass2.getFileName());
      assertEquals("org.apache.bcel.classfile", javaClass2.getPackageName());
      assertFalse(javaClass2.isInterface());
      assertFalse(javaClass2.isProtected());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass0);
      assertEquals(33, javaClass0.getModifiers());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isVolatile());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isNative());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStatic());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isEnum());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isPrivate());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isSynthetic());
      
      JavaClass javaClass1 = javaClass0.getSuperClass();
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertFalse(javaClass1.equals((Object)javaClass0));
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotNull(javaClass1);
      assertEquals(33, javaClass0.getModifiers());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isVolatile());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isNative());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStatic());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isEnum());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isPrivate());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("AccessFlags.java", javaClass1.getSourceFileName());
      assertTrue(javaClass1.isAbstract());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass1.getFileName());
      assertTrue(javaClass1.isPublic());
      assertFalse(javaClass1.isAnnotation());
      assertFalse(javaClass1.isStatic());
      assertFalse(javaClass1.isStrictfp());
      assertTrue(javaClass1.isSuper());
      assertTrue(javaClass1.isSynchronized());
      assertFalse(javaClass1.isVarArgs());
      assertEquals(52, javaClass1.getMajor());
      assertFalse(javaClass1.isProtected());
      assertFalse(javaClass1.isFinal());
      assertEquals(1057, javaClass1.getModifiers());
      assertFalse(javaClass1.isInterface());
      assertEquals("org.apache.bcel.classfile", javaClass1.getPackageName());
      assertEquals(0, javaClass1.getMinor());
      assertEquals(1057, javaClass1.getAccessFlags());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass1.getClassName());
      assertEquals(7, javaClass1.getSuperclassNameIndex());
      assertTrue(javaClass1.isClass());
      assertFalse(javaClass1.isNative());
      assertFalse(javaClass1.isPrivate());
      assertFalse(javaClass1.isEnum());
      assertEquals(6, javaClass1.getClassNameIndex());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertFalse(javaClass1.isSynthetic());
      assertEquals((byte)2, javaClass1.getSource());
      assertFalse(javaClass1.isTransient());
      assertFalse(javaClass1.isVolatile());
      
      javaClass1.isSynchronized(false);
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertFalse(javaClass0.equals((Object)javaClass1));
      assertFalse(javaClass1.equals((Object)javaClass0));
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals(33, javaClass0.getModifiers());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isVolatile());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isNative());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStatic());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isEnum());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isPrivate());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("AccessFlags.java", javaClass1.getSourceFileName());
      assertTrue(javaClass1.isAbstract());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass1.getFileName());
      assertFalse(javaClass1.isSynchronized());
      assertEquals(1025, javaClass1.getAccessFlags());
      assertTrue(javaClass1.isPublic());
      assertFalse(javaClass1.isAnnotation());
      assertFalse(javaClass1.isStatic());
      assertFalse(javaClass1.isStrictfp());
      assertFalse(javaClass1.isVarArgs());
      assertEquals(52, javaClass1.getMajor());
      assertFalse(javaClass1.isProtected());
      assertFalse(javaClass1.isFinal());
      assertFalse(javaClass1.isSuper());
      assertFalse(javaClass1.isInterface());
      assertEquals("org.apache.bcel.classfile", javaClass1.getPackageName());
      assertEquals(0, javaClass1.getMinor());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass1.getClassName());
      assertEquals(7, javaClass1.getSuperclassNameIndex());
      assertTrue(javaClass1.isClass());
      assertFalse(javaClass1.isNative());
      assertFalse(javaClass1.isPrivate());
      assertFalse(javaClass1.isEnum());
      assertEquals(6, javaClass1.getClassNameIndex());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertFalse(javaClass1.isSynthetic());
      assertEquals((byte)2, javaClass1.getSource());
      assertFalse(javaClass1.isTransient());
      assertEquals(1025, javaClass1.getModifiers());
      assertFalse(javaClass1.isVolatile());
      
      JavaClass javaClass2 = javaClass0.getSuperClass();
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass0, javaClass2);
      assertNotSame(javaClass2, javaClass0);
      assertSame(javaClass2, javaClass1);
      assertFalse(javaClass0.equals((Object)javaClass1));
      assertFalse(javaClass2.equals((Object)javaClass0));
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass2);
      assertEquals(33, javaClass0.getModifiers());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isVolatile());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isNative());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStatic());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isEnum());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isPrivate());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass2.isFinal());
      assertFalse(javaClass2.isInterface());
      assertTrue(javaClass2.isClass());
      assertFalse(javaClass2.isEnum());
      assertFalse(javaClass2.isProtected());
      assertFalse(javaClass2.isSuper());
      assertEquals(7, javaClass2.getSuperclassNameIndex());
      assertEquals((byte)2, javaClass2.getSource());
      assertEquals(0, javaClass2.getMinor());
      assertEquals("AccessFlags.java", javaClass2.getSourceFileName());
      assertTrue(javaClass2.isAbstract());
      assertFalse(javaClass2.isStatic());
      assertFalse(javaClass2.isAnnotation());
      assertTrue(javaClass2.isPublic());
      assertEquals("org.apache.bcel.classfile", javaClass2.getPackageName());
      assertEquals(1025, javaClass2.getModifiers());
      assertFalse(javaClass2.isPrivate());
      assertFalse(javaClass2.isSynthetic());
      assertEquals(52, javaClass2.getMajor());
      assertFalse(javaClass2.isSynchronized());
      assertFalse(javaClass2.isTransient());
      assertEquals(1025, javaClass2.getAccessFlags());
      assertFalse(javaClass2.isStrictfp());
      assertFalse(javaClass2.isVolatile());
      assertFalse(javaClass2.isVarArgs());
      assertEquals(6, javaClass2.getClassNameIndex());
      assertEquals("java.lang.Object", javaClass2.getSuperclassName());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass2.getClassName());
      assertFalse(javaClass2.isNative());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass2.getFileName());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass0);
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isTransient());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isEnum());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isAbstract());
      
      JavaClass javaClass1 = javaClass0.getSuperClass();
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertFalse(javaClass1.equals((Object)javaClass0));
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertNotNull(javaClass1);
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isTransient());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isEnum());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass1.isNative());
      assertFalse(javaClass1.isVolatile());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertEquals(6, javaClass1.getClassNameIndex());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass1.getClassName());
      assertFalse(javaClass1.isAnnotation());
      assertFalse(javaClass1.isTransient());
      assertFalse(javaClass1.isStatic());
      assertFalse(javaClass1.isPrivate());
      assertFalse(javaClass1.isEnum());
      assertFalse(javaClass1.isSynthetic());
      assertEquals((byte)2, javaClass1.getSource());
      assertEquals(0, javaClass1.getMinor());
      assertEquals(1057, javaClass1.getAccessFlags());
      assertEquals(7, javaClass1.getSuperclassNameIndex());
      assertTrue(javaClass1.isClass());
      assertFalse(javaClass1.isStrictfp());
      assertTrue(javaClass1.isSuper());
      assertFalse(javaClass1.isVarArgs());
      assertEquals("AccessFlags.java", javaClass1.getSourceFileName());
      assertTrue(javaClass1.isAbstract());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass1.getFileName());
      assertTrue(javaClass1.isPublic());
      assertFalse(javaClass1.isFinal());
      assertTrue(javaClass1.isSynchronized());
      assertEquals(1057, javaClass1.getModifiers());
      assertFalse(javaClass1.isInterface());
      assertEquals("org.apache.bcel.classfile", javaClass1.getPackageName());
      assertFalse(javaClass1.isProtected());
      assertEquals(52, javaClass1.getMajor());
      
      javaClass1.isStrictfp(true);
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertFalse(javaClass0.equals((Object)javaClass1));
      assertFalse(javaClass1.equals((Object)javaClass0));
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isTransient());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isEnum());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass1.isNative());
      assertFalse(javaClass1.isVolatile());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertEquals(6, javaClass1.getClassNameIndex());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass1.getClassName());
      assertFalse(javaClass1.isAnnotation());
      assertFalse(javaClass1.isTransient());
      assertFalse(javaClass1.isStatic());
      assertFalse(javaClass1.isPrivate());
      assertFalse(javaClass1.isEnum());
      assertFalse(javaClass1.isSynthetic());
      assertEquals((byte)2, javaClass1.getSource());
      assertEquals(0, javaClass1.getMinor());
      assertEquals(7, javaClass1.getSuperclassNameIndex());
      assertTrue(javaClass1.isClass());
      assertEquals(3105, javaClass1.getAccessFlags());
      assertTrue(javaClass1.isStrictfp());
      assertTrue(javaClass1.isSuper());
      assertFalse(javaClass1.isVarArgs());
      assertEquals("AccessFlags.java", javaClass1.getSourceFileName());
      assertTrue(javaClass1.isAbstract());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass1.getFileName());
      assertTrue(javaClass1.isPublic());
      assertFalse(javaClass1.isFinal());
      assertTrue(javaClass1.isSynchronized());
      assertFalse(javaClass1.isInterface());
      assertEquals(3105, javaClass1.getModifiers());
      assertEquals("org.apache.bcel.classfile", javaClass1.getPackageName());
      assertFalse(javaClass1.isProtected());
      assertEquals(52, javaClass1.getMajor());
      
      JavaClass javaClass2 = javaClass0.getSuperClass();
      assertNotSame(javaClass0, javaClass2);
      assertNotSame(javaClass0, javaClass1);
      assertSame(javaClass2, javaClass1);
      assertNotSame(javaClass2, javaClass0);
      assertFalse(javaClass0.equals((Object)javaClass1));
      assertFalse(javaClass2.equals((Object)javaClass0));
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass2);
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isTransient());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isEnum());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isAbstract());
      assertEquals(3105, javaClass2.getModifiers());
      assertTrue(javaClass2.isClass());
      assertEquals(3105, javaClass2.getAccessFlags());
      assertFalse(javaClass2.isInterface());
      assertFalse(javaClass2.isVolatile());
      assertFalse(javaClass2.isFinal());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass2.getClassName());
      assertFalse(javaClass2.isNative());
      assertFalse(javaClass2.isEnum());
      assertFalse(javaClass2.isSynthetic());
      assertFalse(javaClass2.isPrivate());
      assertEquals(6, javaClass2.getClassNameIndex());
      assertEquals(7, javaClass2.getSuperclassNameIndex());
      assertEquals(0, javaClass2.getMinor());
      assertFalse(javaClass2.isTransient());
      assertEquals((byte)2, javaClass2.getSource());
      assertEquals("AccessFlags.java", javaClass2.getSourceFileName());
      assertTrue(javaClass2.isSynchronized());
      assertFalse(javaClass2.isStatic());
      assertTrue(javaClass2.isPublic());
      assertTrue(javaClass2.isStrictfp());
      assertFalse(javaClass2.isAnnotation());
      assertTrue(javaClass2.isAbstract());
      assertEquals("java.lang.Object", javaClass2.getSuperclassName());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass2.getFileName());
      assertFalse(javaClass2.isVarArgs());
      assertFalse(javaClass2.isProtected());
      assertEquals(52, javaClass2.getMajor());
      assertTrue(javaClass2.isSuper());
      assertEquals("org.apache.bcel.classfile", javaClass2.getPackageName());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      JavaClass javaClass0 = classLoaderRepository0.loadClass("org.apache.bcel.util.ClassPath$AbstractZip");
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertNotNull(javaClass0);
      assertEquals(23, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isClass());
      assertEquals("org.apache.bcel.util.ClassPath$AbstractZip", javaClass0.getClassName());
      assertEquals(0, javaClass0.getMinor());
      assertEquals("ClassPath.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isVolatile());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isStrictfp());
      assertEquals(1056, javaClass0.getAccessFlags());
      assertEquals("org.apache.bcel.util", javaClass0.getPackageName());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isPublic());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertTrue(javaClass0.isAbstract());
      assertEquals("org.apache.bcel.util.ClassPath$AbstractZip", javaClass0.getFileName());
      assertEquals("org.apache.bcel.util.ClassPath$AbstractPathEntry", javaClass0.getSuperclassName());
      assertEquals(1056, javaClass0.getModifiers());
      assertFalse(javaClass0.isPrivate());
      assertEquals(24, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isStatic());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      
      JavaClass javaClass1 = javaClass0.getSuperClass();
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertFalse(javaClass1.equals((Object)javaClass0));
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass1);
      assertEquals(23, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isClass());
      assertEquals("org.apache.bcel.util.ClassPath$AbstractZip", javaClass0.getClassName());
      assertEquals(0, javaClass0.getMinor());
      assertEquals("ClassPath.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isVolatile());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isStrictfp());
      assertEquals(1056, javaClass0.getAccessFlags());
      assertEquals("org.apache.bcel.util", javaClass0.getPackageName());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isPublic());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertTrue(javaClass0.isAbstract());
      assertEquals("org.apache.bcel.util.ClassPath$AbstractZip", javaClass0.getFileName());
      assertEquals("org.apache.bcel.util.ClassPath$AbstractPathEntry", javaClass0.getSuperclassName());
      assertEquals(1056, javaClass0.getModifiers());
      assertFalse(javaClass0.isPrivate());
      assertEquals(24, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isStatic());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(1056, javaClass1.getModifiers());
      assertTrue(javaClass1.isSynchronized());
      assertEquals(1056, javaClass1.getAccessFlags());
      assertFalse(javaClass1.isPublic());
      assertEquals(4, javaClass1.getSuperclassNameIndex());
      assertFalse(javaClass1.isAnnotation());
      assertTrue(javaClass1.isAbstract());
      assertFalse(javaClass1.isStatic());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertEquals((byte)2, javaClass1.getSource());
      assertFalse(javaClass1.isPrivate());
      assertFalse(javaClass1.isEnum());
      assertFalse(javaClass1.isSynthetic());
      assertFalse(javaClass1.isVolatile());
      assertFalse(javaClass1.isTransient());
      assertEquals(0, javaClass1.getMinor());
      assertFalse(javaClass1.isInterface());
      assertEquals("org.apache.bcel.util", javaClass1.getPackageName());
      assertTrue(javaClass1.isClass());
      assertFalse(javaClass1.isFinal());
      assertFalse(javaClass1.isNative());
      assertTrue(javaClass1.isSuper());
      assertFalse(javaClass1.isVarArgs());
      assertEquals(3, javaClass1.getClassNameIndex());
      assertEquals(52, javaClass1.getMajor());
      assertEquals("org.apache.bcel.util.ClassPath$AbstractPathEntry", javaClass1.getClassName());
      assertFalse(javaClass1.isStrictfp());
      assertEquals("org.apache.bcel.util.ClassPath$AbstractPathEntry", javaClass1.getFileName());
      assertEquals("ClassPath.java", javaClass1.getSourceFileName());
      assertFalse(javaClass1.isProtected());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<SequenceInputStream> class0 = SequenceInputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertNotNull(javaClass0);
      assertTrue(javaClass0.isClass());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isInterface());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals("SequenceInputStream.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.io.SequenceInputStream", javaClass0.getFileName());
      assertTrue(javaClass0.isPublic());
      assertEquals("java.io.SequenceInputStream", javaClass0.getClassName());
      assertEquals(24, javaClass0.getClassNameIndex());
      assertEquals("java.io", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isTransient());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(16, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isEnum());
      assertEquals("java.io.InputStream", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      
      javaClass0.setSourceFileName((String) null);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertTrue(javaClass0.isClass());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isInterface());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isStrictfp());
      assertNull(javaClass0.getSourceFileName());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.io.SequenceInputStream", javaClass0.getFileName());
      assertTrue(javaClass0.isPublic());
      assertEquals("java.io.SequenceInputStream", javaClass0.getClassName());
      assertEquals(24, javaClass0.getClassNameIndex());
      assertEquals("java.io", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isTransient());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(16, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isEnum());
      assertEquals("java.io.InputStream", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      
      String string0 = javaClass0.getSourceFileName();
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertNull(string0);
      assertTrue(javaClass0.isClass());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isInterface());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isStrictfp());
      assertNull(javaClass0.getSourceFileName());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.io.SequenceInputStream", javaClass0.getFileName());
      assertTrue(javaClass0.isPublic());
      assertEquals("java.io.SequenceInputStream", javaClass0.getClassName());
      assertEquals(24, javaClass0.getClassNameIndex());
      assertEquals("java.io", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isTransient());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(16, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isEnum());
      assertEquals("java.io.InputStream", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass0);
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isProtected());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertFalse(javaClass0.isInterface());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isNative());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      
      javaClass0.setMinor(46);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isProtected());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertFalse(javaClass0.isInterface());
      assertEquals(46, javaClass0.getMinor());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertTrue(javaClass0.isClass());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isNative());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      
      int int0 = javaClass0.getMinor();
      assertEquals(46, int0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isProtected());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertFalse(javaClass0.isInterface());
      assertEquals(46, javaClass0.getMinor());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertTrue(javaClass0.isClass());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isNative());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass0);
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isSuper());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertTrue(javaClass0.isFinal());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStrictfp());
      assertEquals(52, javaClass0.getMajor());
      
      javaClass0.setMethods((Method[]) null);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isSuper());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertTrue(javaClass0.isFinal());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStrictfp());
      assertEquals(52, javaClass0.getMajor());
      
      Method[] methodArray0 = javaClass0.getMethods();
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNull(methodArray0);
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isSuper());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertTrue(javaClass0.isFinal());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStrictfp());
      assertEquals(52, javaClass0.getMajor());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      JavaClass javaClass0 = classLoaderRepository0.loadClass("java.lang.String$1");
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isSuper());
      assertEquals("java.lang.String$1", javaClass0.getClassName());
      assertFalse(javaClass0.isEnum());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isTransient());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isClass());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals(4128, javaClass0.getModifiers());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isPrivate());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertTrue(javaClass0.isSynthetic());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isFinal());
      assertEquals(2, javaClass0.getSuperclassNameIndex());
      assertEquals(4128, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isPublic());
      assertEquals("java.lang.String$1", javaClass0.getFileName());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isProtected());
      
      Method[] methodArray0 = javaClass0.getMethods();
      assertEquals(0, methodArray0.length);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(methodArray0);
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isSuper());
      assertEquals("java.lang.String$1", javaClass0.getClassName());
      assertFalse(javaClass0.isEnum());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isTransient());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isClass());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals(4128, javaClass0.getModifiers());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isPrivate());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertTrue(javaClass0.isSynthetic());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isFinal());
      assertEquals(2, javaClass0.getSuperclassNameIndex());
      assertEquals(4128, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isPublic());
      assertEquals("java.lang.String$1", javaClass0.getFileName());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isProtected());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertNotNull(javaClass0);
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isNative());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isVolatile());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(52, javaClass0.getMajor());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertTrue(javaClass0.isFinal());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isPrivate());
      assertTrue(javaClass0.isClass());
      
      javaClass0.setMajor((-542));
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isNative());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isVolatile());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isSynchronized());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertTrue(javaClass0.isFinal());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isTransient());
      assertEquals((-542), javaClass0.getMajor());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isPrivate());
      assertTrue(javaClass0.isClass());
      
      int int0 = javaClass0.getMajor();
      assertEquals((-542), int0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isNative());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isVolatile());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isSynchronized());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertTrue(javaClass0.isFinal());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isTransient());
      assertEquals((-542), javaClass0.getMajor());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isPrivate());
      assertTrue(javaClass0.isClass());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass0);
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isAbstract());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isEnum());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isProtected());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isFinal());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertEquals(33, javaClass0.getModifiers());
      
      JavaClass[] javaClassArray0 = javaClass0.getInterfaces();
      assertEquals(3, javaClassArray0.length);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClassArray0);
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isAbstract());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isEnum());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isProtected());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isFinal());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertEquals(33, javaClass0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass0);
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isFinal());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isClass());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isInterface());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isTransient());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isNative());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      
      javaClass0.setInterfaceNames((String[]) null);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isFinal());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isClass());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isInterface());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isTransient());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isNative());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      
      String[] stringArray0 = javaClass0.getInterfaceNames();
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNull(stringArray0);
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isFinal());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isClass());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isInterface());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isTransient());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isNative());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSynchronized());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isNative());
      assertEquals("java.lang.Integer", javaClass0.getFileName());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertEquals("java.lang.Integer", javaClass0.getClassName());
      assertTrue(javaClass0.isFinal());
      assertEquals(94, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isProtected());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isAbstract());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isInterface());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertEquals("java.lang.Number", javaClass0.getSuperclassName());
      
      String[] stringArray0 = javaClass0.getInterfaceNames();
      assertEquals(1, stringArray0.length);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotNull(stringArray0);
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isNative());
      assertEquals("java.lang.Integer", javaClass0.getFileName());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertEquals("java.lang.Integer", javaClass0.getClassName());
      assertTrue(javaClass0.isFinal());
      assertEquals(94, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isProtected());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isAbstract());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isInterface());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertEquals("java.lang.Number", javaClass0.getSuperclassName());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isInterface());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isClass());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isEnum());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isSuper());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isNative());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isTransient());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isAbstract());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isFinal());
      
      int[] intArray0 = javaClass0.getInterfaceIndices();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertNotNull(intArray0);
      assertFalse(javaClass0.isInterface());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isClass());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isEnum());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isSuper());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isNative());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isTransient());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isAbstract());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isFinal());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass0);
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isClass());
      assertTrue(javaClass0.isFinal());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isAbstract());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("java.lang.Number", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isPrivate());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertEquals(94, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isPublic());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals("java.lang.Integer", javaClass0.getClassName());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isNative());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.lang.Integer", javaClass0.getFileName());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertTrue(javaClass0.isSynchronized());
      
      javaClass0.setFields((Field[]) null);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isClass());
      assertTrue(javaClass0.isFinal());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isAbstract());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("java.lang.Number", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isPrivate());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertEquals(94, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isPublic());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals("java.lang.Integer", javaClass0.getClassName());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isNative());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.lang.Integer", javaClass0.getFileName());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertTrue(javaClass0.isSynchronized());
      
      Field[] fieldArray0 = javaClass0.getFields();
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNull(fieldArray0);
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isClass());
      assertTrue(javaClass0.isFinal());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isAbstract());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("java.lang.Number", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isPrivate());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertEquals(94, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isPublic());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals("java.lang.Integer", javaClass0.getClassName());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isNative());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.lang.Integer", javaClass0.getFileName());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertTrue(javaClass0.isSynchronized());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<SequenceInputStream> class0 = SequenceInputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass0);
      assertEquals(24, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isTransient());
      assertEquals(16, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isStrictfp());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.io.SequenceInputStream", javaClass0.getClassName());
      assertFalse(javaClass0.isNative());
      assertEquals("SequenceInputStream.java", javaClass0.getSourceFileName());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.io.SequenceInputStream", javaClass0.getFileName());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAbstract());
      assertEquals("java.io.InputStream", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isAnnotation());
      assertEquals("java.io", javaClass0.getPackageName());
      
      Field[] fieldArray0 = javaClass0.getFields();
      assertEquals(2, fieldArray0.length);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(fieldArray0);
      assertEquals(24, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isTransient());
      assertEquals(16, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isStrictfp());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.io.SequenceInputStream", javaClass0.getClassName());
      assertFalse(javaClass0.isNative());
      assertEquals("SequenceInputStream.java", javaClass0.getSourceFileName());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.io.SequenceInputStream", javaClass0.getFileName());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAbstract());
      assertEquals("java.io.InputStream", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isAnnotation());
      assertEquals("java.io", javaClass0.getPackageName());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isVarArgs());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isFinal());
      assertEquals(9, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(1057, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isAbstract());
      assertEquals("java.io", javaClass0.getPackageName());
      assertFalse(javaClass0.isAnnotation());
      assertEquals("java.io.InputStream", javaClass0.getFileName());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("InputStream.java", javaClass0.getSourceFileName());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isNative());
      assertEquals("java.io.InputStream", javaClass0.getClassName());
      assertEquals(15, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isVolatile());
      assertEquals(1057, javaClass0.getModifiers());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isStrictfp());
      assertEquals(52, javaClass0.getMajor());
      
      javaClass0.setConstantPool((ConstantPool) null);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isVarArgs());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isFinal());
      assertEquals(9, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(1057, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isAbstract());
      assertEquals("java.io", javaClass0.getPackageName());
      assertFalse(javaClass0.isAnnotation());
      assertEquals("java.io.InputStream", javaClass0.getFileName());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("InputStream.java", javaClass0.getSourceFileName());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isNative());
      assertEquals("java.io.InputStream", javaClass0.getClassName());
      assertEquals(15, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isVolatile());
      assertEquals(1057, javaClass0.getModifiers());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isStrictfp());
      assertEquals(52, javaClass0.getMajor());
      
      ConstantPool constantPool0 = javaClass0.getConstantPool();
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNull(constantPool0);
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isVarArgs());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isFinal());
      assertEquals(9, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(1057, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isAbstract());
      assertEquals("java.io", javaClass0.getPackageName());
      assertFalse(javaClass0.isAnnotation());
      assertEquals("java.io.InputStream", javaClass0.getFileName());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("InputStream.java", javaClass0.getSourceFileName());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isNative());
      assertEquals("java.io.InputStream", javaClass0.getClassName());
      assertEquals(15, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isVolatile());
      assertEquals(1057, javaClass0.getModifiers());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isStrictfp());
      assertEquals(52, javaClass0.getMajor());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JavaClass.setComparator((BCELComparator) null);
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      assertNull(bCELComparator0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      JavaClass javaClass0 = classLoaderRepository0.loadClass("java.lang.Integer$IntegerCache");
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isAnnotation());
      assertEquals(32, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isTransient());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertEquals(32, javaClass0.getModifiers());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isStatic());
      assertEquals(9, javaClass0.getClassNameIndex());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isFinal());
      assertEquals(18, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isVolatile());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals("java.lang.Integer$IntegerCache", javaClass0.getFileName());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.lang.Integer$IntegerCache", javaClass0.getClassName());
      assertFalse(javaClass0.isPublic());
      assertTrue(javaClass0.isSuper());
      assertTrue(javaClass0.isSynchronized());
      
      javaClass0.setClassNameIndex((-887));
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertFalse(javaClass0.isAnnotation());
      assertEquals(32, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isTransient());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertEquals(32, javaClass0.getModifiers());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isStatic());
      assertEquals((-887), javaClass0.getClassNameIndex());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isFinal());
      assertEquals(18, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isVolatile());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals("java.lang.Integer$IntegerCache", javaClass0.getFileName());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.lang.Integer$IntegerCache", javaClass0.getClassName());
      assertFalse(javaClass0.isPublic());
      assertTrue(javaClass0.isSuper());
      assertTrue(javaClass0.isSynchronized());
      
      int int0 = javaClass0.getClassNameIndex();
      assertEquals((-887), int0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertFalse(javaClass0.isAnnotation());
      assertEquals(32, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isTransient());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertEquals(32, javaClass0.getModifiers());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isStatic());
      assertEquals((-887), javaClass0.getClassNameIndex());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isFinal());
      assertEquals(18, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isVolatile());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals("java.lang.Integer$IntegerCache", javaClass0.getFileName());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.lang.Integer$IntegerCache", javaClass0.getClassName());
      assertFalse(javaClass0.isPublic());
      assertTrue(javaClass0.isSuper());
      assertTrue(javaClass0.isSynchronized());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      JavaClass javaClass0 = classLoaderRepository0.loadClass("org.apache.bcel.classfile.Node");
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotNull(javaClass0);
      assertEquals(1537, javaClass0.getModifiers());
      assertTrue(javaClass0.isAbstract());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isStrictfp());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(1537, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isEnum());
      assertEquals(2, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isSynchronized());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isPublic());
      assertEquals("org.apache.bcel.classfile.Node", javaClass0.getClassName());
      assertFalse(javaClass0.isNative());
      assertEquals("org.apache.bcel.classfile.Node", javaClass0.getFileName());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPrivate());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isSuper());
      assertTrue(javaClass0.isInterface());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertEquals("Node.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isFinal());
      
      javaClass0.setClassName((String) null);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals(1537, javaClass0.getModifiers());
      assertTrue(javaClass0.isAbstract());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isStrictfp());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(1537, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isEnum());
      assertEquals(2, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isSynchronized());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isNative());
      assertEquals("org.apache.bcel.classfile.Node", javaClass0.getFileName());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPrivate());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isSuper());
      assertTrue(javaClass0.isInterface());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertEquals("Node.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isFinal());
      assertNull(javaClass0.getClassName());
      
      String string0 = javaClass0.getClassName();
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNull(string0);
      assertEquals(1537, javaClass0.getModifiers());
      assertTrue(javaClass0.isAbstract());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isStrictfp());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(1537, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isEnum());
      assertEquals(2, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isSynchronized());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isNative());
      assertEquals("org.apache.bcel.classfile.Node", javaClass0.getFileName());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPrivate());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isSuper());
      assertTrue(javaClass0.isInterface());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertEquals("Node.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isFinal());
      assertNull(javaClass0.getClassName());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass0);
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isEnum());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isPublic());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isPrivate());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isInterface());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isFinal());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isSynthetic());
      
      javaClass0.setAttributes((Attribute[]) null);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isEnum());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isPublic());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isPrivate());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isInterface());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isFinal());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isSynthetic());
      
      Attribute[] attributeArray0 = javaClass0.getAttributes();
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNull(attributeArray0);
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isEnum());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isPublic());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isPrivate());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isInterface());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isFinal());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      JavaClass javaClass0 = classLoaderRepository0.loadClass("org.apache.bcel.Constants");
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass0);
      assertEquals("org.apache.bcel.Constants", javaClass0.getClassName());
      assertFalse(javaClass0.isFinal());
      assertEquals("org.apache.bcel", javaClass0.getPackageName());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isEnum());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isSuper());
      assertTrue(javaClass0.isInterface());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals("Constants.java", javaClass0.getSourceFileName());
      assertTrue(javaClass0.isAbstract());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertEquals(310, javaClass0.getSuperclassNameIndex());
      assertEquals("org.apache.bcel.Constants", javaClass0.getFileName());
      assertEquals(1537, javaClass0.getModifiers());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertEquals(1537, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isClass());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isSynchronized());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isNative());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      
      AnnotationEntry[] annotationEntryArray0 = javaClass0.getAnnotationEntries();
      assertEquals(1, annotationEntryArray0.length);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(annotationEntryArray0);
      assertEquals("org.apache.bcel.Constants", javaClass0.getClassName());
      assertFalse(javaClass0.isFinal());
      assertEquals("org.apache.bcel", javaClass0.getPackageName());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isEnum());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isSuper());
      assertTrue(javaClass0.isInterface());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals("Constants.java", javaClass0.getSourceFileName());
      assertTrue(javaClass0.isAbstract());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertEquals(310, javaClass0.getSuperclassNameIndex());
      assertEquals("org.apache.bcel.Constants", javaClass0.getFileName());
      assertEquals(1537, javaClass0.getModifiers());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertEquals(1537, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isClass());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isSynchronized());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isNative());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass0);
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isVolatile());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isTransient());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertEquals(0, javaClass0.getMinor());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isNative());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isProtected());
      
      JavaClass javaClass1 = javaClass0.getSuperClass();
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertFalse(javaClass1.equals((Object)javaClass0));
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass1);
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isVolatile());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isTransient());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertEquals(0, javaClass0.getMinor());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isNative());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass1.isPrivate());
      assertEquals(6, javaClass1.getClassNameIndex());
      assertEquals(52, javaClass1.getMajor());
      assertFalse(javaClass1.isSynthetic());
      assertFalse(javaClass1.isVolatile());
      assertEquals("org.apache.bcel.classfile", javaClass1.getPackageName());
      assertEquals(7, javaClass1.getSuperclassNameIndex());
      assertFalse(javaClass1.isTransient());
      assertEquals(0, javaClass1.getMinor());
      assertEquals(1057, javaClass1.getAccessFlags());
      assertFalse(javaClass1.isInterface());
      assertTrue(javaClass1.isClass());
      assertEquals(1057, javaClass1.getModifiers());
      assertFalse(javaClass1.isFinal());
      assertTrue(javaClass1.isAbstract());
      assertEquals("AccessFlags.java", javaClass1.getSourceFileName());
      assertFalse(javaClass1.isAnnotation());
      assertFalse(javaClass1.isStatic());
      assertEquals((byte)2, javaClass1.getSource());
      assertFalse(javaClass1.isProtected());
      assertFalse(javaClass1.isVarArgs());
      assertFalse(javaClass1.isStrictfp());
      assertFalse(javaClass1.isEnum());
      assertTrue(javaClass1.isSuper());
      assertTrue(javaClass1.isSynchronized());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass1.getClassName());
      assertTrue(javaClass1.isPublic());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass1.getFileName());
      assertFalse(javaClass1.isNative());
      
      JavaClass[] javaClassArray0 = javaClass1.getAllInterfaces();
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertEquals(0, javaClassArray0.length);
      assertFalse(javaClass0.equals((Object)javaClass1));
      assertFalse(javaClass1.equals((Object)javaClass0));
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClassArray0);
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isVolatile());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isTransient());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertEquals(0, javaClass0.getMinor());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isNative());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass1.isPrivate());
      assertEquals(6, javaClass1.getClassNameIndex());
      assertEquals(52, javaClass1.getMajor());
      assertFalse(javaClass1.isSynthetic());
      assertFalse(javaClass1.isVolatile());
      assertEquals("org.apache.bcel.classfile", javaClass1.getPackageName());
      assertEquals(7, javaClass1.getSuperclassNameIndex());
      assertFalse(javaClass1.isTransient());
      assertEquals(0, javaClass1.getMinor());
      assertEquals(1057, javaClass1.getAccessFlags());
      assertFalse(javaClass1.isInterface());
      assertTrue(javaClass1.isClass());
      assertEquals(1057, javaClass1.getModifiers());
      assertFalse(javaClass1.isFinal());
      assertTrue(javaClass1.isAbstract());
      assertEquals("AccessFlags.java", javaClass1.getSourceFileName());
      assertFalse(javaClass1.isAnnotation());
      assertFalse(javaClass1.isStatic());
      assertEquals((byte)2, javaClass1.getSource());
      assertFalse(javaClass1.isProtected());
      assertFalse(javaClass1.isVarArgs());
      assertFalse(javaClass1.isStrictfp());
      assertFalse(javaClass1.isEnum());
      assertTrue(javaClass1.isSuper());
      assertTrue(javaClass1.isSynchronized());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass1.getClassName());
      assertTrue(javaClass1.isPublic());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass1.getFileName());
      assertFalse(javaClass1.isNative());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      JavaClass javaClass0 = classLoaderRepository0.loadClass("java.lang.Object");
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isClass());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isFinal());
      
      boolean boolean0 = javaClass0.equals(javaClass0);
      assertTrue(boolean0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isClass());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isFinal());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotNull(javaClass0);
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isNative());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isVolatile());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isStatic());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isAnnotation());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isPrivate());
      assertTrue(javaClass0.isClass());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertTrue(javaClass0.isFinal());
      assertTrue(javaClass0.isPublic());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(52, javaClass0.getMajor());
      
      JavaClass javaClass1 = javaClass0.getSuperClass();
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertFalse(javaClass1.equals((Object)javaClass0));
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertNotNull(javaClass1);
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isNative());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isVolatile());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isStatic());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isAnnotation());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isPrivate());
      assertTrue(javaClass0.isClass());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertTrue(javaClass0.isFinal());
      assertTrue(javaClass0.isPublic());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass1.isPrivate());
      assertEquals("java.lang.Object", javaClass1.getFileName());
      assertEquals("Object.java", javaClass1.getSourceFileName());
      assertFalse(javaClass1.isNative());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertFalse(javaClass1.isStatic());
      assertFalse(javaClass1.isVolatile());
      assertTrue(javaClass1.isClass());
      assertEquals(0, javaClass1.getMinor());
      assertEquals(33, javaClass1.getAccessFlags());
      assertEquals(17, javaClass1.getClassNameIndex());
      assertEquals("java.lang", javaClass1.getPackageName());
      assertFalse(javaClass1.isAbstract());
      assertFalse(javaClass1.isAnnotation());
      assertFalse(javaClass1.isTransient());
      assertFalse(javaClass1.isEnum());
      assertFalse(javaClass1.isSynthetic());
      assertEquals("java.lang.Object", javaClass1.getClassName());
      assertFalse(javaClass1.isVarArgs());
      assertEquals((byte)2, javaClass1.getSource());
      assertFalse(javaClass1.isProtected());
      assertFalse(javaClass1.isFinal());
      assertEquals(33, javaClass1.getModifiers());
      assertEquals(0, javaClass1.getSuperclassNameIndex());
      assertFalse(javaClass1.isInterface());
      assertTrue(javaClass1.isSynchronized());
      assertTrue(javaClass1.isPublic());
      assertTrue(javaClass1.isSuper());
      assertFalse(javaClass1.isStrictfp());
      assertEquals(52, javaClass1.getMajor());
      
      boolean boolean0 = javaClass0.equals(javaClass1);
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertFalse(boolean0);
      assertFalse(javaClass0.equals((Object)javaClass1));
      assertFalse(javaClass1.equals((Object)javaClass0));
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isNative());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isVolatile());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isStatic());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isAnnotation());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isPrivate());
      assertTrue(javaClass0.isClass());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertTrue(javaClass0.isFinal());
      assertTrue(javaClass0.isPublic());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass1.isPrivate());
      assertEquals("java.lang.Object", javaClass1.getFileName());
      assertEquals("Object.java", javaClass1.getSourceFileName());
      assertFalse(javaClass1.isNative());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertFalse(javaClass1.isStatic());
      assertFalse(javaClass1.isVolatile());
      assertTrue(javaClass1.isClass());
      assertEquals(0, javaClass1.getMinor());
      assertEquals(33, javaClass1.getAccessFlags());
      assertEquals(17, javaClass1.getClassNameIndex());
      assertEquals("java.lang", javaClass1.getPackageName());
      assertFalse(javaClass1.isAbstract());
      assertFalse(javaClass1.isAnnotation());
      assertFalse(javaClass1.isTransient());
      assertFalse(javaClass1.isEnum());
      assertFalse(javaClass1.isSynthetic());
      assertEquals("java.lang.Object", javaClass1.getClassName());
      assertFalse(javaClass1.isVarArgs());
      assertEquals((byte)2, javaClass1.getSource());
      assertFalse(javaClass1.isProtected());
      assertFalse(javaClass1.isFinal());
      assertEquals(33, javaClass1.getModifiers());
      assertEquals(0, javaClass1.getSuperclassNameIndex());
      assertFalse(javaClass1.isInterface());
      assertTrue(javaClass1.isSynchronized());
      assertTrue(javaClass1.isPublic());
      assertTrue(javaClass1.isSuper());
      assertFalse(javaClass1.isStrictfp());
      assertEquals(52, javaClass1.getMajor());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotNull(javaClass0);
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isSuper());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isPublic());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isTransient());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isNative());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isSynthetic());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isProtected());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isInterface());
      
      javaClass0.isVarArgs(true);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertTrue(javaClass0.isVarArgs());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isSuper());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isTransient());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(161, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isNative());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isSynthetic());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isProtected());
      assertEquals(161, javaClass0.getModifiers());
      assertFalse(javaClass0.isInterface());
      
      JavaClass javaClass1 = javaClass0.copy();
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertTrue(javaClass1.equals((Object)javaClass0));
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotNull(javaClass1);
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertTrue(javaClass0.isVarArgs());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isSuper());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isTransient());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(161, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isNative());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isSynthetic());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isProtected());
      assertEquals(161, javaClass0.getModifiers());
      assertFalse(javaClass0.isInterface());
      assertEquals(0, javaClass1.getSuperclassNameIndex());
      assertTrue(javaClass1.isSynchronized());
      assertFalse(javaClass1.isStatic());
      assertFalse(javaClass1.isAnnotation());
      assertTrue(javaClass1.isPublic());
      assertEquals("Object.java", javaClass1.getSourceFileName());
      assertFalse(javaClass1.isProtected());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertTrue(javaClass1.isVarArgs());
      assertFalse(javaClass1.isNative());
      assertEquals("java.lang.Object", javaClass1.getClassName());
      assertEquals("java.lang.Object", javaClass1.getFileName());
      assertTrue(javaClass1.isSuper());
      assertEquals(52, javaClass1.getMajor());
      assertFalse(javaClass1.isStrictfp());
      assertEquals(0, javaClass1.getMinor());
      assertEquals(161, javaClass1.getAccessFlags());
      assertFalse(javaClass1.isInterface());
      assertEquals(17, javaClass1.getClassNameIndex());
      assertTrue(javaClass1.isClass());
      assertFalse(javaClass1.isFinal());
      assertEquals(161, javaClass1.getModifiers());
      assertFalse(javaClass1.isVolatile());
      assertEquals((byte)2, javaClass1.getSource());
      assertEquals("java.lang", javaClass1.getPackageName());
      assertTrue(javaClass1.isTransient());
      assertFalse(javaClass1.isPrivate());
      assertFalse(javaClass1.isEnum());
      assertFalse(javaClass1.isAbstract());
      assertFalse(javaClass1.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotNull(javaClass0);
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStatic());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertFalse(javaClass0.isVolatile());
      assertTrue(javaClass0.isClass());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isNative());
      assertEquals(49, javaClass0.getModifiers());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isPrivate());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isTransient());
      
      javaClass0.isPrivate(true);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStatic());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertFalse(javaClass0.isVolatile());
      assertTrue(javaClass0.isClass());
      assertEquals(51, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isPrivate());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertEquals(51, javaClass0.getModifiers());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isTransient());
      
      JavaClass javaClass1 = javaClass0.copy();
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertTrue(javaClass1.equals((Object)javaClass0));
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass1);
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStatic());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertFalse(javaClass0.isVolatile());
      assertTrue(javaClass0.isClass());
      assertEquals(51, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isPrivate());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertEquals(51, javaClass0.getModifiers());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass1.isFinal());
      assertEquals("String.java", javaClass1.getSourceFileName());
      assertTrue(javaClass1.isClass());
      assertEquals((byte)2, javaClass1.getSource());
      assertEquals(0, javaClass1.getMinor());
      assertEquals("java.lang.String", javaClass1.getClassName());
      assertFalse(javaClass1.isInterface());
      assertFalse(javaClass1.isProtected());
      assertFalse(javaClass1.isVolatile());
      assertFalse(javaClass1.isStrictfp());
      assertEquals(51, javaClass1.getAccessFlags());
      assertTrue(javaClass1.isSuper());
      assertFalse(javaClass1.isVarArgs());
      assertTrue(javaClass1.isSynchronized());
      assertFalse(javaClass1.isNative());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertTrue(javaClass1.isPublic());
      assertFalse(javaClass1.isStatic());
      assertFalse(javaClass1.isTransient());
      assertEquals(43, javaClass1.getClassNameIndex());
      assertEquals(52, javaClass1.getMajor());
      assertEquals(147, javaClass1.getSuperclassNameIndex());
      assertEquals("java.lang.String", javaClass1.getFileName());
      assertEquals("java.lang", javaClass1.getPackageName());
      assertFalse(javaClass1.isAbstract());
      assertTrue(javaClass1.isPrivate());
      assertFalse(javaClass1.isEnum());
      assertEquals(51, javaClass1.getModifiers());
      assertFalse(javaClass1.isSynthetic());
      assertFalse(javaClass1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      JavaClass javaClass0 = classLoaderRepository0.loadClass("org.apache.bcel.Constants");
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isPrivate());
      assertEquals("Constants.java", javaClass0.getSourceFileName());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(310, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isTransient());
      assertEquals(0, javaClass0.getMinor());
      assertEquals("org.apache.bcel", javaClass0.getPackageName());
      assertEquals(1537, javaClass0.getModifiers());
      assertFalse(javaClass0.isClass());
      assertFalse(javaClass0.isStrictfp());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynchronized());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isAbstract());
      assertEquals("org.apache.bcel.Constants", javaClass0.getClassName());
      assertEquals(1537, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isFinal());
      assertEquals("org.apache.bcel.Constants", javaClass0.getFileName());
      assertFalse(javaClass0.isSuper());
      assertTrue(javaClass0.isInterface());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isProtected());
      
      JavaClass javaClass1 = javaClass0.copy();
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertTrue(javaClass1.equals((Object)javaClass0));
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass1);
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isPrivate());
      assertEquals("Constants.java", javaClass0.getSourceFileName());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(310, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isTransient());
      assertEquals(0, javaClass0.getMinor());
      assertEquals("org.apache.bcel", javaClass0.getPackageName());
      assertEquals(1537, javaClass0.getModifiers());
      assertFalse(javaClass0.isClass());
      assertFalse(javaClass0.isStrictfp());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynchronized());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isAbstract());
      assertEquals("org.apache.bcel.Constants", javaClass0.getClassName());
      assertEquals(1537, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isFinal());
      assertEquals("org.apache.bcel.Constants", javaClass0.getFileName());
      assertFalse(javaClass0.isSuper());
      assertTrue(javaClass0.isInterface());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isProtected());
      assertEquals(0, javaClass1.getMinor());
      assertEquals("org.apache.bcel.Constants", javaClass1.getClassName());
      assertFalse(javaClass1.isSuper());
      assertEquals("org.apache.bcel", javaClass1.getPackageName());
      assertTrue(javaClass1.isInterface());
      assertFalse(javaClass1.isClass());
      assertFalse(javaClass1.isProtected());
      assertFalse(javaClass1.isVarArgs());
      assertEquals(52, javaClass1.getMajor());
      assertFalse(javaClass1.isVolatile());
      assertFalse(javaClass1.isStrictfp());
      assertEquals(310, javaClass1.getSuperclassNameIndex());
      assertTrue(javaClass1.isPublic());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertFalse(javaClass1.isNative());
      assertEquals(1537, javaClass1.getAccessFlags());
      assertEquals(1537, javaClass1.getModifiers());
      assertEquals("org.apache.bcel.Constants", javaClass1.getFileName());
      assertFalse(javaClass1.isSynchronized());
      assertFalse(javaClass1.isTransient());
      assertEquals((byte)2, javaClass1.getSource());
      assertEquals(1, javaClass1.getClassNameIndex());
      assertFalse(javaClass1.isPrivate());
      assertEquals("Constants.java", javaClass1.getSourceFileName());
      assertFalse(javaClass1.isEnum());
      assertFalse(javaClass1.isSynthetic());
      assertTrue(javaClass1.isAbstract());
      assertFalse(javaClass1.isFinal());
      assertFalse(javaClass1.isAnnotation());
      assertFalse(javaClass1.isStatic());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isVolatile());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPrivate());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isStatic());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isNative());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isProtected());
      assertEquals(52, javaClass0.getMajor());
      
      javaClass0.setSuperclassNameIndex((-1102));
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isAbstract());
      assertEquals((-1102), javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPrivate());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isStatic());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isNative());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isProtected());
      assertEquals(52, javaClass0.getMajor());
      
      JavaClass javaClass1 = javaClass0.copy();
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertTrue(javaClass1.equals((Object)javaClass0));
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass1);
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isAbstract());
      assertEquals((-1102), javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPrivate());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isStatic());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isNative());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isProtected());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(4, javaClass1.getClassNameIndex());
      assertFalse(javaClass1.isPrivate());
      assertFalse(javaClass1.isNative());
      assertEquals("org.apache.bcel.classfile", javaClass1.getPackageName());
      assertEquals((-1102), javaClass1.getSuperclassNameIndex());
      assertFalse(javaClass1.isVolatile());
      assertTrue(javaClass1.isClass());
      assertEquals(0, javaClass1.getMinor());
      assertEquals(33, javaClass1.getAccessFlags());
      assertFalse(javaClass1.isTransient());
      assertFalse(javaClass1.isStatic());
      assertFalse(javaClass1.isAnnotation());
      assertFalse(javaClass1.isEnum());
      assertFalse(javaClass1.isAbstract());
      assertFalse(javaClass1.isSynthetic());
      assertFalse(javaClass1.isVarArgs());
      assertFalse(javaClass1.isProtected());
      assertEquals("JavaClass.java", javaClass1.getSourceFileName());
      assertEquals((byte)2, javaClass1.getSource());
      assertFalse(javaClass1.isFinal());
      assertFalse(javaClass1.isInterface());
      assertEquals(33, javaClass1.getModifiers());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass1.getSuperclassName());
      assertTrue(javaClass1.isSynchronized());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass1.getFileName());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass1.getClassName());
      assertTrue(javaClass1.isPublic());
      assertTrue(javaClass1.isSuper());
      assertEquals(52, javaClass1.getMajor());
      assertFalse(javaClass1.isStrictfp());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isVolatile());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertFalse(javaClass0.isInterface());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertEquals(49, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isTransient());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isPrivate());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      
      javaClass0.setMinor((-4487));
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertFalse(javaClass0.isVolatile());
      assertTrue(javaClass0.isClass());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertFalse(javaClass0.isInterface());
      assertEquals((-4487), javaClass0.getMinor());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertEquals(49, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isTransient());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isPrivate());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      
      JavaClass javaClass1 = javaClass0.copy();
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertTrue(javaClass1.equals((Object)javaClass0));
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotNull(javaClass1);
      assertFalse(javaClass0.isVolatile());
      assertTrue(javaClass0.isClass());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertFalse(javaClass0.isInterface());
      assertEquals((-4487), javaClass0.getMinor());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertEquals(49, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isTransient());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isPrivate());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass1.isInterface());
      assertFalse(javaClass1.isVarArgs());
      assertFalse(javaClass1.isProtected());
      assertTrue(javaClass1.isSuper());
      assertFalse(javaClass1.isEnum());
      assertEquals((byte)2, javaClass1.getSource());
      assertTrue(javaClass1.isClass());
      assertFalse(javaClass1.isAbstract());
      assertEquals("java.lang.String", javaClass1.getFileName());
      assertEquals("java.lang.String", javaClass1.getClassName());
      assertTrue(javaClass1.isFinal());
      assertFalse(javaClass1.isStatic());
      assertEquals(43, javaClass1.getClassNameIndex());
      assertFalse(javaClass1.isAnnotation());
      assertTrue(javaClass1.isPublic());
      assertFalse(javaClass1.isTransient());
      assertTrue(javaClass1.isSynchronized());
      assertFalse(javaClass1.isPrivate());
      assertEquals(49, javaClass1.getModifiers());
      assertEquals(52, javaClass1.getMajor());
      assertFalse(javaClass1.isSynthetic());
      assertEquals((-4487), javaClass1.getMinor());
      assertFalse(javaClass1.isVolatile());
      assertFalse(javaClass1.isStrictfp());
      assertEquals("java.lang", javaClass1.getPackageName());
      assertFalse(javaClass1.isNative());
      assertEquals(147, javaClass1.getSuperclassNameIndex());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertEquals("String.java", javaClass1.getSourceFileName());
      assertEquals(49, javaClass1.getAccessFlags());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass0);
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isNative());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isFinal());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isAbstract());
      assertEquals(49, javaClass0.getModifiers());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals(0, javaClass0.getMinor());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isTransient());
      
      javaClass0.setMajor((-369));
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isNative());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isStrictfp());
      assertEquals((-369), javaClass0.getMajor());
      assertTrue(javaClass0.isSuper());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isAbstract());
      assertEquals(49, javaClass0.getModifiers());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals(0, javaClass0.getMinor());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isTransient());
      
      JavaClass javaClass1 = javaClass0.copy();
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertTrue(javaClass1.equals((Object)javaClass0));
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass1);
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isNative());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isStrictfp());
      assertEquals((-369), javaClass0.getMajor());
      assertTrue(javaClass0.isSuper());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isAbstract());
      assertEquals(49, javaClass0.getModifiers());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals(0, javaClass0.getMinor());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass1.isClass());
      assertEquals(0, javaClass1.getMinor());
      assertFalse(javaClass1.isVolatile());
      assertEquals("java.lang.String", javaClass1.getClassName());
      assertFalse(javaClass1.isInterface());
      assertFalse(javaClass1.isProtected());
      assertEquals(49, javaClass1.getModifiers());
      assertFalse(javaClass1.isEnum());
      assertFalse(javaClass1.isSynthetic());
      assertTrue(javaClass1.isFinal());
      assertEquals((byte)2, javaClass1.getSource());
      assertFalse(javaClass1.isAbstract());
      assertFalse(javaClass1.isPrivate());
      assertFalse(javaClass1.isAnnotation());
      assertFalse(javaClass1.isStatic());
      assertTrue(javaClass1.isSynchronized());
      assertEquals("java.lang", javaClass1.getPackageName());
      assertEquals("java.lang.String", javaClass1.getFileName());
      assertFalse(javaClass1.isTransient());
      assertTrue(javaClass1.isSuper());
      assertEquals("String.java", javaClass1.getSourceFileName());
      assertEquals(147, javaClass1.getSuperclassNameIndex());
      assertEquals(49, javaClass1.getAccessFlags());
      assertEquals((-369), javaClass1.getMajor());
      assertFalse(javaClass1.isVarArgs());
      assertFalse(javaClass1.isStrictfp());
      assertEquals(43, javaClass1.getClassNameIndex());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertFalse(javaClass1.isNative());
      assertTrue(javaClass1.isPublic());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isInterface());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isNative());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isTransient());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertTrue(javaClass0.isFinal());
      assertEquals("java.lang.String", javaClass0.getClassName());
      
      javaClass0.setClassNameIndex((-1916));
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertFalse(javaClass0.isInterface());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isNative());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertEquals((-1916), javaClass0.getClassNameIndex());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isTransient());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertTrue(javaClass0.isFinal());
      assertEquals("java.lang.String", javaClass0.getClassName());
      
      JavaClass javaClass1 = javaClass0.copy();
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertTrue(javaClass1.equals((Object)javaClass0));
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertNotNull(javaClass1);
      assertFalse(javaClass0.isInterface());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isNative());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertEquals((-1916), javaClass0.getClassNameIndex());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isTransient());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertTrue(javaClass0.isFinal());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertFalse(javaClass1.isStatic());
      assertEquals(52, javaClass1.getMajor());
      assertFalse(javaClass1.isPrivate());
      assertFalse(javaClass1.isTransient());
      assertEquals((-1916), javaClass1.getClassNameIndex());
      assertEquals(147, javaClass1.getSuperclassNameIndex());
      assertFalse(javaClass1.isVolatile());
      assertEquals("java.lang.String", javaClass1.getFileName());
      assertEquals("java.lang.String", javaClass1.getClassName());
      assertEquals(49, javaClass1.getAccessFlags());
      assertTrue(javaClass1.isSuper());
      assertTrue(javaClass1.isSynchronized());
      assertFalse(javaClass1.isNative());
      assertFalse(javaClass1.isStrictfp());
      assertTrue(javaClass1.isPublic());
      assertFalse(javaClass1.isVarArgs());
      assertEquals((byte)2, javaClass1.getSource());
      assertFalse(javaClass1.isInterface());
      assertFalse(javaClass1.isProtected());
      assertTrue(javaClass1.isFinal());
      assertEquals("String.java", javaClass1.getSourceFileName());
      assertEquals("java.lang", javaClass1.getPackageName());
      assertTrue(javaClass1.isClass());
      assertEquals(0, javaClass1.getMinor());
      assertFalse(javaClass1.isEnum());
      assertFalse(javaClass1.isSynthetic());
      assertFalse(javaClass1.isAbstract());
      assertFalse(javaClass1.isAnnotation());
      assertEquals(49, javaClass1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      JavaClass javaClass0 = classLoaderRepository0.loadClass("java.lang.Integer$IntegerCache");
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertNotNull(javaClass0);
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertEquals(32, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPublic());
      assertFalse(javaClass0.isPrivate());
      assertEquals("java.lang.Integer$IntegerCache", javaClass0.getClassName());
      assertEquals("java.lang.Integer$IntegerCache", javaClass0.getFileName());
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(32, javaClass0.getModifiers());
      assertFalse(javaClass0.isNative());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertEquals(18, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isInterface());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isAbstract());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isFinal());
      assertEquals(9, javaClass0.getClassNameIndex());
      
      javaClass0.isSynchronized(false);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPublic());
      assertFalse(javaClass0.isPrivate());
      assertEquals("java.lang.Integer$IntegerCache", javaClass0.getClassName());
      assertFalse(javaClass0.isSynchronized());
      assertEquals("java.lang.Integer$IntegerCache", javaClass0.getFileName());
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isNative());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertEquals(18, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isInterface());
      assertEquals(0, javaClass0.getAccessFlags());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isAbstract());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getModifiers());
      assertFalse(javaClass0.isFinal());
      assertEquals(9, javaClass0.getClassNameIndex());
      
      JavaClass javaClass1 = javaClass0.copy();
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertTrue(javaClass1.equals((Object)javaClass0));
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass1);
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPublic());
      assertFalse(javaClass0.isPrivate());
      assertEquals("java.lang.Integer$IntegerCache", javaClass0.getClassName());
      assertFalse(javaClass0.isSynchronized());
      assertEquals("java.lang.Integer$IntegerCache", javaClass0.getFileName());
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isNative());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertEquals(18, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isInterface());
      assertEquals(0, javaClass0.getAccessFlags());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isAbstract());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getModifiers());
      assertFalse(javaClass0.isFinal());
      assertEquals(9, javaClass0.getClassNameIndex());
      assertFalse(javaClass1.isPublic());
      assertFalse(javaClass1.isSynchronized());
      assertEquals("java.lang.Integer$IntegerCache", javaClass1.getFileName());
      assertFalse(javaClass1.isStatic());
      assertFalse(javaClass1.isAbstract());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertFalse(javaClass1.isAnnotation());
      assertFalse(javaClass1.isVarArgs());
      assertFalse(javaClass1.isProtected());
      assertEquals(18, javaClass1.getSuperclassNameIndex());
      assertFalse(javaClass1.isSuper());
      assertFalse(javaClass1.isStrictfp());
      assertEquals(9, javaClass1.getClassNameIndex());
      assertEquals(52, javaClass1.getMajor());
      assertFalse(javaClass1.isFinal());
      assertFalse(javaClass1.isInterface());
      assertTrue(javaClass1.isClass());
      assertEquals(0, javaClass1.getModifiers());
      assertEquals(0, javaClass1.getMinor());
      assertEquals("java.lang.Integer$IntegerCache", javaClass1.getClassName());
      assertEquals(0, javaClass1.getAccessFlags());
      assertFalse(javaClass1.isNative());
      assertFalse(javaClass1.isEnum());
      assertFalse(javaClass1.isSynthetic());
      assertEquals((byte)2, javaClass1.getSource());
      assertEquals("Integer.java", javaClass1.getSourceFileName());
      assertFalse(javaClass1.isPrivate());
      assertEquals("java.lang", javaClass1.getPackageName());
      assertFalse(javaClass1.isTransient());
      assertFalse(javaClass1.isVolatile());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isFinal());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isStatic());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isNative());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isProtected());
      assertEquals(52, javaClass0.getMajor());
      
      javaClass0.setAccessFlags((-675));
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((-675), javaClass0.getModifiers());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isFinal());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertTrue(javaClass0.isNative());
      assertTrue(javaClass0.isAbstract());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertTrue(javaClass0.isEnum());
      assertTrue(javaClass0.isSynthetic());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isVolatile());
      assertEquals((-675), javaClass0.getAccessFlags());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isClass());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertTrue(javaClass0.isPublic());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isStatic());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isAnnotation());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertTrue(javaClass0.isStrictfp());
      assertFalse(javaClass0.isSynchronized());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertTrue(javaClass0.isProtected());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isSuper());
      
      JavaClass javaClass1 = javaClass0.copy();
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertTrue(javaClass1.equals((Object)javaClass0));
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass1);
      assertEquals((-675), javaClass0.getModifiers());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isFinal());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertTrue(javaClass0.isNative());
      assertTrue(javaClass0.isAbstract());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertTrue(javaClass0.isEnum());
      assertTrue(javaClass0.isSynthetic());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isVolatile());
      assertEquals((-675), javaClass0.getAccessFlags());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isClass());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertTrue(javaClass0.isPublic());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isStatic());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isAnnotation());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertTrue(javaClass0.isStrictfp());
      assertFalse(javaClass0.isSynchronized());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertTrue(javaClass0.isProtected());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isSuper());
      assertFalse(javaClass1.isTransient());
      assertEquals(43, javaClass1.getClassNameIndex());
      assertEquals("java.lang.String", javaClass1.getFileName());
      assertEquals("java.lang", javaClass1.getPackageName());
      assertEquals(147, javaClass1.getSuperclassNameIndex());
      assertTrue(javaClass1.isProtected());
      assertFalse(javaClass1.isSynchronized());
      assertTrue(javaClass1.isStrictfp());
      assertEquals(52, javaClass1.getMajor());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertFalse(javaClass1.isVarArgs());
      assertTrue(javaClass1.isPublic());
      assertEquals(0, javaClass1.getMinor());
      assertEquals((-675), javaClass1.getAccessFlags());
      assertTrue(javaClass1.isClass());
      assertFalse(javaClass1.isSuper());
      assertTrue(javaClass1.isNative());
      assertEquals("String.java", javaClass1.getSourceFileName());
      assertTrue(javaClass1.isVolatile());
      assertEquals((-675), javaClass1.getModifiers());
      assertEquals("java.lang.String", javaClass1.getClassName());
      assertTrue(javaClass1.isFinal());
      assertFalse(javaClass1.isInterface());
      assertEquals((byte)2, javaClass1.getSource());
      assertFalse(javaClass1.isPrivate());
      assertTrue(javaClass1.isStatic());
      assertTrue(javaClass1.isAnnotation());
      assertTrue(javaClass1.isAbstract());
      assertTrue(javaClass1.isEnum());
      assertTrue(javaClass1.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotNull(javaClass0);
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isSuper());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isInterface());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertTrue(javaClass0.isFinal());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isNative());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isPrivate());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isVolatile());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      
      JavaClass javaClass1 = javaClass0.copy();
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertTrue(javaClass1.equals((Object)javaClass0));
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertNotNull(javaClass1);
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isSuper());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isInterface());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertTrue(javaClass0.isFinal());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isNative());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isPrivate());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isVolatile());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass1.isVolatile());
      assertEquals("java.lang.String", javaClass1.getClassName());
      assertTrue(javaClass1.isClass());
      assertEquals(49, javaClass1.getModifiers());
      assertFalse(javaClass1.isPrivate());
      assertEquals(52, javaClass1.getMajor());
      assertFalse(javaClass1.isSynthetic());
      assertEquals(0, javaClass1.getMinor());
      assertFalse(javaClass1.isStatic());
      assertFalse(javaClass1.isAnnotation());
      assertFalse(javaClass1.isInterface());
      assertTrue(javaClass1.isFinal());
      assertFalse(javaClass1.isAbstract());
      assertEquals("java.lang", javaClass1.getPackageName());
      assertFalse(javaClass1.isStrictfp());
      assertEquals("java.lang.String", javaClass1.getFileName());
      assertFalse(javaClass1.isVarArgs());
      assertFalse(javaClass1.isProtected());
      assertTrue(javaClass1.isSuper());
      assertFalse(javaClass1.isEnum());
      assertEquals((byte)2, javaClass1.getSource());
      assertEquals(43, javaClass1.getClassNameIndex());
      assertFalse(javaClass1.isTransient());
      assertTrue(javaClass1.isPublic());
      assertTrue(javaClass1.isSynchronized());
      assertEquals("String.java", javaClass1.getSourceFileName());
      assertEquals(147, javaClass1.getSuperclassNameIndex());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertFalse(javaClass1.isNative());
      assertEquals(49, javaClass1.getAccessFlags());
      
      javaClass1.setClassName("java.lang.Object");
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertFalse(javaClass0.equals((Object)javaClass1));
      assertFalse(javaClass1.equals((Object)javaClass0));
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isSuper());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isInterface());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertTrue(javaClass0.isFinal());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isNative());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isPrivate());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isVolatile());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass1.isVolatile());
      assertTrue(javaClass1.isClass());
      assertEquals(49, javaClass1.getModifiers());
      assertFalse(javaClass1.isPrivate());
      assertEquals(52, javaClass1.getMajor());
      assertFalse(javaClass1.isSynthetic());
      assertEquals(0, javaClass1.getMinor());
      assertFalse(javaClass1.isStatic());
      assertFalse(javaClass1.isAnnotation());
      assertFalse(javaClass1.isInterface());
      assertTrue(javaClass1.isFinal());
      assertFalse(javaClass1.isAbstract());
      assertEquals("java.lang", javaClass1.getPackageName());
      assertFalse(javaClass1.isStrictfp());
      assertEquals("java.lang.String", javaClass1.getFileName());
      assertFalse(javaClass1.isVarArgs());
      assertFalse(javaClass1.isProtected());
      assertTrue(javaClass1.isSuper());
      assertFalse(javaClass1.isEnum());
      assertEquals((byte)2, javaClass1.getSource());
      assertEquals(43, javaClass1.getClassNameIndex());
      assertFalse(javaClass1.isTransient());
      assertTrue(javaClass1.isPublic());
      assertTrue(javaClass1.isSynchronized());
      assertEquals("java.lang.Object", javaClass1.getClassName());
      assertEquals("String.java", javaClass1.getSourceFileName());
      assertEquals(147, javaClass1.getSuperclassNameIndex());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertFalse(javaClass1.isNative());
      assertEquals(49, javaClass1.getAccessFlags());
      
      int int0 = javaClass0.compareTo(javaClass1);
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertEquals(4, int0);
      assertFalse(javaClass0.equals((Object)javaClass1));
      assertFalse(javaClass1.equals((Object)javaClass0));
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isSuper());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isInterface());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertTrue(javaClass0.isFinal());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isNative());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isPrivate());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isVolatile());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass1.isVolatile());
      assertTrue(javaClass1.isClass());
      assertEquals(49, javaClass1.getModifiers());
      assertFalse(javaClass1.isPrivate());
      assertEquals(52, javaClass1.getMajor());
      assertFalse(javaClass1.isSynthetic());
      assertEquals(0, javaClass1.getMinor());
      assertFalse(javaClass1.isStatic());
      assertFalse(javaClass1.isAnnotation());
      assertFalse(javaClass1.isInterface());
      assertTrue(javaClass1.isFinal());
      assertFalse(javaClass1.isAbstract());
      assertEquals("java.lang", javaClass1.getPackageName());
      assertFalse(javaClass1.isStrictfp());
      assertEquals("java.lang.String", javaClass1.getFileName());
      assertFalse(javaClass1.isVarArgs());
      assertFalse(javaClass1.isProtected());
      assertTrue(javaClass1.isSuper());
      assertFalse(javaClass1.isEnum());
      assertEquals((byte)2, javaClass1.getSource());
      assertEquals(43, javaClass1.getClassNameIndex());
      assertFalse(javaClass1.isTransient());
      assertTrue(javaClass1.isPublic());
      assertTrue(javaClass1.isSynchronized());
      assertEquals("java.lang.Object", javaClass1.getClassName());
      assertEquals("String.java", javaClass1.getSourceFileName());
      assertEquals(147, javaClass1.getSuperclassNameIndex());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertFalse(javaClass1.isNative());
      assertEquals(49, javaClass1.getAccessFlags());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotNull(javaClass0);
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isAbstract());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isEnum());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertFalse(javaClass0.isNative());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isSynthetic());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isAnnotation());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isFinal());
      
      JavaClass javaClass1 = javaClass0.getSuperClass();
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertFalse(javaClass1.equals((Object)javaClass0));
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass1);
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isAbstract());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isEnum());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertFalse(javaClass0.isNative());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isSynthetic());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isAnnotation());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isFinal());
      assertEquals("org.apache.bcel.classfile", javaClass1.getPackageName());
      assertFalse(javaClass1.isTransient());
      assertEquals(6, javaClass1.getClassNameIndex());
      assertEquals(52, javaClass1.getMajor());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass1.getFileName());
      assertTrue(javaClass1.isSynchronized());
      assertFalse(javaClass1.isNative());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertEquals("AccessFlags.java", javaClass1.getSourceFileName());
      assertTrue(javaClass1.isAbstract());
      assertFalse(javaClass1.isAnnotation());
      assertFalse(javaClass1.isStatic());
      assertTrue(javaClass1.isPublic());
      assertFalse(javaClass1.isStrictfp());
      assertEquals(1057, javaClass1.getModifiers());
      assertFalse(javaClass1.isInterface());
      assertFalse(javaClass1.isProtected());
      assertFalse(javaClass1.isFinal());
      assertTrue(javaClass1.isSuper());
      assertFalse(javaClass1.isVarArgs());
      assertFalse(javaClass1.isVolatile());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass1.getClassName());
      assertEquals(7, javaClass1.getSuperclassNameIndex());
      assertFalse(javaClass1.isEnum());
      assertFalse(javaClass1.isSynthetic());
      assertFalse(javaClass1.isPrivate());
      assertTrue(javaClass1.isClass());
      assertEquals((byte)2, javaClass1.getSource());
      assertEquals(0, javaClass1.getMinor());
      assertEquals(1057, javaClass1.getAccessFlags());
      
      int int0 = javaClass1.compareTo(javaClass0);
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertEquals((-9), int0);
      assertFalse(javaClass0.equals((Object)javaClass1));
      assertFalse(javaClass1.equals((Object)javaClass0));
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isAbstract());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isEnum());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertFalse(javaClass0.isNative());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isSynthetic());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isAnnotation());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isFinal());
      assertEquals("org.apache.bcel.classfile", javaClass1.getPackageName());
      assertFalse(javaClass1.isTransient());
      assertEquals(6, javaClass1.getClassNameIndex());
      assertEquals(52, javaClass1.getMajor());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass1.getFileName());
      assertTrue(javaClass1.isSynchronized());
      assertFalse(javaClass1.isNative());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertEquals("AccessFlags.java", javaClass1.getSourceFileName());
      assertTrue(javaClass1.isAbstract());
      assertFalse(javaClass1.isAnnotation());
      assertFalse(javaClass1.isStatic());
      assertTrue(javaClass1.isPublic());
      assertFalse(javaClass1.isStrictfp());
      assertEquals(1057, javaClass1.getModifiers());
      assertFalse(javaClass1.isInterface());
      assertFalse(javaClass1.isProtected());
      assertFalse(javaClass1.isFinal());
      assertTrue(javaClass1.isSuper());
      assertFalse(javaClass1.isVarArgs());
      assertFalse(javaClass1.isVolatile());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass1.getClassName());
      assertEquals(7, javaClass1.getSuperclassNameIndex());
      assertFalse(javaClass1.isEnum());
      assertFalse(javaClass1.isSynthetic());
      assertFalse(javaClass1.isPrivate());
      assertTrue(javaClass1.isClass());
      assertEquals((byte)2, javaClass1.getSource());
      assertEquals(0, javaClass1.getMinor());
      assertEquals(1057, javaClass1.getAccessFlags());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass0);
      assertEquals("java.lang.Integer", javaClass0.getFileName());
      assertFalse(javaClass0.isVolatile());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isPrivate());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isNative());
      assertEquals("java.lang.Integer", javaClass0.getClassName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertTrue(javaClass0.isSuper());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isProtected());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isAnnotation());
      assertEquals(94, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isInterface());
      assertEquals("java.lang.Number", javaClass0.getSuperclassName());
      
      javaClass0.setFields((Field[]) null);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals("java.lang.Integer", javaClass0.getFileName());
      assertFalse(javaClass0.isVolatile());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isPrivate());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isNative());
      assertEquals("java.lang.Integer", javaClass0.getClassName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertTrue(javaClass0.isSuper());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isProtected());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isAnnotation());
      assertEquals(94, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isInterface());
      assertEquals("java.lang.Number", javaClass0.getSuperclassName());
      
      // Undeclared exception!
      try { 
        javaClass0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertNotNull(javaClass0);
      assertEquals("java.lang", javaClass0.getPackageName());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStrictfp());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSuper());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isVolatile());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isNative());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isTransient());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(33, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPrivate());
      
      int[] intArray0 = new int[9];
      javaClass0.setInterfaces(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals("java.lang", javaClass0.getPackageName());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStrictfp());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSuper());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isVolatile());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isNative());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isTransient());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(33, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPrivate());
      
      // Undeclared exception!
      try { 
        javaClass0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isAbstract());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isSynthetic());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isTransient());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      
      javaClass0.setAttributes((Attribute[]) null);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isAbstract());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isSynthetic());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isTransient());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      
      // Undeclared exception!
      try { 
        javaClass0.isNested();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.JavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isPrivate());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isAbstract());
      assertEquals("java.lang.Number", javaClass0.getSuperclassName());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isInterface());
      assertEquals(94, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isEnum());
      assertEquals("java.lang.Integer", javaClass0.getClassName());
      assertEquals("java.lang.Integer", javaClass0.getFileName());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isNative());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isVolatile());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      javaClass0.setConstantPool(constantPool0);
      assertEquals(0, constantArray0.length);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isPrivate());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isAbstract());
      assertEquals("java.lang.Number", javaClass0.getSuperclassName());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isInterface());
      assertEquals(94, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isEnum());
      assertEquals("java.lang.Integer", javaClass0.getClassName());
      assertEquals("java.lang.Integer", javaClass0.getFileName());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isNative());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isVolatile());
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        javaClass0.isAnonymous();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 51. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertFalse(javaClass0.isNative());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isPrivate());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isClass());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isProtected());
      
      javaClass0.setAttributes((Attribute[]) null);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertFalse(javaClass0.isNative());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isPrivate());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isClass());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isProtected());
      
      // Undeclared exception!
      try { 
        javaClass0.isAnonymous();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.JavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPrivate());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isProtected());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isEnum());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      
      JavaClass javaClass1 = javaClass0.getSuperClass();
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertFalse(javaClass1.equals((Object)javaClass0));
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass1);
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPrivate());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isProtected());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isEnum());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass1.isClass());
      assertEquals(1057, javaClass1.getModifiers());
      assertEquals(0, javaClass1.getMinor());
      assertEquals(1057, javaClass1.getAccessFlags());
      assertEquals(7, javaClass1.getSuperclassNameIndex());
      assertFalse(javaClass1.isFinal());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass1.getClassName());
      assertFalse(javaClass1.isNative());
      assertFalse(javaClass1.isEnum());
      assertFalse(javaClass1.isSynthetic());
      assertEquals((byte)2, javaClass1.getSource());
      assertEquals(6, javaClass1.getClassNameIndex());
      assertFalse(javaClass1.isPrivate());
      assertFalse(javaClass1.isVolatile());
      assertFalse(javaClass1.isTransient());
      assertTrue(javaClass1.isSynchronized());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass1.getFileName());
      assertFalse(javaClass1.isStatic());
      assertEquals("AccessFlags.java", javaClass1.getSourceFileName());
      assertTrue(javaClass1.isAbstract());
      assertFalse(javaClass1.isAnnotation());
      assertTrue(javaClass1.isPublic());
      assertTrue(javaClass1.isSuper());
      assertFalse(javaClass1.isVarArgs());
      assertEquals(52, javaClass1.getMajor());
      assertFalse(javaClass1.isStrictfp());
      assertEquals("org.apache.bcel.classfile", javaClass1.getPackageName());
      assertFalse(javaClass1.isInterface());
      assertFalse(javaClass1.isProtected());
      
      javaClass1.setSuperclassName((String) null);
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertFalse(javaClass0.equals((Object)javaClass1));
      assertFalse(javaClass1.equals((Object)javaClass0));
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPrivate());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isProtected());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isEnum());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass1.isClass());
      assertEquals(1057, javaClass1.getModifiers());
      assertEquals(0, javaClass1.getMinor());
      assertEquals(1057, javaClass1.getAccessFlags());
      assertEquals(7, javaClass1.getSuperclassNameIndex());
      assertFalse(javaClass1.isFinal());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass1.getClassName());
      assertFalse(javaClass1.isNative());
      assertFalse(javaClass1.isEnum());
      assertFalse(javaClass1.isSynthetic());
      assertEquals((byte)2, javaClass1.getSource());
      assertEquals(6, javaClass1.getClassNameIndex());
      assertFalse(javaClass1.isPrivate());
      assertFalse(javaClass1.isVolatile());
      assertFalse(javaClass1.isTransient());
      assertTrue(javaClass1.isSynchronized());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass1.getFileName());
      assertFalse(javaClass1.isStatic());
      assertEquals("AccessFlags.java", javaClass1.getSourceFileName());
      assertTrue(javaClass1.isAbstract());
      assertFalse(javaClass1.isAnnotation());
      assertTrue(javaClass1.isPublic());
      assertTrue(javaClass1.isSuper());
      assertFalse(javaClass1.isVarArgs());
      assertEquals(52, javaClass1.getMajor());
      assertFalse(javaClass1.isStrictfp());
      assertEquals("org.apache.bcel.classfile", javaClass1.getPackageName());
      assertNull(javaClass1.getSuperclassName());
      assertFalse(javaClass1.isInterface());
      assertFalse(javaClass1.isProtected());
      
      // Undeclared exception!
      try { 
        javaClass0.instanceOf(javaClass1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.ClassLoaderRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotNull(javaClass0);
      assertEquals(52, javaClass0.getMajor());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isVolatile());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isFinal());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAbstract());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      
      JavaClass javaClass1 = javaClass0.getSuperClass();
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertFalse(javaClass1.equals((Object)javaClass0));
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass1);
      assertEquals(52, javaClass0.getMajor());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isVolatile());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isFinal());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAbstract());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertTrue(javaClass1.isSynchronized());
      assertEquals("AccessFlags.java", javaClass1.getSourceFileName());
      assertTrue(javaClass1.isAbstract());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass1.getFileName());
      assertFalse(javaClass1.isTransient());
      assertEquals("org.apache.bcel.classfile", javaClass1.getPackageName());
      assertFalse(javaClass1.isEnum());
      assertFalse(javaClass1.isSynthetic());
      assertFalse(javaClass1.isPrivate());
      assertEquals((byte)2, javaClass1.getSource());
      assertFalse(javaClass1.isStatic());
      assertFalse(javaClass1.isAnnotation());
      assertTrue(javaClass1.isClass());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass1.getClassName());
      assertEquals(7, javaClass1.getSuperclassNameIndex());
      assertEquals(0, javaClass1.getMinor());
      assertEquals(1057, javaClass1.getAccessFlags());
      assertFalse(javaClass1.isFinal());
      assertFalse(javaClass1.isInterface());
      assertFalse(javaClass1.isVolatile());
      assertEquals(1057, javaClass1.getModifiers());
      assertEquals(6, javaClass1.getClassNameIndex());
      assertEquals(52, javaClass1.getMajor());
      assertFalse(javaClass1.isProtected());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertFalse(javaClass1.isNative());
      assertTrue(javaClass1.isPublic());
      assertFalse(javaClass1.isStrictfp());
      assertTrue(javaClass1.isSuper());
      assertFalse(javaClass1.isVarArgs());
      
      javaClass1.setSuperclassName("Bj`L&");
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertFalse(javaClass0.equals((Object)javaClass1));
      assertFalse(javaClass1.equals((Object)javaClass0));
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals(52, javaClass0.getMajor());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isVolatile());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isFinal());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAbstract());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertTrue(javaClass1.isSynchronized());
      assertEquals("AccessFlags.java", javaClass1.getSourceFileName());
      assertTrue(javaClass1.isAbstract());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass1.getFileName());
      assertFalse(javaClass1.isTransient());
      assertEquals("org.apache.bcel.classfile", javaClass1.getPackageName());
      assertFalse(javaClass1.isEnum());
      assertFalse(javaClass1.isSynthetic());
      assertFalse(javaClass1.isPrivate());
      assertEquals((byte)2, javaClass1.getSource());
      assertFalse(javaClass1.isStatic());
      assertFalse(javaClass1.isAnnotation());
      assertTrue(javaClass1.isClass());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass1.getClassName());
      assertEquals(7, javaClass1.getSuperclassNameIndex());
      assertEquals(0, javaClass1.getMinor());
      assertEquals(1057, javaClass1.getAccessFlags());
      assertFalse(javaClass1.isFinal());
      assertFalse(javaClass1.isInterface());
      assertFalse(javaClass1.isVolatile());
      assertEquals(1057, javaClass1.getModifiers());
      assertEquals(6, javaClass1.getClassNameIndex());
      assertEquals("Bj`L&", javaClass1.getSuperclassName());
      assertEquals(52, javaClass1.getMajor());
      assertFalse(javaClass1.isProtected());
      assertFalse(javaClass1.isNative());
      assertTrue(javaClass1.isPublic());
      assertFalse(javaClass1.isStrictfp());
      assertTrue(javaClass1.isSuper());
      assertFalse(javaClass1.isVarArgs());
      
      try { 
        javaClass0.instanceOf(javaClass1);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Bj`L& not found.
         //
         verifyException("org.apache.bcel.util.ClassLoaderRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isInterface());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isFinal());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isSynthetic());
      assertTrue(javaClass0.isClass());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isTransient());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isStrictfp());
      assertEquals(52, javaClass0.getMajor());
      
      BCELComparator bCELComparator0 = Method.getComparator();
      assertNotNull(bCELComparator0);
      
      JavaClass.setComparator(bCELComparator0);
      // Undeclared exception!
      try { 
        javaClass0.instanceOf(javaClass0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.JavaClass cannot be cast to org.apache.bcel.classfile.Method
         //
         verifyException("org.apache.bcel.classfile.Method$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertNotNull(javaClass0);
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals("java.lang.Integer", javaClass0.getClassName());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isStatic());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isTransient());
      assertEquals(94, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isAbstract());
      assertEquals(49, javaClass0.getModifiers());
      assertEquals("java.lang.Integer", javaClass0.getFileName());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isInterface());
      assertEquals("java.lang.Number", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isVolatile());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isProtected());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      
      // Undeclared exception!
      try { 
        javaClass0.implementationOf((JavaClass) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.JavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isNative());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isPrivate());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isClass());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isTransient());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isSuper());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isPublic());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isProtected());
      
      JavaClass javaClass1 = javaClass0.copy();
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertTrue(javaClass1.equals((Object)javaClass0));
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotNull(javaClass1);
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isNative());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isPrivate());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isClass());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isTransient());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isSuper());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isPublic());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.lang.String", javaClass1.getClassName());
      assertFalse(javaClass1.isNative());
      assertEquals(49, javaClass1.getAccessFlags());
      assertFalse(javaClass1.isInterface());
      assertEquals(147, javaClass1.getSuperclassNameIndex());
      assertFalse(javaClass1.isVolatile());
      assertFalse(javaClass1.isStatic());
      assertFalse(javaClass1.isAnnotation());
      assertFalse(javaClass1.isTransient());
      assertEquals((byte)2, javaClass1.getSource());
      assertEquals(0, javaClass1.getMinor());
      assertTrue(javaClass1.isClass());
      assertFalse(javaClass1.isPrivate());
      assertEquals(49, javaClass1.getModifiers());
      assertFalse(javaClass1.isEnum());
      assertFalse(javaClass1.isAbstract());
      assertFalse(javaClass1.isSynthetic());
      assertEquals("java.lang.String", javaClass1.getFileName());
      assertEquals("java.lang", javaClass1.getPackageName());
      assertEquals("String.java", javaClass1.getSourceFileName());
      assertTrue(javaClass1.isFinal());
      assertEquals(43, javaClass1.getClassNameIndex());
      assertFalse(javaClass1.isProtected());
      assertTrue(javaClass1.isPublic());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertTrue(javaClass1.isSynchronized());
      assertFalse(javaClass1.isVarArgs());
      assertTrue(javaClass1.isSuper());
      assertEquals(52, javaClass1.getMajor());
      assertFalse(javaClass1.isStrictfp());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "java.lang.Cloneable";
      stringArray0[1] = "java.lang.Cloneable";
      stringArray0[2] = "S \"\">)V";
      javaClass1.setInterfaceNames(stringArray0);
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertEquals(9, stringArray0.length);
      assertTrue(javaClass0.equals((Object)javaClass1));
      assertTrue(javaClass1.equals((Object)javaClass0));
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isNative());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isPrivate());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isClass());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isTransient());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isSuper());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isPublic());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.lang.String", javaClass1.getClassName());
      assertFalse(javaClass1.isNative());
      assertEquals(49, javaClass1.getAccessFlags());
      assertFalse(javaClass1.isInterface());
      assertEquals(147, javaClass1.getSuperclassNameIndex());
      assertFalse(javaClass1.isVolatile());
      assertFalse(javaClass1.isStatic());
      assertFalse(javaClass1.isAnnotation());
      assertFalse(javaClass1.isTransient());
      assertEquals((byte)2, javaClass1.getSource());
      assertEquals(0, javaClass1.getMinor());
      assertTrue(javaClass1.isClass());
      assertFalse(javaClass1.isPrivate());
      assertEquals(49, javaClass1.getModifiers());
      assertFalse(javaClass1.isEnum());
      assertFalse(javaClass1.isAbstract());
      assertFalse(javaClass1.isSynthetic());
      assertEquals("java.lang.String", javaClass1.getFileName());
      assertEquals("java.lang", javaClass1.getPackageName());
      assertEquals("String.java", javaClass1.getSourceFileName());
      assertTrue(javaClass1.isFinal());
      assertEquals(43, javaClass1.getClassNameIndex());
      assertFalse(javaClass1.isProtected());
      assertTrue(javaClass1.isPublic());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertTrue(javaClass1.isSynchronized());
      assertFalse(javaClass1.isVarArgs());
      assertTrue(javaClass1.isSuper());
      assertEquals(52, javaClass1.getMajor());
      assertFalse(javaClass1.isStrictfp());
      
      javaClass0.isInterface(true);
      assertNotSame(javaClass0, javaClass1);
      assertTrue(javaClass0.equals((Object)javaClass1));
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertEquals(561, javaClass0.getModifiers());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(561, javaClass0.getAccessFlags());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isNative());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isPrivate());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isClass());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isSuper());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isInterface());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isProtected());
      
      javaClass1.setClassName("org.apache.bcel.classfile.AccessFlags");
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertFalse(javaClass0.equals((Object)javaClass1));
      assertFalse(javaClass1.equals((Object)javaClass0));
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertEquals(561, javaClass0.getModifiers());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(561, javaClass0.getAccessFlags());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isNative());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isPrivate());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isClass());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isSuper());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isInterface());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isProtected());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass1.getClassName());
      assertFalse(javaClass1.isNative());
      assertEquals(49, javaClass1.getAccessFlags());
      assertFalse(javaClass1.isInterface());
      assertEquals(147, javaClass1.getSuperclassNameIndex());
      assertFalse(javaClass1.isVolatile());
      assertFalse(javaClass1.isStatic());
      assertFalse(javaClass1.isAnnotation());
      assertFalse(javaClass1.isTransient());
      assertEquals((byte)2, javaClass1.getSource());
      assertEquals(0, javaClass1.getMinor());
      assertTrue(javaClass1.isClass());
      assertFalse(javaClass1.isPrivate());
      assertEquals(49, javaClass1.getModifiers());
      assertFalse(javaClass1.isEnum());
      assertFalse(javaClass1.isAbstract());
      assertFalse(javaClass1.isSynthetic());
      assertEquals("java.lang.String", javaClass1.getFileName());
      assertEquals("java.lang", javaClass1.getPackageName());
      assertEquals("String.java", javaClass1.getSourceFileName());
      assertTrue(javaClass1.isFinal());
      assertEquals(43, javaClass1.getClassNameIndex());
      assertFalse(javaClass1.isProtected());
      assertTrue(javaClass1.isPublic());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertTrue(javaClass1.isSynchronized());
      assertFalse(javaClass1.isVarArgs());
      assertTrue(javaClass1.isSuper());
      assertEquals(52, javaClass1.getMajor());
      assertFalse(javaClass1.isStrictfp());
      
      try { 
        javaClass1.implementationOf(javaClass0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // S \"\">)V not found.
         //
         verifyException("org.apache.bcel.util.ClassLoaderRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass0);
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isTransient());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isNative());
      assertEquals(49, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isPublic());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isProtected());
      
      BCELComparator bCELComparator0 = Method.getComparator();
      assertNotNull(bCELComparator0);
      
      JavaClass.setComparator(bCELComparator0);
      javaClass0.isInterface(true);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertEquals(561, javaClass0.getModifiers());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isTransient());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isClass());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isNative());
      assertEquals(561, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isPublic());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isInterface());
      
      // Undeclared exception!
      try { 
        javaClass0.implementationOf(javaClass0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.JavaClass cannot be cast to org.apache.bcel.classfile.Method
         //
         verifyException("org.apache.bcel.classfile.Method$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertEquals(94, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.lang.Number", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isProtected());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isInterface());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(49, javaClass0.getModifiers());
      assertEquals(49, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStatic());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals("java.lang.Integer", javaClass0.getFileName());
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.lang.Integer", javaClass0.getClassName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isTransient());
      
      BCELComparator bCELComparator0 = Constant.getComparator();
      assertNotNull(bCELComparator0);
      
      JavaClass.setComparator(bCELComparator0);
      // Undeclared exception!
      try { 
        javaClass0.hashCode();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.JavaClass cannot be cast to org.apache.bcel.classfile.Constant
         //
         verifyException("org.apache.bcel.classfile.Constant$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass0);
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isFinal());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isNative());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isTransient());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isAbstract());
      
      javaClass0.setSuperclassName("$](oQ`0");
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isFinal());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isVolatile());
      assertEquals("$](oQ`0", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isNative());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isTransient());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isAbstract());
      
      try { 
        javaClass0.getSuperClasses();
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // $](oQ`0 not found.
         //
         verifyException("org.apache.bcel.util.ClassLoaderRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isInterface());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isFinal());
      assertTrue(javaClass0.isClass());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isProtected());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isTransient());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isStatic());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isNative());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isPrivate());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      
      javaClass0.setSuperclassName("@t7_");
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertFalse(javaClass0.isInterface());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isFinal());
      assertTrue(javaClass0.isClass());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isProtected());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertEquals("@t7_", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isTransient());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isStatic());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isNative());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPrivate());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      
      try { 
        javaClass0.getSuperClass();
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // @t7_ not found.
         //
         verifyException("org.apache.bcel.util.ClassLoaderRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertNotNull(javaClass0);
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isProtected());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isAbstract());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isPrivate());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isVolatile());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@t7_";
      javaClass0.setInterfaceNames(stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isProtected());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isAbstract());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isPrivate());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isVolatile());
      
      try { 
        javaClass0.getInterfaces();
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // @t7_ not found.
         //
         verifyException("org.apache.bcel.util.ClassLoaderRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotNull(javaClass0);
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertFalse(javaClass0.isVolatile());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isNative());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isProtected());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isEnum());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isInterface());
      
      javaClass0.setAttributes((Attribute[]) null);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertFalse(javaClass0.isVolatile());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isNative());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isProtected());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isEnum());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isInterface());
      
      // Undeclared exception!
      try { 
        javaClass0.getAnnotationEntries();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isProtected());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertTrue(javaClass0.isSuper());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isAbstract());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      
      String[] stringArray0 = new String[5];
      javaClass0.setInterfaceNames(stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isProtected());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertTrue(javaClass0.isSuper());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isAbstract());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      
      // Undeclared exception!
      try { 
        javaClass0.getAllInterfaces();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.ClassLoaderRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotNull(javaClass0);
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isFinal());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAbstract());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isNative());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isVolatile());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@t7_";
      javaClass0.setInterfaceNames(stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isFinal());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAbstract());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isNative());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isVolatile());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      
      try { 
        javaClass0.getAllInterfaces();
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // @t7_ not found.
         //
         verifyException("org.apache.bcel.util.ClassLoaderRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      JavaClass javaClass0 = classLoaderRepository0.loadClass("org.apache.bcel.classfile.ParameterAnnotationEntry");
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertNotNull(javaClass0);
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isFinal());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertEquals(18, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isProtected());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertEquals(15, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("ParameterAnnotationEntry.java", javaClass0.getSourceFileName());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isClass());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isTransient());
      assertEquals("org.apache.bcel.classfile.ParameterAnnotationEntry", javaClass0.getFileName());
      assertFalse(javaClass0.isVolatile());
      assertEquals("org.apache.bcel.classfile.ParameterAnnotationEntry", javaClass0.getClassName());
      
      // Undeclared exception!
      try { 
        javaClass0.equals((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.JavaClass$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotNull(javaClass0);
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isClass());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isSuper());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isVolatile());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isPrivate());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isFinal());
      
      // Undeclared exception!
      try { 
        javaClass0.dump((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStatic());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isTransient());
      assertEquals("java.io.InputStream", javaClass0.getClassName());
      assertEquals(15, javaClass0.getSuperclassNameIndex());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("java.io", javaClass0.getPackageName());
      assertFalse(javaClass0.isPrivate());
      assertEquals("InputStream.java", javaClass0.getSourceFileName());
      assertTrue(javaClass0.isAbstract());
      assertTrue(javaClass0.isClass());
      assertEquals("java.io.InputStream", javaClass0.getFileName());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isInterface());
      assertEquals(9, javaClass0.getClassNameIndex());
      assertEquals(1057, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isProtected());
      assertEquals(1057, javaClass0.getModifiers());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      
      javaClass0.setConstantPool((ConstantPool) null);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStatic());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isTransient());
      assertEquals("java.io.InputStream", javaClass0.getClassName());
      assertEquals(15, javaClass0.getSuperclassNameIndex());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("java.io", javaClass0.getPackageName());
      assertFalse(javaClass0.isPrivate());
      assertEquals("InputStream.java", javaClass0.getSourceFileName());
      assertTrue(javaClass0.isAbstract());
      assertTrue(javaClass0.isClass());
      assertEquals("java.io.InputStream", javaClass0.getFileName());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isInterface());
      assertEquals(9, javaClass0.getClassNameIndex());
      assertEquals(1057, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isProtected());
      assertEquals(1057, javaClass0.getModifiers());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      
      // Undeclared exception!
      try { 
        javaClass0.dump("Em+JkT>H5opjS*`q6a;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.JavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<JavaClass> class0 = JavaClass.class;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStatic());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isVolatile());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isPrivate());
      assertTrue(javaClass0.isClass());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getMinor());
      
      try { 
        javaClass0.dump("org.apache.bcel.classfile.Node");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotNull(javaClass0);
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isInterface());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isProtected());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isFinal());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAbstract());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isSuper());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isVolatile());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org.apache.bcel.classfile.Node");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      try { 
        javaClass0.dump("org.apache.bcel.classfile.Node");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotNull(javaClass0);
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isNative());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isPrivate());
      assertTrue(javaClass0.isClass());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isInterface());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isPublic());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isVolatile());
      
      // Undeclared exception!
      try { 
        javaClass0.dump((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass0);
      assertEquals(17, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isClass());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isInterface());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertTrue(javaClass0.isSuper());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isPublic());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isNative());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isTransient());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isFinal());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.bcel.classfile.ParameterAnnotationEntry");
      assertNotNull(mockFileOutputStream0);
      
      mockFileOutputStream0.close();
      try { 
        javaClass0.dump((OutputStream) mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertNotNull(javaClass0);
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isTransient());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isAbstract());
      assertTrue(javaClass0.isClass());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isInterface());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isSuper());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertTrue(javaClass0.isSynchronized());
      
      // Undeclared exception!
      try { 
        javaClass0.dump((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.JavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isNative());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isSynthetic());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isStatic());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isStrictfp());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isAbstract());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isEnum());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isTransient());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isVolatile());
      
      MockFile mockFile0 = new MockFile("@TWpOUa?H.e$+zx(");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("@t7_", "@t7_", (File) mockFile0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(file0);
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("@TWpOUa?H.e$+zx(", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("@TWpOUa?H.e$+zx(", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/bcel-6.5.0-src/@TWpOUa?H.e$+zx(", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals("@t7_0@t7_", file0.getName());
      assertEquals("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/bcel-6.5.0-src/@TWpOUa?H.e$+zx(/@t7_0@t7_", file0.toString());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      
      try { 
        javaClass0.dump((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isNative());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isSynthetic());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isTransient());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isPublic());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isInterface());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isFinal());
      
      // Undeclared exception!
      try { 
        javaClass0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.JavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<SequenceInputStream> class0 = SequenceInputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isNative());
      assertEquals("java.io.SequenceInputStream", javaClass0.getFileName());
      assertFalse(javaClass0.isVolatile());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isAbstract());
      assertEquals("java.io.InputStream", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.io.SequenceInputStream", javaClass0.getClassName());
      assertTrue(javaClass0.isSuper());
      assertEquals("java.io", javaClass0.getPackageName());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(16, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isEnum());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(24, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("SequenceInputStream.java", javaClass0.getSourceFileName());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertNotNull(dataOutputStream0);
      
      try { 
        javaClass0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isSuper());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertTrue(javaClass0.isFinal());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isProtected());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isPrivate());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isTransient());
      
      javaClass0.setFields((Field[]) null);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isSuper());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertTrue(javaClass0.isFinal());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isProtected());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isPrivate());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isTransient());
      
      // Undeclared exception!
      try { 
        javaClass0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.JavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass0);
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isTransient());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertFalse(javaClass0.isPrivate());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isFinal());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isClass());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isNative());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isVolatile());
      
      // Undeclared exception!
      try { 
        javaClass0.compareTo((JavaClass) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.JavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<SequenceInputStream> class0 = SequenceInputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isAbstract());
      assertEquals("java.io.InputStream", javaClass0.getSuperclassName());
      assertEquals("java.io.SequenceInputStream", javaClass0.getClassName());
      assertFalse(javaClass0.isEnum());
      assertEquals(16, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertEquals("SequenceInputStream.java", javaClass0.getSourceFileName());
      assertEquals("java.io", javaClass0.getPackageName());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isTransient());
      assertEquals("java.io.SequenceInputStream", javaClass0.getFileName());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isFinal());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isProtected());
      assertEquals(24, javaClass0.getClassNameIndex());
      
      // Undeclared exception!
      try { 
        javaClass0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.JavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int[] intArray0 = new int[2];
      Field[] fieldArray0 = new Field[0];
      Method[] methodArray0 = new Method[0];
      JavaClass javaClass0 = null;
      try {
        javaClass0 = new JavaClass(1933, 63, "qn1`hm&y\"", 63, 1933, 3, (ConstantPool) null, intArray0, fieldArray0, methodArray0, (Attribute[]) null, (byte)50);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.JavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      JavaClass javaClass0 = classLoaderRepository0.loadClass("org.apache.bcel.classfile.MethodParameters");
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotNull(javaClass0);
      assertEquals(15, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isNative());
      assertEquals("org.apache.bcel.classfile.Attribute", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isPrivate());
      assertTrue(javaClass0.isClass());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals("org.apache.bcel.classfile.MethodParameters", javaClass0.getClassName());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("org.apache.bcel.classfile.MethodParameters", javaClass0.getFileName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isFinal());
      assertEquals(9, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isPublic());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isProtected());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("MethodParameters.java", javaClass0.getSourceFileName());
      
      JavaClass[] javaClassArray0 = javaClass0.getInterfaces();
      assertEquals(0, javaClassArray0.length);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotNull(javaClassArray0);
      assertEquals(15, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isNative());
      assertEquals("org.apache.bcel.classfile.Attribute", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isPrivate());
      assertTrue(javaClass0.isClass());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals("org.apache.bcel.classfile.MethodParameters", javaClass0.getClassName());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("org.apache.bcel.classfile.MethodParameters", javaClass0.getFileName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isFinal());
      assertEquals(9, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isPublic());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isProtected());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("MethodParameters.java", javaClass0.getSourceFileName());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<InnerClasses> class0 = InnerClasses.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClass0);
      assertEquals(0, javaClass0.getMinor());
      assertEquals(32, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isClass());
      assertEquals("org.apache.bcel.classfile.InnerClasses", javaClass0.getFileName());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isFinal());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("org.apache.bcel.classfile.Attribute", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertEquals("org.apache.bcel.classfile.InnerClasses", javaClass0.getClassName());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isStatic());
      assertEquals("InnerClasses.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isTransient());
      assertEquals(29, javaClass0.getClassNameIndex());
      
      JavaClass[] javaClassArray0 = javaClass0.getSuperClasses();
      assertEquals(2, javaClassArray0.length);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertNotNull(javaClassArray0);
      assertEquals(0, javaClass0.getMinor());
      assertEquals(32, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isClass());
      assertEquals("org.apache.bcel.classfile.InnerClasses", javaClass0.getFileName());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isFinal());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("org.apache.bcel.classfile.Attribute", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertEquals("org.apache.bcel.classfile.InnerClasses", javaClass0.getClassName());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isStatic());
      assertEquals("InnerClasses.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isTransient());
      assertEquals(29, javaClass0.getClassNameIndex());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertNotNull(javaClass0);
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isStatic());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isAbstract());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isPublic());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      
      JavaClass javaClass1 = javaClass0.getSuperClass();
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertNull(javaClass1);
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isStatic());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isAbstract());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isPublic());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      JavaClass javaClass1 = javaClass0.copy();
      javaClass0.isInterface(true);
      javaClass1.setClassName(" \"p>)#");
      boolean boolean0 = javaClass1.implementationOf(javaClass0);
      assertFalse(javaClass1.equals((Object)javaClass0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      JavaClass javaClass0 = classLoaderRepository0.loadClass("org.apache.bcel.Constants");
      boolean boolean0 = javaClass0.isSuper();
      assertEquals(52, javaClass0.getMajor());
      assertEquals("Constants.java", javaClass0.getSourceFileName());
      assertFalse(boolean0);
      assertEquals(1, javaClass0.getClassNameIndex());
      assertEquals(310, javaClass0.getSuperclassNameIndex());
      assertEquals(0, javaClass0.getMinor());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      boolean boolean0 = javaClass0.isSuper();
      assertEquals(0, javaClass0.getMinor());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertTrue(boolean0);
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      JavaClass javaClass1 = javaClass0.getSuperClass();
      AnnotationEntry[] annotationEntryArray0 = javaClass1.getAnnotationEntries();
      assertEquals(52, javaClass1.getMajor());
      assertEquals("AccessFlags.java", javaClass1.getSourceFileName());
      assertEquals(6, javaClass1.getClassNameIndex());
      assertNotNull(annotationEntryArray0);
      assertEquals(0, javaClass1.getMinor());
      assertEquals(7, javaClass1.getSuperclassNameIndex());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("+hKkgyJn", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      javaClass0.dump(dataOutputStream0);
      assertEquals(0, javaClass0.getMinor());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertEquals(52, javaClass0.getMajor());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      MockFile mockFile0 = new MockFile("invokeInterface");
      javaClass0.dump((File) mockFile0);
      assertEquals(9, javaClass0.getClassNameIndex());
      assertEquals(1485L, mockFile0.length());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(15, javaClass0.getSuperclassNameIndex());
      assertEquals(0, javaClass0.getMinor());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      JavaClass javaClass0 = null;
      try {
        javaClass0 = new JavaClass(3559, 1142, "Y9jWI6?zq!}H#G>C&", 69, (-2486), 78, constantPool0, (int[]) null, (Field[]) null, (Method[]) null, (Attribute[]) null, (byte)108);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 3559. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      SourceFile sourceFile0 = new SourceFile((byte)3, (byte)2, 0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        javaClass0.equals(sourceFile0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.SourceFile cannot be cast to org.apache.bcel.classfile.JavaClass
         //
         verifyException("org.apache.bcel.classfile.JavaClass$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      Attribute[] attributeArray0 = javaClass0.getAttributes();
      ConstantPool constantPool0 = javaClass0.getConstantPool();
      Method[] methodArray0 = javaClass0.getMethods();
      int[] intArray0 = new int[0];
      Field[] fieldArray0 = new Field[0];
      JavaClass javaClass1 = null;
      try {
        javaClass1 = new JavaClass(83, (byte)2, "$](oQ`0", (byte)1, (byte)2, 551, constantPool0, intArray0, fieldArray0, methodArray0, attributeArray0, (byte)80);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected class `CONSTANT_Class' at index 83 and got CONSTANT_Methodref[10](class_index = 36, name_and_type_index = 503)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.getClassName();
      assertEquals(0, javaClass0.getMinor());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(94, javaClass0.getSuperclassNameIndex());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.getSuperclassName();
      assertEquals(4, javaClass0.getClassNameIndex());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals(52, javaClass0.getMajor());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.compareTo(javaClass0);
      assertEquals(52, javaClass0.getMajor());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.getInterfaceNames();
      assertEquals(0, javaClass0.getMinor());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassPath classPath0 = new ClassPath("p+(~*|L2'=^y_$");
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance(classPath0);
      javaClass0.setRepository(syntheticRepository0);
      assertEquals(52, javaClass0.getMajor());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals(0, javaClass0.getMinor());
      assertEquals("Object.java", javaClass0.getSourceFileName());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.isInterface(true);
      boolean boolean0 = javaClass0.implementationOf(javaClass0);
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertTrue(boolean0);
      assertEquals(0, javaClass0.getMinor());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(43, javaClass0.getClassNameIndex());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      JavaClass javaClass1 = javaClass0.copy();
      javaClass0.isInterface(true);
      javaClass1.setClassName("org.apache.bcel.classfile.AccessFlags");
      boolean boolean0 = javaClass1.instanceOf(javaClass0);
      assertFalse(javaClass1.equals((Object)javaClass0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      JavaClass javaClass1 = javaClass0.getSuperClass();
      assertNotNull(javaClass1);
      
      boolean boolean0 = javaClass0.instanceOf(javaClass1);
      assertEquals(7, javaClass1.getSuperclassNameIndex());
      assertEquals(52, javaClass1.getMajor());
      assertFalse(javaClass1.equals((Object)javaClass0));
      assertEquals(6, javaClass1.getClassNameIndex());
      assertEquals(0, javaClass1.getMinor());
      assertTrue(boolean0);
      assertEquals("AccessFlags.java", javaClass1.getSourceFileName());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      JavaClass javaClass0 = classLoaderRepository0.loadClass("java.lang.String$1");
      boolean boolean0 = javaClass0.isAnonymous();
      assertEquals(52, javaClass0.getMajor());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertEquals(2, javaClass0.getSuperclassNameIndex());
      assertTrue(boolean0);
      assertEquals(0, javaClass0.getMinor());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      JavaClass javaClass0 = classLoaderRepository0.loadClass("java.lang.Integer$IntegerCache");
      boolean boolean0 = javaClass0.isNested();
      assertEquals(9, javaClass0.getClassNameIndex());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(18, javaClass0.getSuperclassNameIndex());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      JavaClass javaClass0 = classLoaderRepository0.loadClass("org.apache.bcel.Constants");
      javaClass0.isAnonymous();
      boolean boolean0 = javaClass0.isAnonymous();
      assertFalse(boolean0);
      assertEquals(52, javaClass0.getMajor());
      assertEquals("Constants.java", javaClass0.getSourceFileName());
      assertEquals(310, javaClass0.getSuperclassNameIndex());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertEquals(0, javaClass0.getMinor());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      boolean boolean0 = javaClass0.isClass();
      assertTrue(boolean0);
      assertEquals(43, javaClass0.getClassNameIndex());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertEquals("String.java", javaClass0.getSourceFileName());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertTrue(javaClass0.isClass());
      
      javaClass0.isInterface(true);
      boolean boolean0 = javaClass0.isClass();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      JavaClass javaClass1 = javaClass0.copy();
      javaClass1.setClassName("org.apache.bcel.classfile.AccessFlags");
      boolean boolean0 = javaClass1.instanceOf(javaClass0);
      assertFalse(javaClass1.equals((Object)javaClass0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      Method[] methodArray0 = new Method[0];
      javaClass0.setMethods(methodArray0);
      javaClass0.toString();
      assertEquals(0, javaClass0.getMinor());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isSuper());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.toString();
      assertEquals(0, javaClass0.getMinor());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isSuper());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.setModifiers(32);
      javaClass0.toString();
      assertEquals(4, javaClass0.getClassNameIndex());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSuper());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals(0, javaClass0.getMinor());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      // Undeclared exception!
      try { 
        javaClass0.getMethod((java.lang.reflect.Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.JavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      JavaClass javaClass0 = classLoaderRepository0.loadClass("org.apache.bcel.Constants");
      javaClass0.toString();
      // Undeclared exception!
      javaClass0.toString();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/org.apache.bcel.classfile.Node0.tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      File file0 = MockFile.createTempFile("org.apache.bcel.classfile.Node", (String) null);
      try { 
        javaClass0.dump(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("+hKkgyJn", true);
      MockFile mockFile0 = new MockFile("+hKkgyJn", "+hKkgyJn");
      try { 
        javaClass0.dump((File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not create the directory /media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/bcel-6.5.0-src/+hKkgyJn
         //
         verifyException("org.apache.bcel.classfile.JavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      MockFile mockFile0 = new MockFile("@TWpOUa?H.e$+zx(");
      MockFile mockFile1 = new MockFile(mockFile0, "@TWpOUa?H.e$+zx(");
      javaClass0.dump((File) mockFile1);
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals(1497L, mockFile1.length());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JavaClass.Debug("TN_|b]YK1{0?");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      JavaClass javaClass0 = null;
      try {
        javaClass0 = new JavaClass(0, 0, "", (byte)103, (byte)103, (byte)103, constantPool0, (int[]) null, (Field[]) null, (Method[]) null, (Attribute[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      String string0 = javaClass0.getSourceFileName();
      assertEquals(0, javaClass0.getMinor());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("Integer.java", string0);
      assertEquals(94, javaClass0.getSuperclassNameIndex());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      int int0 = javaClass0.getMajor();
      assertEquals(52, int0);
      assertEquals(0, javaClass0.getMinor());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      int int0 = javaClass0.getClassNameIndex();
      assertEquals(0, javaClass0.getMinor());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals(4, int0);
      assertEquals(176, javaClass0.getSuperclassNameIndex());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.getFileName();
      assertEquals(52, javaClass0.getMajor());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(94, javaClass0.getSuperclassNameIndex());
      assertEquals(1, javaClass0.getClassNameIndex());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      boolean boolean0 = javaClass0.isNested();
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(boolean0);
      assertEquals(52, javaClass0.getMajor());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.setAttributes((Attribute[]) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("4uH~[");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      javaClass0.dump(dataOutputStream0);
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertEquals(4, javaClass0.getClassNameIndex());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      JavaClass[] javaClassArray0 = javaClass0.getAllInterfaces();
      assertEquals(2, javaClassArray0.length);
      assertEquals(1, javaClass0.getClassNameIndex());
      assertEquals(94, javaClass0.getSuperclassNameIndex());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertEquals(0, javaClass0.getMinor());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      javaClass0.accept(emptyVisitor0);
      assertEquals(43, javaClass0.getClassNameIndex());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertEquals(52, javaClass0.getMajor());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.bcel.clsfile.AccessFlag");
      javaClass0.dump((OutputStream) mockFileOutputStream0);
      assertEquals(52, javaClass0.getMajor());
      assertEquals(0, javaClass0.getMinor());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      JavaClass javaClass0 = classLoaderRepository0.loadClass("java.lang.String$1");
      javaClass0.setFileName("java.lang.String$1");
      assertEquals(1, javaClass0.getClassNameIndex());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertEquals(2, javaClass0.getSuperclassNameIndex());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.getPackageName();
      assertEquals(1, javaClass0.getClassNameIndex());
      assertEquals(94, javaClass0.getSuperclassNameIndex());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int[] intArray0 = new int[2];
      Field[] fieldArray0 = new Field[0];
      Method[] methodArray0 = new Method[0];
      Attribute[] attributeArray0 = new Attribute[0];
      JavaClass javaClass0 = null;
      try {
        javaClass0 = new JavaClass(3, 3, "scEh37=kU5wm+%", 3, 3, 63, (ConstantPool) null, intArray0, fieldArray0, methodArray0, attributeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.JavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      JavaClass javaClass0 = classLoaderRepository0.loadClass("java.lang.Integer$IntegerCache");
      javaClass0.getRepository();
      assertEquals(9, javaClass0.getClassNameIndex());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertEquals(18, javaClass0.getSuperclassNameIndex());
      assertEquals(0, javaClass0.getMinor());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.setMinor(46);
      javaClass0.copy();
      assertEquals(46, javaClass0.getMinor());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      byte[] byteArray0 = javaClass0.getBytes();
      assertEquals(52, javaClass0.getMajor());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertEquals(19052, byteArray0.length);
      assertEquals(0, javaClass0.getMinor());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      String[] stringArray0 = new String[5];
      javaClass0.setInterfaceNames(stringArray0);
      // Undeclared exception!
      try { 
        javaClass0.getInterfaces();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.ClassLoaderRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      int[] intArray0 = javaClass0.getInterfaceIndices();
      assertEquals(3, intArray0.length);
      assertEquals(4, javaClass0.getClassNameIndex());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(52, javaClass0.getMajor());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.setFields((Field[]) null);
      // Undeclared exception!
      try { 
        javaClass0.getBytes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.JavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.setConstantPool((ConstantPool) null);
      MockFile mockFile0 = new MockFile("invokeInterface");
      // Undeclared exception!
      try { 
        javaClass0.dump((File) mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.JavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      int int0 = javaClass0.getSuperclassNameIndex();
      assertEquals(0, int0);
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals(52, javaClass0.getMajor());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.dump("=Nl^qO?%");
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(94, javaClass0.getSuperclassNameIndex());
      assertEquals(1, javaClass0.getClassNameIndex());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      JavaClass javaClass0 = classLoaderRepository0.loadClass("org.apache.bcel.Constants");
      byte byte0 = javaClass0.getSource();
      assertEquals(1, javaClass0.getClassNameIndex());
      assertEquals(0, javaClass0.getMinor());
      assertEquals((byte)2, byte0);
      assertEquals(310, javaClass0.getSuperclassNameIndex());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("Constants.java", javaClass0.getSourceFileName());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      Method[] methodArray0 = new Method[0];
      javaClass0.setMethods(methodArray0);
      javaClass0.getMethod((java.lang.reflect.Method) null);
      assertEquals(52, javaClass0.getMajor());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertEquals(0, javaClass0.getMinor());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      int int0 = javaClass0.getMinor();
      assertEquals(0, int0);
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertEquals(52, javaClass0.getMajor());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.getFields();
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals(0, javaClass0.getMinor());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      JavaClass.setComparator(bCELComparator0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.hashCode();
      assertEquals(94, javaClass0.getSuperclassNameIndex());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertEquals(0, javaClass0.getMinor());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertEquals(52, javaClass0.getMajor());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      boolean boolean0 = javaClass0.instanceOf(javaClass0);
      assertEquals(4, javaClass0.getClassNameIndex());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(boolean0);
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals(176, javaClass0.getSuperclassNameIndex());
  }
}
