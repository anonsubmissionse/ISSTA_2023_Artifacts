/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:18:46 GMT 2022
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.IINC;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.verifier.structurals.ExecutionVisitor;
import org.apache.bcel.verifier.structurals.InstConstraintVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IINC_ESTest extends IINC_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IINC iINC0 = new IINC(168, (-971));
      iINC0.setIncrement((-128));
      assertEquals((-128), iINC0.getIncrement());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IINC iINC0 = new IINC(127, 127);
      assertEquals(127, iINC0.getIndex());
      assertEquals(3, iINC0.getLength());
      assertEquals(127, iINC0.getIncrement());
      assertEquals((short)132, iINC0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IINC iINC0 = new IINC(255, 255);
      assertEquals(6, iINC0.getLength());
      assertEquals(255, iINC0.getIncrement());
      assertEquals((short)132, iINC0.getOpcode());
      assertEquals(255, iINC0.getIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IINC iINC0 = new IINC(1552, 4297);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      iINC0.dump(dataOutputStream0);
      assertEquals(6, byteArrayOutputStream0.size());
      assertEquals(1552, iINC0.getIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IINC iINC0 = new IINC(2926, 10);
      String string0 = iINC0.toString(true);
      assertEquals((short)132, iINC0.getOpcode());
      assertEquals("iinc[132](6) 2926 10", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IINC iINC0 = new IINC(50, 50);
      int int0 = iINC0.getIncrement();
      assertEquals(50, iINC0.getIndex());
      assertEquals((short)132, iINC0.getOpcode());
      assertEquals(3, iINC0.getLength());
      assertEquals(50, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IINC iINC0 = new IINC(168, (-971));
      int int0 = iINC0.getIncrement();
      assertEquals((-971), int0);
      assertEquals(168, iINC0.getIndex());
      assertEquals(6, iINC0.getLength());
      assertEquals((short)132, iINC0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IINC iINC0 = new IINC();
      // Undeclared exception!
      try { 
        iINC0.initFromFile((ByteSequence) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.IINC", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IINC iINC0 = new IINC();
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        iINC0.initFromFile(byteSequence0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IINC iINC0 = new IINC(363, 2096);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        iINC0.accept(instConstraintVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IINC iINC0 = new IINC();
      iINC0.setIndex(16);
      assertEquals(16, iINC0.getIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IINC iINC0 = new IINC();
      // Undeclared exception!
      try { 
        iINC0.setIndex((-3009));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Negative index value: -3009
         //
         verifyException("org.apache.bcel.generic.IINC", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IINC iINC0 = new IINC();
      byte[] byteArray0 = new byte[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      iINC0.initFromFile(byteSequence0, true);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(6, iINC0.getLength());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IINC iINC0 = new IINC(8, 8);
      byte[] byteArray0 = new byte[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      iINC0.initFromFile(byteSequence0, false);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((short)132, iINC0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IINC iINC0 = new IINC(185, 185);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.close();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      try { 
        iINC0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IINC iINC0 = new IINC(0, 116);
      // Undeclared exception!
      try { 
        iINC0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.IINC", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IINC iINC0 = new IINC();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      iINC0.dump(dataOutputStream0);
      assertEquals(1, iINC0.getLength());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IINC iINC0 = new IINC();
      // Undeclared exception!
      try { 
        iINC0.toString(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IINC iINC0 = new IINC();
      Type type0 = iINC0.getType((ConstantPoolGen) null);
      assertEquals("I", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IINC iINC0 = new IINC();
      int int0 = iINC0.getIncrement();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IINC iINC0 = null;
      try {
        iINC0 = new IINC((-152), (-128));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Negative index value: -152
         //
         verifyException("org.apache.bcel.generic.IINC", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IINC iINC0 = new IINC();
      ExecutionVisitor executionVisitor0 = new ExecutionVisitor();
      iINC0.accept(executionVisitor0);
      assertEquals((-1), iINC0.getIndex());
  }
}
