/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 21:47:52 GMT 2022
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ElementValue;
import org.apache.bcel.classfile.SimpleElementValue;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.ElementValueGen;
import org.apache.bcel.generic.SimpleElementValueGen;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleElementValueGen_ESTest extends SimpleElementValueGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(70, constantPoolGen0, (byte)83);
      // Undeclared exception!
      try { 
        simpleElementValueGen0.stringifyValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantInteger cannot be cast to org.apache.bcel.classfile.ConstantFloat
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(0, constantPoolGen0, (-1.0));
      // Undeclared exception!
      try { 
        simpleElementValueGen0.getValueInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Dont call getValueString() on a non STRING ElementValue
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(251, constantPoolGen0, "/StN`IA4v[gYcEm4?");
      // Undeclared exception!
      try { 
        simpleElementValueGen0.getValueString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Dont call getValueString() on a non STRING ElementValue
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(115, 'I', constantPoolGen0);
      // Undeclared exception!
      try { 
        simpleElementValueGen0.stringifyValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(68, (byte)73, constantPoolGen0);
      // Undeclared exception!
      try { 
        simpleElementValueGen0.stringifyValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(74, 83, constantPoolGen0);
      // Undeclared exception!
      try { 
        simpleElementValueGen0.stringifyValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(83, constantPoolGen0, 83);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      ElementValueGen elementValueGen0 = ElementValueGen.copy(elementValue0, constantPoolGen0, true);
      assertEquals(99, ElementValueGen.CLASS);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(67, constantPoolGen0, 67);
      SimpleElementValue simpleElementValue0 = (SimpleElementValue)simpleElementValueGen0.getElementValue();
      SimpleElementValueGen simpleElementValueGen1 = new SimpleElementValueGen(simpleElementValue0, constantPoolGen0, true);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(66, constantPoolGen0, 66);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      ElementValueGen elementValueGen0 = ElementValueGen.copy(elementValue0, constantPoolGen0, true);
      assertEquals(99, ElementValueGen.CLASS);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(73, constantPoolGen0, (int) (short) (-2032));
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      ElementValueGen elementValueGen0 = ElementValueGen.copy(elementValue0, constantPoolGen0, true);
      assertEquals(115, ElementValueGen.STRING);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(73, constantPoolGen0, false);
      int int0 = simpleElementValueGen0.getValueInt();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(73, constantPoolGen0, 4033);
      int int0 = simpleElementValueGen0.getValueInt();
      assertEquals(4033, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(4787, 0, constantPoolGen0);
      int int0 = simpleElementValueGen0.getIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(74, (-3964), constantPoolGen0);
      int int0 = simpleElementValueGen0.getIndex();
      assertEquals((-3964), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(73, 3886, constantPoolGen0);
      // Undeclared exception!
      try { 
        simpleElementValueGen0.stringifyValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3886
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(115, 115, constantPoolGen0);
      // Undeclared exception!
      try { 
        simpleElementValueGen0.getValueString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(115, constantPoolGen0, 0.0);
      // Undeclared exception!
      try { 
        simpleElementValueGen0.getValueString();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantDouble cannot be cast to org.apache.bcel.classfile.ConstantUtf8
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen('I', 'I', constantPoolGen0);
      // Undeclared exception!
      try { 
        simpleElementValueGen0.getValueInt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(73, constantPoolGen0, 0L);
      // Undeclared exception!
      try { 
        simpleElementValueGen0.getValueInt();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantLong cannot be cast to org.apache.bcel.classfile.ConstantInteger
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen((-1), 451, (ConstantPoolGen) null);
      // Undeclared exception!
      try { 
        simpleElementValueGen0.getElementValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(0, constantPoolGen0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        simpleElementValueGen0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen((-901), (-75), constantPoolGen0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        simpleElementValueGen0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleElementValueGen simpleElementValueGen0 = null;
      try {
        simpleElementValueGen0 = new SimpleElementValueGen(115, (ConstantPoolGen) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleElementValueGen simpleElementValueGen0 = null;
      try {
        simpleElementValueGen0 = new SimpleElementValueGen((-997), (ConstantPoolGen) null, (short)97);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleElementValueGen simpleElementValueGen0 = null;
      try {
        simpleElementValueGen0 = new SimpleElementValueGen((-280), (ConstantPoolGen) null, " is null.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = null;
      try {
        simpleElementValueGen0 = new SimpleElementValueGen(0, constantPoolGen0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value must not be null.
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleElementValueGen simpleElementValueGen0 = null;
      try {
        simpleElementValueGen0 = new SimpleElementValueGen((-1676), (ConstantPoolGen) null, (-2861L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleElementValueGen simpleElementValueGen0 = null;
      try {
        simpleElementValueGen0 = new SimpleElementValueGen(0, (ConstantPoolGen) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleElementValueGen simpleElementValueGen0 = null;
      try {
        simpleElementValueGen0 = new SimpleElementValueGen(856, (ConstantPoolGen) null, (float) 856);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleElementValueGen simpleElementValueGen0 = null;
      try {
        simpleElementValueGen0 = new SimpleElementValueGen(2055, (ConstantPoolGen) null, 288.7209485011);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleElementValueGen simpleElementValueGen0 = null;
      try {
        simpleElementValueGen0 = new SimpleElementValueGen(115, (ConstantPoolGen) null, 'c');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleElementValueGen simpleElementValueGen0 = null;
      try {
        simpleElementValueGen0 = new SimpleElementValueGen((-2638), (ConstantPoolGen) null, (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(90, constantPoolGen0, 90);
      SimpleElementValue simpleElementValue0 = (SimpleElementValue)simpleElementValueGen0.getElementValue();
      SimpleElementValueGen simpleElementValueGen1 = new SimpleElementValueGen(simpleElementValue0, constantPoolGen0, true);
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(68, 68, constantPool0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = null;
      try {
        simpleElementValueGen0 = new SimpleElementValueGen(simpleElementValue0, constantPoolGen0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 68. Constant pool size is: 9
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" vs. ", true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(2, 2, constantPoolGen0);
      // Undeclared exception!
      try { 
        simpleElementValueGen0.dump(dataOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // SimpleElementValueGen doesnt know how to write out type 2
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen((int) (byte)90, constantPoolGen0, (byte)68);
      MockFile mockFile0 = new MockFile("{owzrSg\"HZ(@~,#>", "NestMembers(");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      simpleElementValueGen0.dump(dataOutputStream0);
      assertEquals(67, ElementValueGen.PRIMITIVE_CHAR);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(83, constantPoolGen0, 83);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jlVv[^Fs\"\"up{hO");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      simpleElementValueGen0.dump(dataOutputStream0);
      assertEquals(91, ElementValueGen.ARRAY);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(74, (-3980), constantPoolGen0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(115);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      simpleElementValueGen0.dump(dataOutputStream0);
      assertEquals((-3980), simpleElementValueGen0.getIndex());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(68, constantPoolGen0, 'I');
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      simpleElementValueGen0.dump(dataOutputStream0);
      assertEquals(68, ElementValueGen.PRIMITIVE_DOUBLE);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(67, constantPoolGen0, true);
      MockFile mockFile0 = new MockFile("1");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      simpleElementValueGen0.dump(dataOutputStream0);
      assertEquals(67, simpleElementValueGen0.getElementValueType());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(73, constantPoolGen0, (int) (short) (-2032));
      MockFile mockFile0 = new MockFile("-2032", " 78gD|YCIOep]Ik?n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 2446);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      simpleElementValueGen0.dump(dataOutputStream0);
      assertEquals(68, ElementValueGen.PRIMITIVE_DOUBLE);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(66, constantPoolGen0, (short) (byte)91);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("3+yxX=2ZYK|dOS", true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      simpleElementValueGen0.dump(dataOutputStream0);
      assertEquals(101, ElementValueGen.ENUM_CONSTANT);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(83, constantPoolGen0, 83);
      String string0 = simpleElementValueGen0.stringifyValue();
      assertEquals("83", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(74, constantPoolGen0, true);
      // Undeclared exception!
      try { 
        simpleElementValueGen0.stringifyValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantInteger cannot be cast to org.apache.bcel.classfile.ConstantLong
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(73, constantPoolGen0, (int) (short) (-2032));
      String string0 = simpleElementValueGen0.stringifyValue();
      assertEquals("-2032", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(70, 70, constantPool0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(simpleElementValue0, constantPoolGen0, false);
      // Undeclared exception!
      try { 
        simpleElementValueGen0.stringifyValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(68, constantPoolGen0, 'I');
      // Undeclared exception!
      try { 
        simpleElementValueGen0.stringifyValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantInteger cannot be cast to org.apache.bcel.classfile.ConstantDouble
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(90, constantPoolGen0, 90);
      String string0 = simpleElementValueGen0.stringifyValue();
      assertEquals("true", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(66, constantPoolGen0, (short) (byte)91);
      String string0 = simpleElementValueGen0.stringifyValue();
      assertEquals("91", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(83, constantPoolGen0, 83);
      // Undeclared exception!
      try { 
        simpleElementValueGen0.getValueInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Dont call getValueString() on a non STRING ElementValue
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(73, constantPoolGen0, (int) (short) (-2032));
      int int0 = simpleElementValueGen0.getValueInt();
      assertEquals((-2032), int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(90, constantPoolGen0, 90);
      // Undeclared exception!
      try { 
        simpleElementValueGen0.getValueString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Dont call getValueString() on a non STRING ElementValue
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(115, constantPoolGen0, "'lN<D>:i_K");
      String string0 = simpleElementValueGen0.getValueString();
      assertEquals("'lN<D>:i_K", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(136, 136, (ConstantPool) null);
      SimpleElementValueGen simpleElementValueGen0 = null;
      try {
        simpleElementValueGen0 = new SimpleElementValueGen(simpleElementValue0, constantPoolGen0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SimpleElementValueGen class does not know how to copy this type 136
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(115, 115, (ConstantPool) null);
      SimpleElementValueGen simpleElementValueGen0 = null;
      try {
        simpleElementValueGen0 = new SimpleElementValueGen(simpleElementValue0, constantPoolGen0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValue simpleElementValue0 = new SimpleElementValue((byte)83, (byte)83, (ConstantPool) null);
      SimpleElementValueGen simpleElementValueGen0 = null;
      try {
        simpleElementValueGen0 = new SimpleElementValueGen(simpleElementValue0, constantPoolGen0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(74, (-3980), constantPoolGen0);
      SimpleElementValue simpleElementValue0 = (SimpleElementValue)simpleElementValueGen0.getElementValue();
      SimpleElementValueGen simpleElementValueGen1 = null;
      try {
        simpleElementValueGen1 = new SimpleElementValueGen(simpleElementValue0, constantPoolGen0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -3980. Constant pool size is: 256
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(73, 73, constantPool0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      SimpleElementValueGen simpleElementValueGen0 = null;
      try {
        simpleElementValueGen0 = new SimpleElementValueGen(simpleElementValue0, constantPoolGen0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 73. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(70, constantPoolGen0, 70);
      SimpleElementValue simpleElementValue0 = (SimpleElementValue)simpleElementValueGen0.getElementValue();
      SimpleElementValueGen simpleElementValueGen1 = null;
      try {
        simpleElementValueGen1 = new SimpleElementValueGen(simpleElementValue0, constantPoolGen0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantInteger cannot be cast to org.apache.bcel.classfile.ConstantFloat
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Constant[] constantArray0 = new Constant[14];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(66, 66, constantPool0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = null;
      try {
        simpleElementValueGen0 = new SimpleElementValueGen(simpleElementValue0, constantPoolGen0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 66. Constant pool size is: 14
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(115, (-1822), (ConstantPool) null);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(simpleElementValue0, constantPoolGen0, false);
      // Undeclared exception!
      try { 
        simpleElementValueGen0.getValueString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1822
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(67, constantPoolGen0, true);
      String string0 = simpleElementValueGen0.stringifyValue();
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(119, constantPoolGen0, false);
      // Undeclared exception!
      try { 
        simpleElementValueGen0.stringifyValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // SimpleElementValueGen class does not know how to stringify type 119
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen((int) (byte)115, constantPoolGen0, (byte)99);
      MockFile mockFile0 = new MockFile("{owzrSg\"HZ(@~,#>", "NestMembers(");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      simpleElementValueGen0.dump(dataOutputStream0);
      assertEquals(67, ElementValueGen.PRIMITIVE_CHAR);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen((-2382), constantPoolGen0, (short) (-2032));
      SimpleElementValue simpleElementValue0 = (SimpleElementValue)simpleElementValueGen0.getElementValue();
      assertEquals(1, simpleElementValue0.getIndex());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(70, constantPoolGen0, (double) 70);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("=Fc>_1f7x\\hs", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      simpleElementValueGen0.dump(dataOutputStream0);
      assertEquals(70, ElementValueGen.PRIMITIVE_FLOAT);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen((-877), constantPoolGen0, (float) (-877));
      assertEquals(91, ElementValueGen.ARRAY);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(90, constantPoolGen0, 90);
      int int0 = simpleElementValueGen0.getIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(0, constantPoolGen0, (int) (short) (-2032));
      SimpleElementValue simpleElementValue0 = (SimpleElementValue)simpleElementValueGen0.getElementValue();
      assertEquals(1, simpleElementValue0.getIndex());
  }
}
