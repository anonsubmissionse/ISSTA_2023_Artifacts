/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 21:09:31 GMT 2022
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.generic.AALOAD;
import org.apache.bcel.generic.ACONST_NULL;
import org.apache.bcel.generic.ALOAD;
import org.apache.bcel.generic.ARETURN;
import org.apache.bcel.generic.ArithmeticInstruction;
import org.apache.bcel.generic.ArrayInstruction;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.BranchHandle;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CHECKCAST;
import org.apache.bcel.generic.ClassGen;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.DCMPG;
import org.apache.bcel.generic.DCMPL;
import org.apache.bcel.generic.DCONST;
import org.apache.bcel.generic.DUP;
import org.apache.bcel.generic.FCMPG;
import org.apache.bcel.generic.FCMPL;
import org.apache.bcel.generic.FieldInstruction;
import org.apache.bcel.generic.GETSTATIC;
import org.apache.bcel.generic.IFLT;
import org.apache.bcel.generic.IFNE;
import org.apache.bcel.generic.IINC;
import org.apache.bcel.generic.INSTANCEOF;
import org.apache.bcel.generic.INVOKEVIRTUAL;
import org.apache.bcel.generic.IfInstruction;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionFactory;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.InvokeInstruction;
import org.apache.bcel.generic.LCMP;
import org.apache.bcel.generic.LCONST;
import org.apache.bcel.generic.LDC;
import org.apache.bcel.generic.LREM;
import org.apache.bcel.generic.LRETURN;
import org.apache.bcel.generic.LocalVariableInstruction;
import org.apache.bcel.generic.MULTIANEWARRAY;
import org.apache.bcel.generic.NEW;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.RET;
import org.apache.bcel.generic.ReferenceType;
import org.apache.bcel.generic.ReturnInstruction;
import org.apache.bcel.generic.ReturnaddressType;
import org.apache.bcel.generic.SIPUSH;
import org.apache.bcel.generic.StackInstruction;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.ClassLoaderRepository;
import org.apache.bcel.verifier.structurals.LocalVariables;
import org.apache.bcel.verifier.structurals.UninitializedObjectType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InstructionFactory_ESTest extends InstructionFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<IFNE> class0 = IFNE.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      instructionFactory0.setConstantPool(constantPoolGen0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("lxj&Bw", "D", "D", (-1117), (String[]) null, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0, constantPoolGen0);
      instructionFactory0.setClassGen((ClassGen) null);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      IINC iINC0 = new IINC();
      Type type0 = iINC0.getType(constantPoolGen0);
      instructionFactory0.createPutStatic("ifrnlF*D`Aoucgf5*D>", "println", type0);
      assertEquals(7, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BasicType basicType0 = Type.BOOLEAN;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      BasicType basicType1 = Type.LONG;
      // Undeclared exception!
      try { 
        instructionFactory0.createCast(basicType0, basicType1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      BasicType basicType0 = Type.VOID;
      // Undeclared exception!
      try { 
        instructionFactory0.createCast(basicType0, basicType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StackInstruction stackInstruction0 = InstructionFactory.createDup_1((-1539));
      assertEquals(1, stackInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StackInstruction stackInstruction0 = InstructionFactory.createDup_2(12);
      assertEquals(1, stackInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StackInstruction stackInstruction0 = InstructionFactory.createDup((-899));
      assertEquals("dup", stackInstruction0.getName());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StackInstruction stackInstruction0 = InstructionFactory.createPop(193);
      assertEquals("pop", stackInstruction0.getName());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BasicType basicType0 = Type.INT;
      String[] stringArray0 = new String[0];
      ClassGen classGen0 = new ClassGen("WSX=ZD7J%S ^mcHxP>", "", (String) null, (-1001), stringArray0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      // Undeclared exception!
      try { 
        instructionFactory0.createInvoke("1m=?0", "WSX=ZD7J%S ^mcHxP>", (Type) basicType0, basicType0.NO_ARGS, (short)1595);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown invoke kind: 1595
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ClassGen classGen0 = new ClassGen("y", "y", "java.lang.String", (-388), stringArray0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0, (ConstantPoolGen) null);
      ConstantPoolGen constantPoolGen0 = instructionFactory0.getConstantPool();
      assertNull(constantPoolGen0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      ClassGen classGen0 = instructionFactory0.getClassGen();
      assertNull(classGen0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ClassGen classGen0 = new ClassGen("' of size '", "Z", "", 199, stringArray0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      ClassGen classGen1 = instructionFactory0.getClassGen();
      assertFalse(classGen1.isAbstract());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ClassGen classGen0 = new ClassGen("O9V=Yy\"5R;Zv;", "O9V=Yy\"5R;Zv;", "jZ<q|N", (-995), stringArray0);
      classGen0.setMajor((-995));
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0, constantPoolGen0);
      ClassGen classGen1 = instructionFactory0.getClassGen();
      assertEquals(4, classGen1.getSuperclassNameIndex());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = new String[4];
      ClassGen classGen0 = new ClassGen("aastore", "aastore", "i2b", 0, stringArray0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      ClassGen classGen1 = instructionFactory0.getClassGen();
      assertEquals(3, classGen1.getMinor());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<LRETURN> class0 = LRETURN.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      ClassGen classGen1 = instructionFactory0.getClassGen();
      assertFalse(classGen1.isFinal());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BasicType basicType0 = Type.FLOAT;
      LocalVariableInstruction localVariableInstruction0 = InstructionFactory.createStore(basicType0, 0);
      assertEquals((short)67, localVariableInstruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ObjectType objectType0 = Type.OBJECT;
      LocalVariableInstruction localVariableInstruction0 = InstructionFactory.createLoad(objectType0, 0);
      assertEquals(0, localVariableInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ClassGen classGen0 = new ClassGen("2F<N?!t>m75,z", "2F<N?!t>m75,z", "2F<N?!t>m75,z", 0, (String[]) null);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      BasicType basicType0 = Type.BOOLEAN;
      GETSTATIC gETSTATIC0 = instructionFactory0.createGetStatic("", "rEXO.!/%/z-z", basicType0);
      assertEquals(9, gETSTATIC0.getIndex());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Type[] typeArray0 = new Type[7];
      // Undeclared exception!
      try { 
        InstructionFactory.createStore(typeArray0[1], (short)175);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createReturn((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BasicType basicType0 = Type.FLOAT;
      InstructionFactory instructionFactory0 = new InstructionFactory((ConstantPoolGen) null);
      // Undeclared exception!
      try { 
        instructionFactory0.createPutStatic("Z", "Z", basicType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      LCMP lCMP0 = (LCMP)InstructionConstants.LCMP;
      Type type0 = lCMP0.getType(constantPoolGen0);
      // Undeclared exception!
      try { 
        instructionFactory0.createPutField((String) null, (String) null, type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("  flPGs:   ", "  flPGs:   ", "  flPGs:   ", (-1117), (String[]) null, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0, constantPoolGen0);
      // Undeclared exception!
      try { 
        instructionFactory0.createPutField("  flPGs:   ", (String) null, objectType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value must not be null.
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      InstructionFactory instructionFactory0 = new InstructionFactory((ClassGen) null, (ConstantPoolGen) null);
      // Undeclared exception!
      try { 
        instructionFactory0.createPrintln("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createNull((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("out", "out", "l1Tog=~U", 62, (String[]) null, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0, constantPoolGen0);
      AALOAD aALOAD0 = new AALOAD();
      Type type0 = aALOAD0.getType(constantPoolGen0);
      // Undeclared exception!
      try { 
        instructionFactory0.createNewArray(type0, (short)431);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid number of dimensions: 431
         //
         verifyException("org.apache.bcel.generic.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      JavaClass javaClass0 = classLoaderRepository0.loadClass("org.apache.bcel.generic.SimpleElementValueGen");
      ClassGen classGen0 = new ClassGen(javaClass0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0, (ConstantPoolGen) null);
      ObjectType objectType0 = Type.CLASS;
      // Undeclared exception!
      try { 
        instructionFactory0.createNew(objectType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      // Undeclared exception!
      try { 
        instructionFactory0.createNew((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ObjectType", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createLoad((Type) null, 354);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BasicType basicType0 = Type.CHAR;
      InstructionFactory instructionFactory0 = new InstructionFactory((ConstantPoolGen) null);
      // Undeclared exception!
      try { 
        instructionFactory0.createInstanceOf(basicType0.OBJECT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory((ClassGen) null, constantPoolGen0);
      // Undeclared exception!
      try { 
        instructionFactory0.createGetStatic("", "", (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      // Undeclared exception!
      try { 
        instructionFactory0.createGetField("Plt*;P", "Plt*;P", (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      // Undeclared exception!
      try { 
        instructionFactory0.createFieldAccess("<illegal type>", "<illegal type>", (Type) null, (short)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("java.lang.Object", "java.lang.String", "7I", 0, stringArray0, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0, constantPoolGen0);
      // Undeclared exception!
      try { 
        instructionFactory0.createConstant((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      // Undeclared exception!
      try { 
        instructionFactory0.createCheckCast((ReferenceType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      ObjectType objectType0 = Type.STRINGBUFFER;
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      // Undeclared exception!
      try { 
        instructionFactory0.createCheckCast(uninitializedObjectType0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.verifier.structurals.UninitializedObjectType cannot be cast to org.apache.bcel.generic.ObjectType
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ClassGen classGen0 = new ClassGen("/EM]", "/EM]", "/EM]", (short)135, (String[]) null);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0, (ConstantPoolGen) null);
      ObjectType objectType0 = ObjectType.getInstance("O9V=YOVy\"5R;Zv;");
      // Undeclared exception!
      try { 
        instructionFactory0.createCast(objectType0, objectType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      Type type0 = aCONST_NULL0.getType(constantPoolGen0);
      // Undeclared exception!
      try { 
        instructionFactory0.createCast(type0, type0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.generic.Type$1 cannot be cast to org.apache.bcel.generic.ObjectType
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BasicType basicType0 = Type.BOOLEAN;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      // Undeclared exception!
      try { 
        instructionFactory0.createCast(basicType0, basicType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ALOAD aLOAD0 = (ALOAD)InstructionConstants.ALOAD_0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aLOAD0.getType(constantPoolGen0);
      // Undeclared exception!
      try { 
        InstructionFactory.createBinaryOperation("", type0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createBinaryOperation("t", (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createArrayStore((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createArrayLoad((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ClassGen classGen0 = new ClassGen("/EM]", "/EM]", "/EM]", (short)135, (String[]) null);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0, (ConstantPoolGen) null);
      LCMP lCMP0 = (LCMP)InstructionConstants.LCMP;
      Type type0 = lCMP0.getType((ConstantPoolGen) null);
      // Undeclared exception!
      try { 
        instructionFactory0.createAppend(type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      InstructionFactory instructionFactory0 = null;
      try {
        instructionFactory0 = new InstructionFactory((ClassGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BasicType basicType0 = Type.BYTE;
      InstructionFactory instructionFactory0 = new InstructionFactory((ConstantPoolGen) null);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) basicType0;
      // Undeclared exception!
      try { 
        instructionFactory0.createInvoke("O9V=Yy\"5R;ZvHe;", "O9V=Yy\"5R;ZvHe;", (Type) basicType0, typeArray0, (short)184, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("org.apache.bcel.generic.ICONST", "org.apache.bcel.generic.ICONST", "org.apache.bcel.generic.ICONST", (-461), stringArray0, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      SIPUSH sIPUSH0 = new SIPUSH();
      Type type0 = sIPUSH0.getType(constantPoolGen0);
      instructionFactory0.createInvoke("jZ<q|N", "jZ<q|N", type0, type0.NO_ARGS, (short)182, false);
      assertEquals(10, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[9];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("oaQIzw5", "oaQIzw5", "oaQIzw5", 10, stringArray0, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      RET rET0 = new RET();
      Type type0 = rET0.getType(constantPoolGen0);
      instructionFactory0.createInvoke("xp&-%{OU1d:xP5nA(0@", "CkG8=aq@S}`)", type0, type0.NO_ARGS, (short)183, false);
      assertEquals(10, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DCMPL dCMPL0 = new DCMPL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = dCMPL0.getType(constantPoolGen0);
      ClassGen classGen0 = new ClassGen(".!zHKNPba@(nd", ".!zHKNPba@(nd", ".!zHKNPba@(nd", 9, (String[]) null, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0, constantPoolGen0);
      NEW nEW0 = instructionFactory0.createNew(type0.THROWABLE);
      assertEquals(6, nEW0.getIndex());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DUP dUP0 = new DUP();
      InstructionHandle instructionHandle0 = new InstructionHandle(dUP0);
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)320, instructionHandle0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid opcode: 320
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BranchInstruction branchInstruction0 = InstructionFactory.createBranchInstruction((short)201, (InstructionHandle) null);
      assertEquals("jsr_w", branchInstruction0.getName());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BranchInstruction branchInstruction0 = InstructionFactory.createBranchInstruction((short)200, (InstructionHandle) null);
      assertEquals(0, branchInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BranchInstruction branchInstruction0 = InstructionFactory.createBranchInstruction((short)199, (InstructionHandle) null);
      assertEquals(0, branchInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BranchInstruction branchInstruction0 = InstructionFactory.createBranchInstruction((short)198, (InstructionHandle) null);
      assertEquals((short)198, branchInstruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)197, (InstructionHandle) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid opcode: 197
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ClassGen classGen0 = new ClassGen("O9V=Yy\"5R;Zv;", "O9V=Yy\"5R;Zv;", "O9V=Yy\"5R;Zv;", (-1032), stringArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0, constantPoolGen0);
      InstructionList instructionList0 = instructionFactory0.createPrintln("O9V=Yy\"5R;Zv;");
      IFLT iFLT0 = new IFLT();
      IfInstruction ifInstruction0 = iFLT0.negate();
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)196, branchHandle0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid opcode: 196
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)195, (InstructionHandle) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid opcode: 195
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)194, (InstructionHandle) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid opcode: 194
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)193, (InstructionHandle) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid opcode: 193
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)192, (InstructionHandle) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid opcode: 192
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)190, (InstructionHandle) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid opcode: 190
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)189, (InstructionHandle) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid opcode: 189
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)188, (InstructionHandle) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid opcode: 188
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)187, (InstructionHandle) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid opcode: 187
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)186, (InstructionHandle) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid opcode: 186
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)185, (InstructionHandle) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid opcode: 185
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)184, (InstructionHandle) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid opcode: 184
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)183, (InstructionHandle) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid opcode: 183
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)182, (InstructionHandle) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid opcode: 182
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)180, (InstructionHandle) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid opcode: 180
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)179, (InstructionHandle) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid opcode: 179
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)178, (InstructionHandle) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid opcode: 178
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)177, (InstructionHandle) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid opcode: 177
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)176, (InstructionHandle) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid opcode: 176
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)175, (InstructionHandle) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid opcode: 175
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)174, (InstructionHandle) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid opcode: 174
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)173, (InstructionHandle) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid opcode: 173
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)172, (InstructionHandle) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid opcode: 172
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)171, (InstructionHandle) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid opcode: 171
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)170, (InstructionHandle) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid opcode: 170
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)169, (InstructionHandle) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid opcode: 169
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BranchInstruction branchInstruction0 = InstructionFactory.createBranchInstruction((short)168, (InstructionHandle) null);
      assertEquals("jsr", branchInstruction0.getName());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BranchInstruction branchInstruction0 = InstructionFactory.createBranchInstruction((short)167, (InstructionHandle) null);
      assertEquals(3, branchInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BranchInstruction branchInstruction0 = InstructionFactory.createBranchInstruction((short)166, (InstructionHandle) null);
      assertEquals(0, branchInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BranchInstruction branchInstruction0 = InstructionFactory.createBranchInstruction((short)165, (InstructionHandle) null);
      assertEquals(3, branchInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BranchInstruction branchInstruction0 = InstructionFactory.createBranchInstruction((short)164, (InstructionHandle) null);
      assertEquals((short)164, branchInstruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BranchInstruction branchInstruction0 = InstructionFactory.createBranchInstruction((short)163, (InstructionHandle) null);
      assertEquals("if_icmpgt", branchInstruction0.getName());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BranchInstruction branchInstruction0 = InstructionFactory.createBranchInstruction((short)162, (InstructionHandle) null);
      assertEquals(0, branchInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BranchInstruction branchInstruction0 = InstructionFactory.createBranchInstruction((short)161, (InstructionHandle) null);
      assertEquals((short)161, branchInstruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BranchInstruction branchInstruction0 = InstructionFactory.createBranchInstruction((short)160, (InstructionHandle) null);
      assertEquals(3, branchInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BranchInstruction branchInstruction0 = InstructionFactory.createBranchInstruction((short)159, (InstructionHandle) null);
      assertEquals(3, branchInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      AALOAD aALOAD0 = new AALOAD();
      InstructionHandle instructionHandle0 = new InstructionHandle(aALOAD0);
      BranchInstruction branchInstruction0 = InstructionFactory.createBranchInstruction((short)158, instructionHandle0);
      assertEquals(3, branchInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BranchInstruction branchInstruction0 = InstructionFactory.createBranchInstruction((short)157, (InstructionHandle) null);
      assertEquals(0, branchInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BranchInstruction branchInstruction0 = InstructionFactory.createBranchInstruction((short)156, (InstructionHandle) null);
      assertEquals(3, branchInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BranchInstruction branchInstruction0 = InstructionFactory.createBranchInstruction((short)155, (InstructionHandle) null);
      assertEquals("iflt", branchInstruction0.getName());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BranchInstruction branchInstruction0 = InstructionFactory.createBranchInstruction((short)154, (InstructionHandle) null);
      assertEquals((short)154, branchInstruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BranchInstruction branchInstruction0 = InstructionFactory.createBranchInstruction((short)153, (InstructionHandle) null);
      assertEquals("ifeq", branchInstruction0.getName());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ArrayType arrayType0 = new ArrayType("O9V=Yy\"5R;Zv;", (byte)2);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(arrayType0.OBJECT);
      // Undeclared exception!
      try { 
        InstructionFactory.createNull(uninitializedObjectType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid type: <UNINITIALIZED OBJECT OF TYPE 'java.lang.Object'>
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      Instruction instruction0 = InstructionFactory.createNull(objectType0);
      assertEquals(1, instruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ArrayType arrayType0 = new ArrayType("java.lang.Throwable", 11);
      Instruction instruction0 = InstructionFactory.createNull(arrayType0);
      assertEquals(1, instruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BasicType basicType0 = Type.VOID;
      Instruction instruction0 = InstructionFactory.createNull(basicType0);
      assertEquals((short)0, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BasicType basicType0 = Type.LONG;
      Instruction instruction0 = InstructionFactory.createNull(basicType0);
      assertEquals((short)9, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BasicType basicType0 = Type.INT;
      Instruction instruction0 = InstructionFactory.createNull(basicType0);
      assertEquals((short)3, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BasicType basicType0 = Type.SHORT;
      Instruction instruction0 = InstructionFactory.createNull(basicType0);
      assertEquals((short)3, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BasicType basicType0 = Type.DOUBLE;
      Instruction instruction0 = InstructionFactory.createNull(basicType0);
      assertEquals((short)14, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BasicType basicType0 = Type.FLOAT;
      Instruction instruction0 = InstructionFactory.createNull(basicType0);
      assertEquals((short)11, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BasicType basicType0 = Type.CHAR;
      Instruction instruction0 = InstructionFactory.createNull(basicType0);
      assertEquals((short)3, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BasicType basicType0 = Type.BYTE;
      Instruction instruction0 = InstructionFactory.createNull(basicType0);
      assertEquals(1, instruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BasicType basicType0 = Type.BOOLEAN;
      Instruction instruction0 = InstructionFactory.createNull(basicType0);
      assertEquals("iconst_0", instruction0.getName());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BasicType basicType0 = Type.FLOAT;
      InstructionFactory instructionFactory0 = new InstructionFactory((ConstantPoolGen) null);
      // Undeclared exception!
      try { 
        instructionFactory0.createNewArray(basicType0, (byte)2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ClassGen classGen0 = new ClassGen("O9V=Yy\"5R;Zv;", "O9V=Yy\"5R;Zv;", "O9V=Yy\"5R;Zv;", (-995), stringArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0, constantPoolGen0);
      BasicType basicType0 = Type.BYTE;
      instructionFactory0.createNewArray(basicType0, (byte)1);
      assertEquals(1, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<LREM> class0 = LREM.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      ObjectType objectType0 = Type.OBJECT;
      Instruction instruction0 = instructionFactory0.createNewArray(objectType0, (byte)1);
      assertEquals("anewarray", instruction0.getName());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      ArrayType arrayType0 = new ArrayType("java.lang.Throwable", 11);
      instructionFactory0.createNewArray(arrayType0, (short)1);
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      ArrayType arrayType0 = new ArrayType("java.lang.Throwable", 11);
      MULTIANEWARRAY mULTIANEWARRAY0 = (MULTIANEWARRAY)instructionFactory0.createNewArray(arrayType0, (short)948);
      assertEquals((short)948, mULTIANEWARRAY0.getDimensions());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[4];
      ClassGen classGen0 = new ClassGen("O9V=YOVy\"5R;Zv;", "O9V=YOVy\"5R;Zv;", "O9V=YOVy\"5R;Zv;", (short)154, stringArray0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      IINC iINC0 = new IINC();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = iINC0.getType(constantPoolGen0);
      ArrayType arrayType0 = new ArrayType(type0, (short)154);
      INSTANCEOF iNSTANCEOF0 = instructionFactory0.createInstanceOf(arrayType0);
      assertEquals(5, iNSTANCEOF0.getIndex());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      ArrayType arrayType0 = new ArrayType("java.lang.Throwable", 11);
      CHECKCAST cHECKCAST0 = instructionFactory0.createCheckCast(arrayType0);
      assertEquals(3, cHECKCAST0.getLength());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ClassGen classGen0 = new ClassGen("O9V=Yy\"5R;Zv;", "O9V=Yy\"5R;Zv;", "O9V=Yy\"5R;Zv;", (-995), stringArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0, constantPoolGen0);
      ArrayType arrayType0 = new ArrayType("O9V=Yy\"5R;Zv;", (byte)2);
      Instruction instruction0 = instructionFactory0.createCast(arrayType0, arrayType0);
      assertEquals("checkcast", instruction0.getName());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      InstructionFactory instructionFactory0 = new InstructionFactory((ClassGen) null, constantPoolGen0);
      ObjectType objectType0 = Type.CLASS;
      // Undeclared exception!
      try { 
        instructionFactory0.createCast(objectType0, (Type) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot cast java.lang.Class to null
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      BasicType basicType0 = Type.SHORT;
      LCONST lCONST0 = new LCONST();
      Type type0 = lCONST0.getType(constantPoolGen0);
      Instruction instruction0 = instructionFactory0.createCast(basicType0, type0);
      assertEquals("i2l", instruction0.getName());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      BasicType basicType0 = Type.LONG;
      // Undeclared exception!
      try { 
        instructionFactory0.createCast(basicType0, basicType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find instruction: org.apache.bcel.generic.L2L
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BasicType basicType0 = Type.CHAR;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      BasicType basicType1 = Type.LONG;
      Instruction instruction0 = instructionFactory0.createCast(basicType0, basicType1);
      assertEquals("i2l", instruction0.getName());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BasicType basicType0 = Type.BYTE;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      BasicType basicType1 = Type.LONG;
      Instruction instruction0 = instructionFactory0.createCast(basicType0, basicType1);
      assertEquals((short)133, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DCMPL dCMPL0 = (DCMPL)InstructionConstants.DCMPL;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = dCMPL0.getType(constantPoolGen0);
      String[] stringArray0 = new String[9];
      ClassGen classGen0 = new ClassGen("cJrCBo/z06", "cJrCBo/z06", "cJrCBo/z06", (-457), stringArray0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      // Undeclared exception!
      try { 
        instructionFactory0.createCast(type0, type0.CLASS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot cast double to java.lang.Class
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StackInstruction stackInstruction0 = InstructionFactory.createDup_1(172);
      InstructionList instructionList0 = new InstructionList(stackInstruction0);
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) stackInstruction0);
      ReturnaddressType returnaddressType0 = new ReturnaddressType(instructionHandle0);
      // Undeclared exception!
      try { 
        InstructionFactory.createArrayStore(returnaddressType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid type <return address targeting   -1: dup_x1[90](1)>
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      DCMPG dCMPG0 = new DCMPG();
      Type type0 = dCMPG0.getType(constantPoolGen0);
      ArrayInstruction arrayInstruction0 = InstructionFactory.createArrayStore(type0.CLASS);
      assertEquals((short)83, arrayInstruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ArrayType arrayType0 = new ArrayType("java.lang.Throwable", 11);
      ArrayInstruction arrayInstruction0 = InstructionFactory.createArrayStore(arrayType0);
      assertEquals((short)83, arrayInstruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BasicType basicType0 = Type.VOID;
      // Undeclared exception!
      try { 
        InstructionFactory.createArrayStore(basicType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid type void
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BasicType basicType0 = Type.LONG;
      ArrayInstruction arrayInstruction0 = InstructionFactory.createArrayStore(basicType0);
      assertEquals("lastore", arrayInstruction0.getName());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BasicType basicType0 = Type.INT;
      ArrayInstruction arrayInstruction0 = InstructionFactory.createArrayStore(basicType0);
      assertEquals(1, arrayInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SIPUSH sIPUSH0 = new SIPUSH();
      Type type0 = sIPUSH0.getType(constantPoolGen0);
      ArrayInstruction arrayInstruction0 = InstructionFactory.createArrayStore(type0);
      assertEquals((short)86, arrayInstruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BasicType basicType0 = Type.BYTE;
      ArrayInstruction arrayInstruction0 = InstructionFactory.createArrayStore(basicType0);
      assertEquals(1, arrayInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BasicType basicType0 = Type.DOUBLE;
      ArrayInstruction arrayInstruction0 = InstructionFactory.createArrayStore(basicType0);
      assertEquals((short)82, arrayInstruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BasicType basicType0 = Type.FLOAT;
      ArrayInstruction arrayInstruction0 = InstructionFactory.createArrayStore(basicType0);
      assertEquals((short)81, arrayInstruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BasicType basicType0 = Type.CHAR;
      ArrayInstruction arrayInstruction0 = InstructionFactory.createArrayStore(basicType0);
      assertEquals((short)85, arrayInstruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BasicType basicType0 = Type.BOOLEAN;
      ArrayInstruction arrayInstruction0 = InstructionFactory.createArrayStore(basicType0);
      assertEquals(1, arrayInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DUP dUP0 = new DUP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = dUP0.getType(constantPoolGen0);
      // Undeclared exception!
      try { 
        InstructionFactory.createArrayLoad(type0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid type <unknown object>
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ObjectType objectType0 = Type.STRINGBUFFER;
      ArrayInstruction arrayInstruction0 = InstructionFactory.createArrayLoad(objectType0);
      assertEquals(1, arrayInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ArrayType arrayType0 = new ArrayType("zt", 138);
      ArrayInstruction arrayInstruction0 = InstructionFactory.createArrayLoad(arrayType0);
      InstructionList instructionList0 = new InstructionList(arrayInstruction0);
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)191, instructionHandle0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid opcode: 191
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BasicType basicType0 = Type.VOID;
      // Undeclared exception!
      try { 
        InstructionFactory.createArrayLoad(basicType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid type void
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BasicType basicType0 = Type.INT;
      ArrayInstruction arrayInstruction0 = InstructionFactory.createArrayLoad(basicType0);
      assertEquals("iaload", arrayInstruction0.getName());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SIPUSH sIPUSH0 = new SIPUSH();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = sIPUSH0.getType(constantPoolGen0);
      ArrayInstruction arrayInstruction0 = InstructionFactory.createArrayLoad(type0);
      assertEquals("saload", arrayInstruction0.getName());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BasicType basicType0 = Type.BYTE;
      ArrayInstruction arrayInstruction0 = InstructionFactory.createArrayLoad(basicType0);
      assertEquals("baload", arrayInstruction0.getName());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DCMPL dCMPL0 = new DCMPL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = dCMPL0.getType(constantPoolGen0);
      ArrayInstruction arrayInstruction0 = InstructionFactory.createArrayLoad(type0);
      assertEquals(1, arrayInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BasicType basicType0 = Type.FLOAT;
      ArrayInstruction arrayInstruction0 = InstructionFactory.createArrayLoad(basicType0);
      assertEquals("faload", arrayInstruction0.getName());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BasicType basicType0 = Type.CHAR;
      ArrayInstruction arrayInstruction0 = InstructionFactory.createArrayLoad(basicType0);
      assertEquals((short)52, arrayInstruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BasicType basicType0 = Type.LONG;
      ArrayInstruction arrayInstruction0 = InstructionFactory.createArrayLoad(basicType0);
      assertEquals((short)47, arrayInstruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BasicType basicType0 = Type.BOOLEAN;
      ArrayInstruction arrayInstruction0 = InstructionFactory.createArrayLoad(basicType0);
      assertEquals("baload", arrayInstruction0.getName());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ReturnaddressType returnaddressType0 = ReturnaddressType.NO_TARGET;
      // Undeclared exception!
      try { 
        InstructionFactory.createLoad(returnaddressType0, 56);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid type <return address>
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      LocalVariableInstruction localVariableInstruction0 = InstructionFactory.createLoad(objectType0, 113);
      assertEquals(113, localVariableInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ArrayType arrayType0 = new ArrayType((byte)10, (short)155);
      LocalVariableInstruction localVariableInstruction0 = InstructionFactory.createLoad(arrayType0, (byte)10);
      assertEquals(10, localVariableInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BasicType basicType0 = Type.VOID;
      // Undeclared exception!
      try { 
        InstructionFactory.createLoad(basicType0, (-213));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid type void
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Type type0 = Type.getType("I");
      // Undeclared exception!
      try { 
        InstructionFactory.createLoad(type0, (-1444));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal value: -1444
         //
         verifyException("org.apache.bcel.generic.LocalVariableInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BasicType basicType0 = Type.SHORT;
      LocalVariableInstruction localVariableInstruction0 = InstructionFactory.createLoad(basicType0, (short)164);
      assertEquals(164, localVariableInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BasicType basicType0 = Type.BYTE;
      LocalVariableInstruction localVariableInstruction0 = InstructionFactory.createLoad(basicType0, (short)200);
      assertEquals(200, localVariableInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Type type0 = Type.getReturnType("Dx$;IMB 6");
      // Undeclared exception!
      try { 
        InstructionFactory.createLoad(type0, (-638));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal value: -638
         //
         verifyException("org.apache.bcel.generic.LocalVariableInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FCMPG fCMPG0 = new FCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fCMPG0.getType(constantPoolGen0);
      // Undeclared exception!
      try { 
        InstructionFactory.createLoad(type0, (-10));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal value: -10
         //
         verifyException("org.apache.bcel.generic.LocalVariableInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BasicType basicType0 = Type.CHAR;
      LocalVariableInstruction localVariableInstruction0 = InstructionFactory.createLoad(basicType0, 188);
      assertEquals(188, localVariableInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BasicType basicType0 = Type.LONG;
      LocalVariableInstruction localVariableInstruction0 = InstructionFactory.createLoad(basicType0, 50);
      assertEquals(50, localVariableInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BasicType basicType0 = Type.BOOLEAN;
      // Undeclared exception!
      try { 
        InstructionFactory.createLoad(basicType0, (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal value: -1
         //
         verifyException("org.apache.bcel.generic.LocalVariableInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(184);
      Type type0 = localVariables0.get(40);
      // Undeclared exception!
      try { 
        InstructionFactory.createStore(type0, 184);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid type <unknown object>
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ObjectType objectType0 = Type.OBJECT;
      // Undeclared exception!
      try { 
        InstructionFactory.createStore(objectType0, (-3267));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal value: -3267
         //
         verifyException("org.apache.bcel.generic.LocalVariableInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ArrayType arrayType0 = new ArrayType("java.lang.Throwable", 11);
      LocalVariableInstruction localVariableInstruction0 = InstructionFactory.createStore(arrayType0, 1999);
      assertEquals(1999, localVariableInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BasicType basicType0 = Type.VOID;
      // Undeclared exception!
      try { 
        InstructionFactory.createStore(basicType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid type void
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BasicType basicType0 = Type.LONG;
      LocalVariableInstruction localVariableInstruction0 = InstructionFactory.createStore(basicType0, 184);
      assertEquals(184, localVariableInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      IINC iINC0 = new IINC();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = iINC0.getType(constantPoolGen0);
      LocalVariableInstruction localVariableInstruction0 = InstructionFactory.createStore(type0, 1);
      assertEquals(1, localVariableInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BasicType basicType0 = Type.BYTE;
      LocalVariableInstruction localVariableInstruction0 = InstructionFactory.createStore(basicType0, (short)200);
      assertEquals(200, localVariableInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DCMPL dCMPL0 = (DCMPL)InstructionConstants.DCMPL;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = dCMPL0.getType(constantPoolGen0);
      LocalVariableInstruction localVariableInstruction0 = InstructionFactory.createStore(type0, 1947);
      assertEquals(1947, localVariableInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BasicType basicType0 = Type.CHAR;
      LocalVariableInstruction localVariableInstruction0 = InstructionFactory.createStore(basicType0, 1032);
      assertEquals(1032, localVariableInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BasicType basicType0 = Type.SHORT;
      LocalVariableInstruction localVariableInstruction0 = InstructionFactory.createStore(basicType0, 184);
      assertEquals(184, localVariableInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BasicType basicType0 = Type.BOOLEAN;
      // Undeclared exception!
      try { 
        InstructionFactory.createStore(basicType0, (-4290));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal value: -4290
         //
         verifyException("org.apache.bcel.generic.LocalVariableInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StackInstruction stackInstruction0 = InstructionFactory.createDup_1(2);
      assertEquals("dup2_x1", stackInstruction0.getName());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StackInstruction stackInstruction0 = InstructionFactory.createDup_2(2);
      assertEquals((short)94, stackInstruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      StackInstruction stackInstruction0 = InstructionFactory.createDup_2((-3281));
      assertEquals((short)91, stackInstruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StackInstruction stackInstruction0 = InstructionFactory.createDup((byte)2);
      assertEquals(1, stackInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StackInstruction stackInstruction0 = InstructionFactory.createDup((short)458);
      assertEquals("dup", stackInstruction0.getName());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StackInstruction stackInstruction0 = InstructionFactory.createPop(2);
      assertEquals((short)88, stackInstruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      StackInstruction stackInstruction0 = InstructionFactory.createPop((-23));
      assertEquals(1, stackInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BasicType basicType0 = Type.BOOLEAN;
      // Undeclared exception!
      try { 
        InstructionFactory.createBinaryOperation("java.lang.String", basicType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid type boolean
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BasicType basicType0 = Type.DOUBLE;
      ArithmeticInstruction arithmeticInstruction0 = InstructionFactory.createBinaryOperation("/E]", basicType0);
      assertEquals("ddiv", arithmeticInstruction0.getName());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BasicType basicType0 = Type.DOUBLE;
      // Undeclared exception!
      try { 
        InstructionFactory.createBinaryOperation(".t'", basicType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid operand .
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      DCONST dCONST0 = new DCONST();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = dCONST0.getType(constantPoolGen0);
      // Undeclared exception!
      try { 
        InstructionFactory.createBinaryOperation(", but ", type0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid operand ,
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      DCONST dCONST0 = new DCONST();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = dCONST0.getType(constantPoolGen0);
      ArithmeticInstruction arithmeticInstruction0 = InstructionFactory.createBinaryOperation("+Uw+Y~9-Z7", type0);
      assertEquals("dadd", arithmeticInstruction0.getName());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ArrayType arrayType0 = new ArrayType((byte)10, (short)155);
      // Undeclared exception!
      try { 
        InstructionFactory.createBinaryOperation(")GvzN|Ct>c?O", arrayType0.DOUBLE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid operand )
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BasicType basicType0 = Type.DOUBLE;
      // Undeclared exception!
      try { 
        InstructionFactory.createBinaryOperation("(>", basicType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid operand (
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BasicType basicType0 = Type.DOUBLE;
      // Undeclared exception!
      try { 
        InstructionFactory.createBinaryOperation("' audX'", basicType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid operand '
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Type type0 = Type.getReturnType("Dx$;IMB  6");
      // Undeclared exception!
      try { 
        InstructionFactory.createBinaryOperation("Dx$;IMB  6", type0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid operand D
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      DCMPL dCMPL0 = new DCMPL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = dCMPL0.getType(constantPoolGen0);
      // Undeclared exception!
      try { 
        InstructionFactory.createBinaryOperation("& fZNr7\"Vqc", type0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid operand &
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BasicType basicType0 = Type.FLOAT;
      // Undeclared exception!
      try { 
        InstructionFactory.createBinaryOperation("1", basicType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid operand 1
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      FCMPL fCMPL0 = (FCMPL)InstructionConstants.FCMPL;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fCMPL0.getType(constantPoolGen0);
      ArithmeticInstruction arithmeticInstruction0 = InstructionFactory.createBinaryOperation("//~ETw+yhU2),|", type0);
      assertEquals((short)110, arithmeticInstruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BasicType basicType0 = Type.FLOAT;
      // Undeclared exception!
      try { 
        InstructionFactory.createBinaryOperation(".t'", basicType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid operand .
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BasicType basicType0 = Type.FLOAT;
      ArithmeticInstruction arithmeticInstruction0 = InstructionFactory.createBinaryOperation("-,", basicType0);
      assertEquals(1, arithmeticInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BasicType basicType0 = Type.FLOAT;
      ArithmeticInstruction arithmeticInstruction0 = InstructionFactory.createBinaryOperation("+", basicType0);
      assertEquals(1, arithmeticInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BasicType basicType0 = Type.FLOAT;
      // Undeclared exception!
      try { 
        InstructionFactory.createBinaryOperation(")GvzN|Ct>c?O", basicType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid operand )
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BasicType basicType0 = Type.FLOAT;
      // Undeclared exception!
      try { 
        InstructionFactory.createBinaryOperation("(>", basicType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid operand (
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BasicType basicType0 = Type.FLOAT;
      // Undeclared exception!
      try { 
        InstructionFactory.createBinaryOperation("' audX'", basicType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid operand '
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BasicType basicType0 = Type.FLOAT;
      // Undeclared exception!
      try { 
        InstructionFactory.createBinaryOperation(", but ", basicType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid operand ,
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BasicType basicType0 = Type.FLOAT;
      // Undeclared exception!
      try { 
        InstructionFactory.createBinaryOperation("& fZNr7\"Vqc", basicType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid operand &
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BasicType basicType0 = Type.LONG;
      ArithmeticInstruction arithmeticInstruction0 = InstructionFactory.createBinaryOperation(">>>", basicType0);
      assertEquals(1, arithmeticInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BasicType basicType0 = Type.LONG;
      ArithmeticInstruction arithmeticInstruction0 = InstructionFactory.createBinaryOperation("|~rL8drOgl&p", basicType0);
      assertEquals("lor", arithmeticInstruction0.getName());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LCONST lCONST0 = (LCONST)InstructionConstants.LCONST_1;
      Type type0 = lCONST0.getType(constantPoolGen0);
      ArithmeticInstruction arithmeticInstruction0 = InstructionFactory.createBinaryOperation("^#IVfN+FQT;", type0);
      assertEquals("lxor", arithmeticInstruction0.getName());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BasicType basicType0 = Type.LONG;
      ArithmeticInstruction arithmeticInstruction0 = InstructionFactory.createBinaryOperation(">y,V<&cA", basicType0);
      assertEquals(1, arithmeticInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LCONST lCONST0 = (LCONST)InstructionConstants.LCONST_1;
      Type type0 = lCONST0.getType(constantPoolGen0);
      ArithmeticInstruction arithmeticInstruction0 = InstructionFactory.createBinaryOperation("<null object>", type0);
      assertEquals(1, arithmeticInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BasicType basicType0 = Type.LONG;
      ArithmeticInstruction arithmeticInstruction0 = InstructionFactory.createBinaryOperation("/jzE/A", basicType0);
      assertEquals("ldiv", arithmeticInstruction0.getName());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BasicType basicType0 = Type.LONG;
      ArithmeticInstruction arithmeticInstruction0 = InstructionFactory.createBinaryOperation("-]", basicType0);
      assertEquals(1, arithmeticInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BasicType basicType0 = Type.LONG;
      ArithmeticInstruction arithmeticInstruction0 = InstructionFactory.createBinaryOperation("+", basicType0);
      assertEquals((short)97, arithmeticInstruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BasicType basicType0 = Type.LONG;
      ArithmeticInstruction arithmeticInstruction0 = InstructionFactory.createBinaryOperation("*m*=.", basicType0);
      assertEquals("lmul", arithmeticInstruction0.getName());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BasicType basicType0 = Type.LONG;
      ArithmeticInstruction arithmeticInstruction0 = InstructionFactory.createBinaryOperation("&;NneH(", basicType0);
      assertEquals(1, arithmeticInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BasicType basicType0 = Type.LONG;
      // Undeclared exception!
      try { 
        InstructionFactory.createBinaryOperation(".F;dVNsd[0", basicType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid operand .F;dVNsd[0
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BasicType basicType0 = Type.CHAR;
      ArithmeticInstruction arithmeticInstruction0 = InstructionFactory.createBinaryOperation(">SA", basicType0);
      assertEquals(1, arithmeticInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BasicType basicType0 = Type.BYTE;
      // Undeclared exception!
      try { 
        InstructionFactory.createBinaryOperation("java.lang.String", basicType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid operand java.lang.String
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BasicType basicType0 = Type.BYTE;
      ArithmeticInstruction arithmeticInstruction0 = InstructionFactory.createBinaryOperation("|", basicType0);
      assertEquals("ior", arithmeticInstruction0.getName());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BasicType basicType0 = Type.CHAR;
      ArithmeticInstruction arithmeticInstruction0 = InstructionFactory.createBinaryOperation("^", basicType0);
      assertEquals(1, arithmeticInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BasicType basicType0 = Type.BYTE;
      ArithmeticInstruction arithmeticInstruction0 = InstructionFactory.createBinaryOperation("<null object>", basicType0);
      assertEquals(1, arithmeticInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BasicType basicType0 = Type.INT;
      ArithmeticInstruction arithmeticInstruction0 = InstructionFactory.createBinaryOperation("/EM]", basicType0);
      assertEquals(1, arithmeticInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BasicType basicType0 = Type.SHORT;
      ArithmeticInstruction arithmeticInstruction0 = InstructionFactory.createBinaryOperation("-M", basicType0);
      assertEquals((short)100, arithmeticInstruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BasicType basicType0 = Type.SHORT;
      ArithmeticInstruction arithmeticInstruction0 = InstructionFactory.createBinaryOperation("+", basicType0);
      assertEquals("iadd", arithmeticInstruction0.getName());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BasicType basicType0 = Type.INT;
      ArithmeticInstruction arithmeticInstruction0 = InstructionFactory.createBinaryOperation("*m*=.", basicType0);
      assertEquals(1, arithmeticInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BasicType basicType0 = Type.INT;
      ArithmeticInstruction arithmeticInstruction0 = InstructionFactory.createBinaryOperation("&m*=", basicType0);
      assertEquals((short)126, arithmeticInstruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BasicType basicType0 = Type.CHAR;
      ArithmeticInstruction arithmeticInstruction0 = InstructionFactory.createBinaryOperation(">>>", basicType0);
      assertEquals((short)124, arithmeticInstruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      RET rET0 = new RET();
      Type type0 = rET0.getType(constantPoolGen0);
      // Undeclared exception!
      try { 
        InstructionFactory.createReturn(type0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid type: <return address>
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      ArrayType arrayType0 = new ArrayType("java.lang.Throwable", 11);
      ReturnInstruction returnInstruction0 = InstructionFactory.createReturn(arrayType0);
      assertEquals("areturn", returnInstruction0.getName());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BasicType basicType0 = Type.VOID;
      ReturnInstruction returnInstruction0 = InstructionFactory.createReturn(basicType0);
      assertEquals(1, returnInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BasicType basicType0 = Type.LONG;
      ReturnInstruction returnInstruction0 = InstructionFactory.createReturn(basicType0);
      assertEquals((short)173, returnInstruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      IINC iINC0 = new IINC();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = iINC0.getType(constantPoolGen0);
      ReturnInstruction returnInstruction0 = InstructionFactory.createReturn(type0);
      assertEquals(1, returnInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BasicType basicType0 = Type.SHORT;
      ReturnInstruction returnInstruction0 = InstructionFactory.createReturn(basicType0);
      assertEquals(1, returnInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BasicType basicType0 = Type.BYTE;
      ReturnInstruction returnInstruction0 = InstructionFactory.createReturn(basicType0);
      assertEquals("ireturn", returnInstruction0.getName());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      DCONST dCONST0 = new DCONST();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = dCONST0.getType(constantPoolGen0);
      ReturnInstruction returnInstruction0 = InstructionFactory.createReturn(type0);
      assertEquals(1, returnInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BasicType basicType0 = Type.FLOAT;
      ReturnInstruction returnInstruction0 = InstructionFactory.createReturn(basicType0);
      assertEquals("freturn", returnInstruction0.getName());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BasicType basicType0 = Type.CHAR;
      ReturnInstruction returnInstruction0 = InstructionFactory.createReturn(basicType0);
      assertEquals(1, returnInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BasicType basicType0 = Type.BYTE;
      ReturnInstruction returnInstruction0 = InstructionFactory.createReturn(basicType0.STRING);
      assertEquals(1, returnInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BasicType basicType0 = Type.BOOLEAN;
      ReturnInstruction returnInstruction0 = InstructionFactory.createReturn(basicType0);
      assertEquals((short)172, returnInstruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String[] stringArray0 = new String[14];
      ClassGen classGen0 = new ClassGen("org.apache.bcel.generic.ASTORE", "org.apache.bcel.generic.ASTORE", "org.apache.bcel.generic.ASTORE", (short)184, stringArray0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      DUP dUP0 = new DUP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = dUP0.getType(constantPoolGen0);
      FieldInstruction fieldInstruction0 = instructionFactory0.createFieldAccess("org.apache.bcel.generic.ASTORE", "org.apache.bcel.generic.ASTORE", type0, (short)181);
      assertEquals(7, fieldInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String[] stringArray0 = new String[4];
      ClassGen classGen0 = new ClassGen("", "", "", (short)201, stringArray0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      DUP dUP0 = new DUP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = dUP0.getType(constantPoolGen0);
      FieldInstruction fieldInstruction0 = instructionFactory0.createFieldAccess("", "O9V=Yy\"5R;v;", type0, (short)180);
      assertEquals(7, fieldInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BasicType basicType0 = Type.BYTE;
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      instructionFactory0.createFieldAccess("org.apache.bcel.generic.LRETURN", "org.apache.bcel.generic.LRETURN", basicType0, (short)179);
      assertEquals(7, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String[] stringArray0 = new String[9];
      ClassGen classGen0 = new ClassGen("f", "f", "f", 160, stringArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0, constantPoolGen0);
      ARETURN aRETURN0 = new ARETURN();
      Type type0 = aRETURN0.getType(constantPoolGen0);
      // Undeclared exception!
      try { 
        instructionFactory0.createFieldAccess("f", "f", type0, (short)167);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown getfield kind:167
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      FCMPG fCMPG0 = new FCMPG();
      Type type0 = fCMPG0.getType(constantPoolGen0);
      FieldInstruction fieldInstruction0 = instructionFactory0.createFieldAccess("org.apache.bcel.generic.InstructionFactory", "org.apache.bcel.generic.InstructionFactory", type0, (short)178);
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals(6, fieldInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      ObjectType objectType0 = Type.STRING;
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      // Undeclared exception!
      try { 
        instructionFactory0.createAppend(uninitializedObjectType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No append for this type? <UNINITIALIZED OBJECT OF TYPE 'java.lang.String'>
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      ClassGen classGen0 = new ClassGen("/EM]", "/EM]", "/EM]", (short)135, (String[]) null);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0, (ConstantPoolGen) null);
      BasicType basicType0 = Type.VOID;
      // Undeclared exception!
      try { 
        instructionFactory0.createAppend(basicType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No append for this type? void
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BasicType basicType0 = Type.LONG;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      instructionFactory0.createAppend(basicType0);
      assertEquals(7, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      IINC iINC0 = new IINC();
      Type type0 = iINC0.getType(constantPoolGen0);
      instructionFactory0.createAppend(type0);
      assertEquals(7, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      BasicType basicType0 = Type.SHORT;
      instructionFactory0.createAppend(basicType0);
      assertEquals(7, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      BasicType basicType0 = Type.BYTE;
      instructionFactory0.createAppend(basicType0);
      assertEquals(7, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      DCMPL dCMPL0 = new DCMPL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = dCMPL0.getType(constantPoolGen0);
      ClassGen classGen0 = new ClassGen(".!zHKNPba@(nd", ".!zHKNPba@(nd", ".!zHKNPba@(nd", 9, (String[]) null, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0, constantPoolGen0);
      instructionFactory0.createAppend(type0);
      assertEquals(11, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String[] stringArray0 = new String[4];
      ClassGen classGen0 = new ClassGen("aastore", "aastore", "i2b", 0, stringArray0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      FCMPG fCMPG0 = new FCMPG();
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      Type type0 = fCMPG0.getType(constantPoolGen0);
      INVOKEVIRTUAL iNVOKEVIRTUAL0 = (INVOKEVIRTUAL)instructionFactory0.createAppend(type0);
      assertEquals(10, iNVOKEVIRTUAL0.getIndex());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      BasicType basicType0 = Type.BOOLEAN;
      instructionFactory0.createAppend(basicType0);
      assertEquals(7, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ClassGen classGen0 = new ClassGen("O9V=Yy\"5R;Zv;", "O9V=Yy\"5R;Zv;", "O9V=Yy\"5R;Zv;", (-995), stringArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0, constantPoolGen0);
      BasicType basicType0 = Type.BYTE;
      instructionFactory0.createAppend(basicType0.THROWABLE);
      assertEquals(7, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ClassGen classGen0 = new ClassGen("O9V=Yy\"5R;Zv;", "O9V=Yy\"5R;Zv;", "O9V=Yy\"5R;Zv;", (-995), stringArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0, constantPoolGen0);
      ObjectType objectType0 = Type.STRING;
      instructionFactory0.createAppend(objectType0);
      assertEquals(7, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      Character character0 = new Character('_');
      Instruction instruction0 = instructionFactory0.createConstant(character0);
      assertEquals((short)16, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      Boolean boolean0 = Boolean.valueOf(true);
      Instruction instruction0 = instructionFactory0.createConstant(boolean0);
      assertEquals("iconst_1", instruction0.getName());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String[] stringArray0 = new String[4];
      ClassGen classGen0 = new ClassGen("aastore", "aastore", "i2b", 0, stringArray0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      FCMPG fCMPG0 = new FCMPG();
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      Type type0 = fCMPG0.getType(constantPoolGen0);
      INSTANCEOF iNSTANCEOF0 = instructionFactory0.createInstanceOf(type0.STRINGBUFFER);
      // Undeclared exception!
      try { 
        instructionFactory0.createConstant(iNSTANCEOF0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: class org.apache.bcel.generic.INSTANCEOF
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String[] stringArray0 = new String[9];
      ClassGen classGen0 = new ClassGen("f", "f", "f", 160, stringArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0, constantPoolGen0);
      Float float0 = new Float((double) 160);
      LDC lDC0 = (LDC)instructionFactory0.createConstant(float0);
      assertEquals(1, lDC0.getIndex());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen(".!zHKNPba@(nd", ".!zHKNPba@(nd", ".!zHKNPba@(nd", 9, (String[]) null, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0, constantPoolGen0);
      LDC lDC0 = (LDC)instructionFactory0.createConstant(".!zHKNPba@(nd");
      assertEquals(5, lDC0.getIndex());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ClassGen classGen0 = new ClassGen("O9V=Yy\"5R;Zv;", "O9V=Yy\"5R;Zv;", "O9V=Yy\"5R;Zv;", (-995), stringArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0, constantPoolGen0);
      ObjectType objectType0 = Type.STRING;
      instructionFactory0.createInvoke(" to branch handle which is not a branch instruction", "O9V=Yy\"5R;Zv;", (Type) objectType0, objectType0.NO_ARGS, (short)185, false);
      assertEquals(7, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      BasicType basicType0 = Type.SHORT;
      instructionFactory0.createInvoke("module", "module", (Type) basicType0, basicType0.NO_ARGS, (short)186, false);
      assertEquals(6, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("lxj&Bw", "D", "D", (-1117), (String[]) null, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0, constantPoolGen0);
      // Undeclared exception!
      try { 
        instructionFactory0.createInvoke("D", "lxj&Bw", (Type) objectType0, objectType0.NO_ARGS, (short) (-2162));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown invoke kind: -2162
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      SIPUSH sIPUSH0 = new SIPUSH();
      Type type0 = sIPUSH0.getType((ConstantPoolGen) null);
      String[] stringArray0 = new String[8];
      ClassGen classGen0 = new ClassGen("i\"9Zu`G@+", "i\"9Zu`G@+", "i\"9Zu`G@+", (-6), stringArray0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      InvokeInstruction invokeInstruction0 = instructionFactory0.createInvoke(",\"", "i\"9Zu`G@+", type0, type0.NO_ARGS, (short)184, true);
      assertEquals(8, invokeInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String[] stringArray0 = new String[9];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("oaQIzw5", "oaQIzw5", "oaQIzw5", 10, stringArray0, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      RET rET0 = new RET();
      Type type0 = rET0.getType(constantPoolGen0);
      InvokeInstruction invokeInstruction0 = instructionFactory0.createInvoke("oaQIzw5", "oaQIzw5", type0, type0.NO_ARGS, (short)183);
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals(6, invokeInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BasicType basicType0 = Type.BYTE;
      InstructionFactory instructionFactory0 = new InstructionFactory((ConstantPoolGen) null);
      // Undeclared exception!
      try { 
        instructionFactory0.createInvoke(", with(", ", with(", (Type) basicType0, basicType0.NO_ARGS, (short)185);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("lxj&Bw", "D", "D", (-1117), (String[]) null, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0, constantPoolGen0);
      instructionFactory0.createGetField("lxj&Bw", " j", objectType0);
      assertEquals(10, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String[] stringArray0 = new String[4];
      ClassGen classGen0 = new ClassGen("O9V=YOVy\"5R;Zv;", "O9V=YOVy\"5R;Zv;", "org.apache.bcel.generic.F2D", (short)154, stringArray0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      IINC iINC0 = new IINC();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = iINC0.getType(constantPoolGen0);
      ArrayType arrayType0 = new ArrayType(type0, (short)154);
      INVOKEVIRTUAL iNVOKEVIRTUAL0 = (INVOKEVIRTUAL)instructionFactory0.createAppend(arrayType0);
      assertEquals(10, iNVOKEVIRTUAL0.getIndex());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ClassGen classGen0 = new ClassGen("O9V=Yy\"5R;Zv;", "O9V=Yy\"5R;Zv;", "O9V=Yy\"5R;Zv;", (-1032), stringArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0, constantPoolGen0);
      ClassGen classGen1 = instructionFactory0.getClassGen();
      assertTrue(classGen1.isStatic());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      BasicType basicType0 = Type.CHAR;
      instructionFactory0.createAppend(basicType0);
      assertEquals(7, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("  flPGs:   ", "  flPGs:   ", "  flPGs:   ", (-1117), (String[]) null, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0, constantPoolGen0);
      ConstantPoolGen constantPoolGen1 = instructionFactory0.getConstantPool();
      assertEquals(4, constantPoolGen1.getSize());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      Class<Double> class0 = Double.class;
      Type type0 = Type.getType(class0);
      // Undeclared exception!
      try { 
        instructionFactory0.createGetStatic("\"gJO)[m3p#)J<v", (String) null, type0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value must not be null.
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      NEW nEW0 = instructionFactory0.createNew("#;ZI~:#Vf#q{");
      assertEquals(3, nEW0.getLength());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      InstructionList instructionList0 = instructionFactory0.createPrintln("#;ZI~:#Vf#q{");
      InstructionHandle instructionHandle0 = instructionList0.append(instructionList0);
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)181, instructionHandle0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid opcode: 181
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      ALOAD aLOAD0 = (ALOAD)InstructionFactory.createThis();
      assertEquals(0, aLOAD0.getIndex());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      ArrayType arrayType0 = new ArrayType("java.lang.Throwable", 11);
      instructionFactory0.createPutField("!KM3>;&VD<hojP", "bAvo8i@kn.0p", arrayType0);
      assertEquals(7, constantPoolGen0.getSize());
  }
}
