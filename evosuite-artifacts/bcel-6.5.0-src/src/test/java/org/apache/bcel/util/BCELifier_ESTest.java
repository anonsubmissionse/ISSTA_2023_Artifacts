/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 21:54:09 GMT 2022
 */

package org.apache.bcel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.FilterOutputStream;
import java.io.ObjectOutputStream;
import java.io.PipedOutputStream;
import org.apache.bcel.Const;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.NEWARRAY;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.ReferenceType;
import org.apache.bcel.generic.ReturnaddressType;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELifier;
import org.apache.bcel.util.ClassLoaderRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BCELifier_ESTest extends BCELifier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertNotNull(javaClass0);
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isClass());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isVolatile());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isPrivate());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isInterface());
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, (byte)2);
      assertNotNull(bufferedOutputStream0);
      
      BCELifier bCELifier0 = new BCELifier(javaClass0, bufferedOutputStream0);
      assertNotNull(bCELifier0);
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isClass());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isVolatile());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isPrivate());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isInterface());
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      
      bCELifier0.start();
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isClass());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isVolatile());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isPrivate());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isInterface());
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.bcel.generic.ISUB";
      BCELifier.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ObjectType objectType0 = Type.STRINGBUFFER;
      assertNotNull(objectType0);
      assertEquals("Ljava/lang/StringBuffer;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("java.lang.StringBuffer", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      
      NEWARRAY nEWARRAY0 = new NEWARRAY(objectType0.BYTE);
      assertNotNull(nEWARRAY0);
      assertEquals("Ljava/lang/StringBuffer;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("java.lang.StringBuffer", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("newarray", nEWARRAY0.getName());
      assertEquals((short)188, nEWARRAY0.getOpcode());
      assertEquals((byte)8, nEWARRAY0.getTypecode());
      assertEquals(2, nEWARRAY0.getLength());
      
      ArrayType arrayType0 = (ArrayType)nEWARRAY0.getType();
      assertNotNull(arrayType0);
      assertEquals("Ljava/lang/StringBuffer;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("java.lang.StringBuffer", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("newarray", nEWARRAY0.getName());
      assertEquals((short)188, nEWARRAY0.getOpcode());
      assertEquals((byte)8, nEWARRAY0.getTypecode());
      assertEquals(2, nEWARRAY0.getLength());
      assertEquals(1, arrayType0.getSize());
      assertEquals((byte)13, arrayType0.getType());
      assertEquals("[B", arrayType0.getSignature());
      assertEquals(1, arrayType0.getDimensions());
      
      String string0 = BCELifier.printType(arrayType0);
      assertNotNull(string0);
      assertEquals("Ljava/lang/StringBuffer;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("java.lang.StringBuffer", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("newarray", nEWARRAY0.getName());
      assertEquals((short)188, nEWARRAY0.getOpcode());
      assertEquals((byte)8, nEWARRAY0.getTypecode());
      assertEquals(2, nEWARRAY0.getLength());
      assertEquals(1, arrayType0.getSize());
      assertEquals((byte)13, arrayType0.getType());
      assertEquals("[B", arrayType0.getSignature());
      assertEquals(1, arrayType0.getDimensions());
      assertEquals("new ArrayType(Type.BYTE, 1)", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = BCELifier.printType("Const.ACC_PRIVATE | Const.ACC_PROTECTED | Const.ACC_SYNCHRONIZED | Const.ACC_VOLATILE | Const.ACC_TRANSIENT | Const.ACC_NATIVE | Const.ACC_STRICTFP | Const.ACC_SYNTHETIC | Const.ACC_ANNOTATION | Const.ACC_ENUM | Const.ACC_MODULE");
      assertNotNull(string0);
      assertEquals("Type.CHAR", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      ObjectType objectType0 = Type.STRINGBUFFER;
      assertNotNull(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("java.lang.StringBuffer", objectType0.getClassName());
      assertEquals("Ljava/lang/StringBuffer;", objectType0.getSignature());
      
      typeArray0[0] = (Type) objectType0;
      String string0 = BCELifier.printArgumentTypes(typeArray0);
      assertNotNull(string0);
      assertEquals(1, typeArray0.length);
      assertEquals("new Type[] { Type.STRINGBUFFER }", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JavaClass javaClass0 = BCELifier.getJavaClass("org.apache.bcel.util.ClassPath$JrtModules");
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertEquals(32, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isPrivate());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(18, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPublic());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isNative());
      assertEquals("org.apache.bcel.util.ClassPath$JrtModules", javaClass0.getFileName());
      assertEquals("org.apache.bcel.util.ClassPath$JrtModules", javaClass0.getClassName());
      assertEquals(32, javaClass0.getModifiers());
      assertFalse(javaClass0.isVolatile());
      assertEquals(19, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isFinal());
      assertEquals("org.apache.bcel.util", javaClass0.getPackageName());
      assertFalse(javaClass0.isInterface());
      assertEquals(0, javaClass0.getMinor());
      assertEquals("ClassPath.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isClass());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertEquals("org.apache.bcel.util.ClassPath$AbstractPathEntry", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isProtected());
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JavaClass javaClass0 = BCELifier.getJavaClass("org.apache.bcel.util.BCELifier$FLAGS");
      assertNotNull(javaClass0);
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertEquals(16433, javaClass0.getModifiers());
      assertEquals(16433, javaClass0.getAccessFlags());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.lang.Enum", javaClass0.getSuperclassName());
      assertTrue(javaClass0.isFinal());
      assertEquals("org.apache.bcel.util.BCELifier$FLAGS", javaClass0.getClassName());
      assertEquals("org.apache.bcel.util.BCELifier$FLAGS", javaClass0.getFileName());
      assertEquals(14, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isNative());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isStrictfp());
      assertEquals(0, javaClass0.getMinor());
      assertEquals("org.apache.bcel.util", javaClass0.getPackageName());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isClass());
      assertEquals("BCELifier.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isVolatile());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isEnum());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isSynthetic());
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JavaClass javaClass0 = BCELifier.getJavaClass("org.apache.bcel.generic.TypedInstruction");
      assertNotNull(javaClass0);
      assertTrue(javaClass0.isInterface());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isSuper());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isVolatile());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isPrivate());
      assertEquals(1537, javaClass0.getModifiers());
      assertFalse(javaClass0.isClass());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStatic());
      assertEquals("TypedInstruction.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isTransient());
      assertEquals(1537, javaClass0.getAccessFlags());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(2, javaClass0.getSuperclassNameIndex());
      assertEquals("org.apache.bcel.generic", javaClass0.getPackageName());
      assertTrue(javaClass0.isAbstract());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("org.apache.bcel.generic.TypedInstruction", javaClass0.getClassName());
      assertFalse(javaClass0.isSynchronized());
      assertEquals("org.apache.bcel.generic.TypedInstruction", javaClass0.getFileName());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isProtected());
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JavaClass javaClass0 = BCELifier.getJavaClass("java.util.List");
      assertNotNull(javaClass0);
      assertEquals(11, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isFinal());
      assertEquals("java.util.List", javaClass0.getClassName());
      assertFalse(javaClass0.isSuper());
      assertEquals(0, javaClass0.getMinor());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isInterface());
      assertFalse(javaClass0.isClass());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isSynchronized());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.util", javaClass0.getPackageName());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isNative());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertEquals("List.java", javaClass0.getSourceFileName());
      assertEquals(1537, javaClass0.getModifiers());
      assertEquals("java.util.List", javaClass0.getFileName());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertEquals(1537, javaClass0.getAccessFlags());
      assertEquals(12, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isAbstract());
      assertFalse(javaClass0.isStatic());
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertNotNull(javaClass0);
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isTransient());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isFinal());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isInterface());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isNative());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertTrue(javaClass0.isPublic());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSynchronized());
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)3);
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      BCELifier bCELifier0 = new BCELifier(javaClass0, byteArrayOutputStream0);
      assertNotNull(bCELifier0);
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isTransient());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isFinal());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isInterface());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isNative());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertTrue(javaClass0.isPublic());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantArray0.length);
      assertEquals(4, constantPool0.getLength());
      
      Method method0 = new Method((byte)2, (-1), (-1), (Attribute[]) null, constantPool0);
      assertNotNull(method0);
      assertEquals(4, constantArray0.length);
      assertEquals(4, constantPool0.getLength());
      assertFalse(method0.isVolatile());
      assertEquals(2, method0.getModifiers());
      assertFalse(method0.isPublic());
      assertFalse(method0.isAbstract());
      assertFalse(method0.isSynchronized());
      assertFalse(method0.isStrictfp());
      assertFalse(method0.isNative());
      assertEquals((-1), method0.getSignatureIndex());
      assertTrue(method0.isPrivate());
      assertEquals((-1), method0.getNameIndex());
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isStatic());
      assertFalse(method0.isAnnotation());
      assertFalse(method0.isFinal());
      assertFalse(method0.isSynthetic());
      assertFalse(method0.isEnum());
      assertEquals(2, method0.getAccessFlags());
      assertFalse(method0.isInterface());
      assertFalse(method0.isTransient());
      assertFalse(method0.isProtected());
      
      // Undeclared exception!
      try { 
        bCELifier0.visitMethod(method0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -1. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isStatic());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isPrivate());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(52, javaClass0.getMajor());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isInterface());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isClass());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isFinal());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)3);
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      assertNotNull(objectOutputStream0);
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      
      Field[] fieldArray0 = new Field[9];
      Attribute[] attributeArray0 = new Attribute[4];
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantArray0.length);
      assertEquals(7, constantPool0.getLength());
      
      Field field0 = new Field(821, (-1953895011), 124, attributeArray0, constantPool0);
      assertNotNull(field0);
      assertEquals(4, attributeArray0.length);
      assertEquals(7, constantArray0.length);
      assertEquals(7, constantPool0.getLength());
      assertFalse(field0.isSynthetic());
      assertFalse(field0.isEnum());
      assertFalse(field0.isVarArgs());
      assertTrue(field0.isFinal());
      assertFalse(field0.isPrivate());
      assertEquals(821, field0.getAccessFlags());
      assertEquals(821, field0.getModifiers());
      assertFalse(field0.isStrictfp());
      assertFalse(field0.isAbstract());
      assertTrue(field0.isProtected());
      assertEquals((-1953895011), field0.getNameIndex());
      assertTrue(field0.isInterface());
      assertFalse(field0.isTransient());
      assertTrue(field0.isSynchronized());
      assertFalse(field0.isVolatile());
      assertEquals(124, field0.getSignatureIndex());
      assertTrue(field0.isNative());
      assertFalse(field0.isStatic());
      assertTrue(field0.isPublic());
      assertFalse(field0.isAnnotation());
      
      fieldArray0[0] = field0;
      javaClass0.setFields(fieldArray0);
      assertEquals(9, fieldArray0.length);
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isStatic());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isPrivate());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(52, javaClass0.getMajor());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isInterface());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isClass());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isFinal());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      
      BCELifier bCELifier0 = new BCELifier(javaClass0, objectOutputStream0);
      assertNotNull(bCELifier0);
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isStatic());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isPrivate());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(52, javaClass0.getMajor());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isInterface());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isClass());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isFinal());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      
      // Undeclared exception!
      try { 
        bCELifier0.visitJavaClass(javaClass0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 124. Constant pool size is: 7
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertNotNull(javaClass0);
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isNative());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isTransient());
      assertEquals(33, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isVolatile());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isFinal());
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)3);
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      assertNotNull(objectOutputStream0);
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
      
      javaClass0.setClassName("tM?U");
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isNative());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isTransient());
      assertEquals(33, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isVolatile());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("tM?U", javaClass0.getClassName());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isFinal());
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      
      BCELifier bCELifier0 = new BCELifier(javaClass0, objectOutputStream0);
      assertNotNull(bCELifier0);
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isNative());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isTransient());
      assertEquals(33, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isVolatile());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("tM?U", javaClass0.getClassName());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isFinal());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      
      // Undeclared exception!
      try { 
        bCELifier0.visitJavaClass(javaClass0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertNotNull(javaClass0);
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isVarArgs());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isNative());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      
      JavaClass javaClass1 = classLoaderRepository0.loadClass("java.io.DataOutputStream");
      assertNotNull(javaClass1);
      assertFalse(javaClass1.isTransient());
      assertFalse(javaClass1.isStatic());
      assertFalse(javaClass1.isAbstract());
      assertEquals("DataOutputStream.java", javaClass1.getSourceFileName());
      assertFalse(javaClass1.isAnnotation());
      assertTrue(javaClass1.isPublic());
      assertEquals("java.io", javaClass1.getPackageName());
      assertEquals(31, javaClass1.getSuperclassNameIndex());
      assertTrue(javaClass1.isSynchronized());
      assertFalse(javaClass1.isEnum());
      assertEquals((byte)2, javaClass1.getSource());
      assertFalse(javaClass1.isSynthetic());
      assertFalse(javaClass1.isNative());
      assertFalse(javaClass1.isPrivate());
      assertFalse(javaClass1.isVolatile());
      assertEquals(29, javaClass1.getClassNameIndex());
      assertEquals(33, javaClass1.getModifiers());
      assertEquals(0, javaClass1.getMinor());
      assertEquals(33, javaClass1.getAccessFlags());
      assertEquals("java.io.FilterOutputStream", javaClass1.getSuperclassName());
      assertTrue(javaClass1.isClass());
      assertTrue(javaClass1.isSuper());
      assertFalse(javaClass1.isProtected());
      assertFalse(javaClass1.isVarArgs());
      assertFalse(javaClass1.isStrictfp());
      assertEquals(52, javaClass1.getMajor());
      assertFalse(javaClass1.isFinal());
      assertEquals("java.io.DataOutputStream", javaClass1.getClassName());
      assertEquals("java.io.DataOutputStream", javaClass1.getFileName());
      assertFalse(javaClass1.isInterface());
      assertNotSame(javaClass1, javaClass0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertFalse(javaClass1.equals((Object)javaClass0));
      
      MockFile mockFile0 = new MockFile("java.io.DataOutputStream", "java.io.DataOutputStream");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      BCELifier bCELifier0 = new BCELifier(javaClass1, mockPrintStream0);
      assertNotNull(bCELifier0);
      assertFalse(javaClass1.isTransient());
      assertFalse(javaClass1.isStatic());
      assertFalse(javaClass1.isAbstract());
      assertEquals("DataOutputStream.java", javaClass1.getSourceFileName());
      assertFalse(javaClass1.isAnnotation());
      assertTrue(javaClass1.isPublic());
      assertEquals("java.io", javaClass1.getPackageName());
      assertEquals(31, javaClass1.getSuperclassNameIndex());
      assertTrue(javaClass1.isSynchronized());
      assertFalse(javaClass1.isEnum());
      assertEquals((byte)2, javaClass1.getSource());
      assertFalse(javaClass1.isSynthetic());
      assertFalse(javaClass1.isNative());
      assertFalse(javaClass1.isPrivate());
      assertFalse(javaClass1.isVolatile());
      assertEquals(29, javaClass1.getClassNameIndex());
      assertEquals(33, javaClass1.getModifiers());
      assertEquals(0, javaClass1.getMinor());
      assertEquals(33, javaClass1.getAccessFlags());
      assertEquals("java.io.FilterOutputStream", javaClass1.getSuperclassName());
      assertTrue(javaClass1.isClass());
      assertTrue(javaClass1.isSuper());
      assertFalse(javaClass1.isProtected());
      assertFalse(javaClass1.isVarArgs());
      assertFalse(javaClass1.isStrictfp());
      assertEquals(52, javaClass1.getMajor());
      assertFalse(javaClass1.isFinal());
      assertEquals("java.io.DataOutputStream", javaClass1.getClassName());
      assertEquals("java.io.DataOutputStream", javaClass1.getFileName());
      assertFalse(javaClass1.isInterface());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/bcel-6.5.0-src/java.io.DataOutputStream", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals("java.io.DataOutputStream", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/bcel-6.5.0-src/java.io.DataOutputStream/java.io.DataOutputStream", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertFalse(javaClass1.equals((Object)javaClass0));
      
      // Undeclared exception!
      try { 
        bCELifier0.visitJavaClass(javaClass0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown or invalid constant type at 2
         //
         verifyException("org.apache.bcel.generic.LDC", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isInterface());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isAnnotation());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isStatic());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isPublic());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      assertNotNull(objectOutputStream0);
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
      
      BCELifier bCELifier0 = new BCELifier(javaClass0, objectOutputStream0);
      assertNotNull(bCELifier0);
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isInterface());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isAnnotation());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isStatic());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isPublic());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      
      JavaClass javaClass1 = classLoaderRepository0.loadClass("org.apache.bcel.util.ClassPath$JrtModules");
      assertNotNull(javaClass1);
      assertFalse(javaClass1.isPrivate());
      assertEquals(52, javaClass1.getMajor());
      assertEquals("org.apache.bcel.util.ClassPath$JrtModules", javaClass1.getClassName());
      assertFalse(javaClass1.isSynthetic());
      assertEquals(19, javaClass1.getSuperclassNameIndex());
      assertFalse(javaClass1.isStatic());
      assertFalse(javaClass1.isAnnotation());
      assertFalse(javaClass1.isNative());
      assertEquals(18, javaClass1.getClassNameIndex());
      assertTrue(javaClass1.isSynchronized());
      assertFalse(javaClass1.isPublic());
      assertEquals("org.apache.bcel.util.ClassPath$AbstractPathEntry", javaClass1.getSuperclassName());
      assertEquals("org.apache.bcel.util", javaClass1.getPackageName());
      assertFalse(javaClass1.isInterface());
      assertEquals(32, javaClass1.getAccessFlags());
      assertEquals("ClassPath.java", javaClass1.getSourceFileName());
      assertFalse(javaClass1.isProtected());
      assertFalse(javaClass1.isVarArgs());
      assertEquals("org.apache.bcel.util.ClassPath$JrtModules", javaClass1.getFileName());
      assertTrue(javaClass1.isSuper());
      assertFalse(javaClass1.isEnum());
      assertFalse(javaClass1.isStrictfp());
      assertFalse(javaClass1.isAbstract());
      assertFalse(javaClass1.isFinal());
      assertTrue(javaClass1.isClass());
      assertEquals(32, javaClass1.getModifiers());
      assertFalse(javaClass1.isVolatile());
      assertEquals((byte)2, javaClass1.getSource());
      assertEquals(0, javaClass1.getMinor());
      assertFalse(javaClass1.isTransient());
      assertNotSame(javaClass1, javaClass0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertFalse(javaClass1.equals((Object)javaClass0));
      
      // Undeclared exception!
      try { 
        bCELifier0.visitJavaClass(javaClass1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantClass cannot be cast to org.apache.bcel.classfile.ConstantCP
         //
         verifyException("org.apache.bcel.generic.InvokeInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Const> class0 = Const.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isNative());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isVolatile());
      assertEquals("Const.java", javaClass0.getSourceFileName());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isPrivate());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertEquals("org.apache.bcel.Const", javaClass0.getFileName());
      assertFalse(javaClass0.isInterface());
      assertEquals(342, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isFinal());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertEquals("org.apache.bcel.Const", javaClass0.getClassName());
      assertFalse(javaClass0.isEnum());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("org.apache.bcel", javaClass0.getPackageName());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("F%(SQa~");
      assertNotNull(mockFileOutputStream0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      assertNotNull(filterOutputStream0);
      
      BCELifier bCELifier0 = new BCELifier(javaClass0, filterOutputStream0);
      assertNotNull(bCELifier0);
      assertFalse(javaClass0.isNative());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isVolatile());
      assertEquals("Const.java", javaClass0.getSourceFileName());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isPrivate());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertEquals("org.apache.bcel.Const", javaClass0.getFileName());
      assertFalse(javaClass0.isInterface());
      assertEquals(342, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isFinal());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertEquals("org.apache.bcel.Const", javaClass0.getClassName());
      assertFalse(javaClass0.isEnum());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("org.apache.bcel", javaClass0.getPackageName());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      
      Attribute[] attributeArray0 = new Attribute[1];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      assertEquals(0, constantPool0.getLength());
      
      Field field0 = new Field((-1451), (byte)3, (byte)2, attributeArray0, constantPool0);
      assertNotNull(field0);
      assertEquals(1, attributeArray0.length);
      assertEquals(0, constantArray0.length);
      assertEquals(0, constantPool0.getLength());
      assertTrue(field0.isPublic());
      assertFalse(field0.isStatic());
      assertFalse(field0.isTransient());
      assertTrue(field0.isInterface());
      assertTrue(field0.isAnnotation());
      assertEquals((-1451), field0.getModifiers());
      assertTrue(field0.isFinal());
      assertTrue(field0.isVolatile());
      assertTrue(field0.isSynthetic());
      assertTrue(field0.isEnum());
      assertFalse(field0.isAbstract());
      assertFalse(field0.isNative());
      assertFalse(field0.isSynchronized());
      assertEquals(3, field0.getNameIndex());
      assertTrue(field0.isProtected());
      assertFalse(field0.isPrivate());
      assertFalse(field0.isVarArgs());
      assertEquals(2, field0.getSignatureIndex());
      assertTrue(field0.isStrictfp());
      assertEquals((-1451), field0.getAccessFlags());
      
      // Undeclared exception!
      try { 
        bCELifier0.visitField(field0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 2. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<ArrayType> class0 = ArrayType.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertNotNull(javaClass0);
      assertEquals("org.apache.bcel.generic.ReferenceType", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isInterface());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isSynthetic());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertTrue(javaClass0.isFinal());
      assertEquals(49, javaClass0.getModifiers());
      assertEquals("org.apache.bcel.generic", javaClass0.getPackageName());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isAnnotation());
      assertEquals("org.apache.bcel.generic.ArrayType", javaClass0.getClassName());
      assertEquals("org.apache.bcel.generic.ArrayType", javaClass0.getFileName());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(16, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isStrictfp());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isEnum());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertEquals("ArrayType.java", javaClass0.getSourceFileName());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isNative());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isVolatile());
      assertEquals(25, javaClass0.getSuperclassNameIndex());
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      BCELifier bCELifier0 = new BCELifier(javaClass0, pipedOutputStream0);
      assertNotNull(bCELifier0);
      assertEquals("org.apache.bcel.generic.ReferenceType", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isInterface());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isSynthetic());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertTrue(javaClass0.isFinal());
      assertEquals(49, javaClass0.getModifiers());
      assertEquals("org.apache.bcel.generic", javaClass0.getPackageName());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isAnnotation());
      assertEquals("org.apache.bcel.generic.ArrayType", javaClass0.getClassName());
      assertEquals("org.apache.bcel.generic.ArrayType", javaClass0.getFileName());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(16, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isStrictfp());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isEnum());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertEquals("ArrayType.java", javaClass0.getSourceFileName());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isNative());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isVolatile());
      assertEquals(25, javaClass0.getSuperclassNameIndex());
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      
      Attribute[] attributeArray0 = new Attribute[0];
      Field field0 = new Field(1649, 0, (byte)2, attributeArray0, (ConstantPool) null);
      assertNotNull(field0);
      assertEquals(0, attributeArray0.length);
      assertFalse(field0.isAnnotation());
      assertTrue(field0.isPublic());
      assertFalse(field0.isStatic());
      assertEquals(0, field0.getNameIndex());
      assertEquals(1649, field0.getModifiers());
      assertFalse(field0.isVarArgs());
      assertTrue(field0.isSynchronized());
      assertTrue(field0.isAbstract());
      assertEquals(1649, field0.getAccessFlags());
      assertEquals(2, field0.getSignatureIndex());
      assertFalse(field0.isNative());
      assertFalse(field0.isSynthetic());
      assertFalse(field0.isEnum());
      assertFalse(field0.isStrictfp());
      assertTrue(field0.isFinal());
      assertFalse(field0.isPrivate());
      assertTrue(field0.isVolatile());
      assertFalse(field0.isProtected());
      assertTrue(field0.isInterface());
      assertFalse(field0.isTransient());
      
      // Undeclared exception!
      try { 
        bCELifier0.visitField(field0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JavaClass javaClass0 = BCELifier.getJavaClass("java.io.DataOutputStream");
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isInterface());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isClass());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.io.DataOutputStream", javaClass0.getClassName());
      assertEquals("java.io.DataOutputStream", javaClass0.getFileName());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.io.FilterOutputStream", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isFinal());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(31, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isStatic());
      assertEquals("DataOutputStream.java", javaClass0.getSourceFileName());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertEquals("java.io", javaClass0.getPackageName());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isAbstract());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(29, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isVolatile());
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      
      MockFile mockFile0 = new MockFile("java.io.DataOutputStream", "java.io.DataOutputStream");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      BCELifier bCELifier0 = new BCELifier(javaClass0, mockPrintStream0);
      assertNotNull(bCELifier0);
      assertFalse(javaClass0.isInterface());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isClass());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.io.DataOutputStream", javaClass0.getClassName());
      assertEquals("java.io.DataOutputStream", javaClass0.getFileName());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.io.FilterOutputStream", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isFinal());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(31, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isStatic());
      assertEquals("DataOutputStream.java", javaClass0.getSourceFileName());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertEquals("java.io", javaClass0.getPackageName());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isAbstract());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(29, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isVolatile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/bcel-6.5.0-src/java.io.DataOutputStream/java.io.DataOutputStream", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/bcel-6.5.0-src/java.io.DataOutputStream", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("java.io.DataOutputStream", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      
      bCELifier0.start();
      assertFalse(javaClass0.isInterface());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isClass());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.io.DataOutputStream", javaClass0.getClassName());
      assertEquals("java.io.DataOutputStream", javaClass0.getFileName());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.io.FilterOutputStream", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isFinal());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(31, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isStatic());
      assertEquals("DataOutputStream.java", javaClass0.getSourceFileName());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertEquals("java.io", javaClass0.getPackageName());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isAbstract());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(29, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isVolatile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/bcel-6.5.0-src/java.io.DataOutputStream/java.io.DataOutputStream", mockFile0.toString());
      assertEquals(47732L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/bcel-6.5.0-src/java.io.DataOutputStream", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("java.io.DataOutputStream", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ReturnaddressType returnaddressType0 = ReturnaddressType.NO_TARGET;
      assertNotNull(returnaddressType0);
      assertEquals(1, returnaddressType0.getSize());
      assertEquals("<return address>", returnaddressType0.getSignature());
      assertEquals((byte)16, returnaddressType0.getType());
      
      // Undeclared exception!
      try { 
        BCELifier.printType(returnaddressType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <return address>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        BCELifier.printType((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        BCELifier.printType("Type.BYTE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type variable signature: Type.BYTE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        BCELifier.printType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BCELifier.FLAGS bCELifier_FLAGS0 = BCELifier.FLAGS.METHOD;
      // Undeclared exception!
      try { 
        BCELifier.printFlags(65536, bCELifier_FLAGS0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        BCELifier.printFlags(65536);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Type[] typeArray0 = new Type[2];
      BasicType basicType0 = Type.FLOAT;
      assertNotNull(basicType0);
      assertEquals(1, basicType0.getSize());
      assertEquals("F", basicType0.getSignature());
      assertEquals((byte)6, basicType0.getType());
      
      typeArray0[0] = (Type) basicType0;
      ReferenceType referenceType0 = Type.NULL;
      assertNotNull(referenceType0);
      
      typeArray0[1] = (Type) referenceType0;
      // Undeclared exception!
      try { 
        BCELifier.printArgumentTypes(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <null object>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      // Undeclared exception!
      try { 
        BCELifier.printArgumentTypes(typeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.bcel.classfile.Module";
      BCELifier.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.bcel.classfile.ConstantPool";
      BCELifier.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      try { 
        BCELifier.main((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.BCELifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "    _cg.setMajor(";
      try { 
        BCELifier.main(stringArray0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Exception while looking for class     _cg.setMajor(: org.evosuite.runtime.mock.java.lang.MockThrowable: Couldn't find:     _cg/setMajor(.class
         //
         verifyException("org.apache.bcel.util.AbstractClassPathRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        BCELifier.getJavaClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid class name 
         //
         verifyException("org.apache.bcel.util.AbstractClassPathRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      try { 
        BCELifier.getJavaClass("Const.ACC_PUBLIC | Const.ACC_PRIVATE | Const.ACC_PROTECTED | Const.ACC_SUPER | Const.ACC_VOLATILE");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Exception while looking for class Const.ACC_PUBLIC | Const.ACC_PRIVATE | Const.ACC_PROTECTED | Const.ACC_SUPER | Const.ACC_VOLATILE: org.evosuite.runtime.mock.java.lang.MockThrowable: Couldn't find: Const/ACC_PUBLIC | Const/ACC_PRIVATE | Const/ACC_PROTECTED | Const/ACC_SUPER | Const/ACC_VOLATILE.class
         //
         verifyException("org.apache.bcel.util.AbstractClassPathRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      BCELifier bCELifier0 = null;
      try {
        bCELifier0 = new BCELifier((JavaClass) null, pipedOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.BCELifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BCELifier.FLAGS bCELifier_FLAGS0 = BCELifier.FLAGS.CLASS;
      String string0 = BCELifier.printFlags(2259, bCELifier_FLAGS0);
      assertNotNull(string0);
      assertEquals("Const.ACC_PUBLIC | Const.ACC_PRIVATE | Const.ACC_FINAL | Const.ACC_VOLATILE | Const.ACC_TRANSIENT | Const.ACC_STRICTFP", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BCELifier.FLAGS bCELifier_FLAGS0 = BCELifier.FLAGS.CLASS;
      String string0 = BCELifier.printFlags(103, bCELifier_FLAGS0);
      assertNotNull(string0);
      assertEquals("Const.ACC_PUBLIC | Const.ACC_PRIVATE | Const.ACC_PROTECTED | Const.ACC_SUPER | Const.ACC_VOLATILE", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BCELifier.FLAGS bCELifier_FLAGS0 = BCELifier.FLAGS.UNKNOWN;
      String string0 = BCELifier.printFlags(0, bCELifier_FLAGS0);
      assertNotNull(string0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JavaClass javaClass0 = BCELifier.getJavaClass("java.lang.Object");
      assertNotNull(javaClass0);
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isClass());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStatic());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isTransient());
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      BCELifier bCELifier0 = new BCELifier(javaClass0, byteArrayOutputStream0);
      assertNotNull(bCELifier0);
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isClass());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStatic());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isTransient());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      
      // Undeclared exception!
      try { 
        bCELifier0.visitMethod((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[0];
      BCELifier.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[1];
      try { 
        BCELifier.main(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid class name null
         //
         verifyException("org.apache.bcel.util.AbstractClassPathRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isFinal());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertTrue(javaClass0.isClass());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isProtected());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isNative());
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, (byte)3);
      assertNotNull(bufferedOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      assertNotNull(mockPrintStream0);
      
      BCELifier bCELifier0 = new BCELifier(javaClass0, mockPrintStream0);
      assertNotNull(bCELifier0);
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isFinal());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertTrue(javaClass0.isClass());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isProtected());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isNative());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      
      // Undeclared exception!
      bCELifier0.visitJavaClass(javaClass0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JavaClass javaClass0 = BCELifier.getJavaClass("java.io.DataOutputStream");
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isClass());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isVolatile());
      assertEquals(31, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isNative());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("DataOutputStream.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isTransient());
      assertEquals("java.io.DataOutputStream", javaClass0.getClassName());
      assertEquals(29, javaClass0.getClassNameIndex());
      assertEquals("java.io.FilterOutputStream", javaClass0.getSuperclassName());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals("java.io", javaClass0.getPackageName());
      assertEquals("java.io.DataOutputStream", javaClass0.getFileName());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isFinal());
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      
      MockFile mockFile0 = new MockFile("java.io.DataOutputStream");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      BCELifier bCELifier0 = new BCELifier(javaClass0, mockPrintStream0);
      assertNotNull(bCELifier0);
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isClass());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isVolatile());
      assertEquals(31, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isNative());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("DataOutputStream.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isTransient());
      assertEquals("java.io.DataOutputStream", javaClass0.getClassName());
      assertEquals(29, javaClass0.getClassNameIndex());
      assertEquals("java.io.FilterOutputStream", javaClass0.getSuperclassName());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals("java.io", javaClass0.getPackageName());
      assertEquals("java.io.DataOutputStream", javaClass0.getFileName());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isFinal());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals("java.io.DataOutputStream", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("java.io.DataOutputStream", mockFile0.toString());
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      
      bCELifier0.visitJavaClass(javaClass0);
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isClass());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isVolatile());
      assertEquals(31, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isNative());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("DataOutputStream.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isTransient());
      assertEquals("java.io.DataOutputStream", javaClass0.getClassName());
      assertEquals(29, javaClass0.getClassNameIndex());
      assertEquals("java.io.FilterOutputStream", javaClass0.getSuperclassName());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals("java.io", javaClass0.getPackageName());
      assertEquals("java.io.DataOutputStream", javaClass0.getFileName());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isFinal());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals("java.io.DataOutputStream", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(32768L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("java.io.DataOutputStream", mockFile0.toString());
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BCELifier.FLAGS bCELifier_FLAGS0 = BCELifier.FLAGS.METHOD;
      String string0 = BCELifier.printFlags((-1), bCELifier_FLAGS0);
      assertNotNull(string0);
      assertEquals("Const.ACC_PUBLIC | Const.ACC_PRIVATE | Const.ACC_PROTECTED | Const.ACC_STATIC | Const.ACC_FINAL | Const.ACC_SYNCHRONIZED | Const.ACC_BRIDGE | Const.ACC_VARARGS | Const.ACC_NATIVE | Const.ACC_INTERFACE | Const.ACC_ABSTRACT | Const.ACC_STRICTFP | Const.ACC_SYNTHETIC | Const.ACC_ANNOTATION | Const.ACC_ENUM | Const.ACC_MODULE", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      JavaClass javaClass0 = classLoaderRepository0.loadClass("java.nio.charset.Charset");
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isSuper());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.nio.charset.Charset", javaClass0.getClassName());
      assertFalse(javaClass0.isInterface());
      assertEquals(1057, javaClass0.getModifiers());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(1057, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isFinal());
      assertTrue(javaClass0.isAbstract());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertEquals("java.nio.charset", javaClass0.getPackageName());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("java.nio.charset.Charset", javaClass0.getFileName());
      assertEquals("Charset.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isPrivate());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(21, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isTransient());
      assertEquals(29, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isPublic());
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("java.nio.charset.Charset");
      assertNotNull(mockFileOutputStream0);
      
      BCELifier bCELifier0 = new BCELifier(javaClass0, mockFileOutputStream0);
      assertNotNull(bCELifier0);
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isSuper());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.nio.charset.Charset", javaClass0.getClassName());
      assertFalse(javaClass0.isInterface());
      assertEquals(1057, javaClass0.getModifiers());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(1057, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isFinal());
      assertTrue(javaClass0.isAbstract());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertEquals("java.nio.charset", javaClass0.getPackageName());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("java.nio.charset.Charset", javaClass0.getFileName());
      assertEquals("Charset.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isPrivate());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(21, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isTransient());
      assertEquals(29, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isPublic());
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      
      bCELifier0.visitJavaClass(javaClass0);
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isSuper());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.nio.charset.Charset", javaClass0.getClassName());
      assertFalse(javaClass0.isInterface());
      assertEquals(1057, javaClass0.getModifiers());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(1057, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isFinal());
      assertTrue(javaClass0.isAbstract());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertEquals("java.nio.charset", javaClass0.getPackageName());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("java.nio.charset.Charset", javaClass0.getFileName());
      assertEquals("Charset.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isPrivate());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(21, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isTransient());
      assertEquals(29, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isPublic());
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = BCELifier.printFlags(0);
      assertNotNull(string0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertNotNull(javaClass0);
      assertFalse(javaClass0.isPrivate());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isNative());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isVolatile());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isVarArgs());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isFinal());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isStrictfp());
      assertEquals(52, javaClass0.getMajor());
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)3);
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      assertNotNull(objectOutputStream0);
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      
      BCELifier bCELifier0 = new BCELifier(javaClass0, objectOutputStream0);
      assertNotNull(bCELifier0);
      assertFalse(javaClass0.isPrivate());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isNative());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isVolatile());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isVarArgs());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isFinal());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isStrictfp());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      
      bCELifier0.visitJavaClass(javaClass0);
      assertFalse(javaClass0.isPrivate());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isNative());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isVolatile());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isVarArgs());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isFinal());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isStrictfp());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Const> class0 = Const.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("F%(SQa~");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      BCELifier bCELifier0 = new BCELifier(javaClass0, filterOutputStream0);
      // Undeclared exception!
      bCELifier0.start();
  }
}
