/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:42:03 GMT 2022
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.Visitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantString_ESTest extends ConstantString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(0);
      int int0 = constantString0.getStringIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantString constantString0 = new ConstantString((-253));
      int int0 = constantString0.getStringIndex();
      assertEquals((-253), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(2781);
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        constantString0.getConstantValue(constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 2781. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(8);
      // Undeclared exception!
      try { 
        constantString0.getBytes((ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantString constantString0 = new ConstantString((-1094));
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        constantString0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        constantString0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantString constantString0 = null;
      try {
        constantString0 = new ConstantString((ConstantString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ConstantString constantString0 = null;
      try {
        constantString0 = new ConstantString(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ConstantString constantString0 = null;
      try {
        constantString0 = new ConstantString(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantString constantString0 = null;
      try {
        constantString0 = new ConstantString(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(2781);
      int int0 = constantString0.getStringIndex();
      assertEquals(2781, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(174);
      // Undeclared exception!
      try { 
        constantString0.getConstantValue((ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantString", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, pushbackInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ConstantString constantString0 = new ConstantString(dataInputStream0);
      // Undeclared exception!
      try { 
        constantString0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantString constantString0 = new ConstantString((-183));
      MockFile mockFile0 = new MockFile("?I{WQ9=TPS", "CONSTANT_String[8](stringIndex = -183)");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
      constantString0.dump(dataOutputStream0);
      assertEquals((-183), constantString0.getStringIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantString constantString0 = new ConstantString((-183));
      String string0 = constantString0.toString();
      assertEquals("CONSTANT_String[8](stringIndex = -183)", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantString constantString0 = new ConstantString((-183));
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        constantString0.getBytes(constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -183. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantString constantString0 = new ConstantString((-183));
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantString0.accept(emptyVisitor0);
      assertEquals((-183), constantString0.getStringIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantString constantString0 = new ConstantString((-183));
      constantString0.setStringIndex(16);
      assertEquals(16, constantString0.getStringIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantString constantString0 = new ConstantString((-1094));
      ConstantString constantString1 = new ConstantString(constantString0);
      assertEquals((-1094), constantString0.getStringIndex());
      assertTrue(constantString1.equals((Object)constantString0));
  }
}
