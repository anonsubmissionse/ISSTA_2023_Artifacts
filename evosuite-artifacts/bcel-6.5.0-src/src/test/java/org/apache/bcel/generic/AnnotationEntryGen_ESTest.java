/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 21:24:47 GMT 2022
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.lang.reflect.Array;
import java.util.LinkedList;
import java.util.List;
import org.apache.bcel.classfile.AnnotationEntry;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.ClassElementValue;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ElementValuePair;
import org.apache.bcel.generic.AnnotationElementValueGen;
import org.apache.bcel.generic.AnnotationEntryGen;
import org.apache.bcel.generic.ArrayElementValueGen;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.ElementValuePairGen;
import org.apache.bcel.generic.EnumElementValueGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.SimpleElementValueGen;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AnnotationEntryGen_ESTest extends AnnotationEntryGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LinkedList<AnnotationEntryGen> linkedList0 = new LinkedList<AnnotationEntryGen>();
      ObjectType objectType0 = new ObjectType("7]XXPB[#1`e");
      LinkedList<ElementValuePairGen> linkedList1 = new LinkedList<ElementValuePairGen>();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList1, false, constantPoolGen0);
      linkedList0.add(annotationEntryGen0);
      List<AnnotationEntryGen>[] listArray0 = (List<AnnotationEntryGen>[]) Array.newInstance(List.class, 3);
      listArray0[1] = (List<AnnotationEntryGen>) linkedList0;
      AnnotationEntryGen.getParameterAnnotationAttributes(constantPoolGen0, listArray0);
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      List<AnnotationEntryGen>[] listArray0 = (List<AnnotationEntryGen>[]) Array.newInstance(List.class, 1);
      LinkedList<AnnotationEntryGen> linkedList0 = new LinkedList<AnnotationEntryGen>();
      ObjectType objectType0 = new ObjectType("");
      LinkedList<ElementValuePairGen> linkedList1 = new LinkedList<ElementValuePairGen>();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList1, true, constantPoolGen0);
      linkedList0.add(annotationEntryGen0);
      linkedList0.add(annotationEntryGen0);
      listArray0[0] = (List<AnnotationEntryGen>) linkedList0;
      AnnotationEntryGen.getParameterAnnotationAttributes(constantPoolGen0, listArray0);
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      List<AnnotationEntryGen>[] listArray0 = (List<AnnotationEntryGen>[]) Array.newInstance(List.class, 5);
      LinkedList<AnnotationEntryGen> linkedList0 = new LinkedList<AnnotationEntryGen>();
      listArray0[1] = (List<AnnotationEntryGen>) linkedList0;
      Attribute[] attributeArray0 = AnnotationEntryGen.getParameterAnnotationAttributes(constantPoolGen0, listArray0);
      assertEquals(0, attributeArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte) (-116);
      byteArray0[5] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        AnnotationEntryGen.read(byteSequence0, constantPoolGen0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 0
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)89;
      byteArray0[6] = (byte)115;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      try { 
        AnnotationEntryGen.read(byteSequence0, constantPoolGen0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ObjectType objectType0 = Type.STRINGBUFFER;
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, false, constantPoolGen0);
      AnnotationEntryGen[] annotationEntryGenArray0 = new AnnotationEntryGen[4];
      annotationEntryGenArray0[0] = annotationEntryGen0;
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen("@*7+H\"'()", arrayElementValueGen0, constantPoolGen0);
      linkedList0.add(elementValuePairGen0);
      annotationEntryGenArray0[1] = annotationEntryGen0;
      annotationEntryGenArray0[2] = annotationEntryGen0;
      annotationEntryGenArray0[3] = annotationEntryGen0;
      AnnotationEntryGen.getAnnotationAttributes(constantPoolGen0, annotationEntryGenArray0);
      assertEquals(4, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      AnnotationEntryGen annotationEntryGen0 = AnnotationEntryGen.read(byteSequence0, constantPoolGen0, false);
      assertFalse(annotationEntryGen0.isRuntimeVisible());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ObjectType objectType0 = Type.OBJECT;
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, false, constantPoolGen0);
      boolean boolean0 = annotationEntryGen0.isRuntimeVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("*,45eU$Q#-lQ:>`d*8");
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, (List<ElementValuePairGen>) null, false, constantPoolGen0);
      annotationEntryGen0.getValues();
      assertFalse(annotationEntryGen0.isRuntimeVisible());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      AnnotationEntry annotationEntry0 = AnnotationEntry.read(byteSequence0, constantPool0, true);
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(annotationEntry0, constantPoolGen0, false);
      List<ElementValuePairGen> list0 = annotationEntryGen0.getValues();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("-yu=Q1(hbc)]^%SH\"P8");
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, (List<ElementValuePairGen>) null, true, constantPoolGen0);
      annotationEntryGen0.addElementNameValuePair((ElementValuePairGen) null);
      annotationEntryGen0.getValues();
      assertTrue(annotationEntryGen0.isRuntimeVisible());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      AnnotationEntryGen annotationEntryGen0 = AnnotationEntryGen.read(byteSequence0, constantPoolGen0, true);
      int int0 = annotationEntryGen0.getTypeIndex();
      assertTrue(annotationEntryGen0.isRuntimeVisible());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObjectType objectType0 = Type.OBJECT;
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, true, constantPoolGen0);
      AnnotationEntry annotationEntry0 = annotationEntryGen0.getAnnotation();
      assertTrue(annotationEntry0.isRuntimeVisible());
      assertEquals(1, annotationEntry0.getTypeIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, (List<ElementValuePairGen>) null, false, constantPoolGen0);
      // Undeclared exception!
      try { 
        annotationEntryGen0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.AnnotationEntryGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ObjectType objectType0 = Type.STRINGBUFFER;
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(2699, constantPoolGen0, (byte) (-65));
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen("{d/N2IPN;ibM<E3D~j=", simpleElementValueGen0, constantPoolGen0);
      linkedList0.add(elementValuePairGen0);
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, false, constantPoolGen0);
      // Undeclared exception!
      try { 
        annotationEntryGen0.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // SimpleElementValueGen class does not know how to stringify type 2699
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = new ConstantString(1);
      constantArray0[0] = (Constant) constantString0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      AnnotationEntryGen annotationEntryGen0 = AnnotationEntryGen.read(byteSequence0, constantPoolGen0, true);
      // Undeclared exception!
      try { 
        annotationEntryGen0.toString();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantString cannot be cast to org.apache.bcel.classfile.ConstantUtf8
         //
         verifyException("org.apache.bcel.generic.AnnotationEntryGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[2] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      byteSequence0.readShort();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      AnnotationEntryGen annotationEntryGen0 = AnnotationEntryGen.read(byteSequence0, constantPoolGen0, true);
      // Undeclared exception!
      try { 
        annotationEntryGen0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17664
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ObjectType objectType0 = Type.STRINGBUFFER;
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, false, constantPoolGen0);
      AnnotationElementValueGen annotationElementValueGen0 = new AnnotationElementValueGen(annotationEntryGen0, constantPoolGen0);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen("ixY{,]z\"", annotationElementValueGen0, constantPoolGen0);
      annotationEntryGen0.addElementNameValuePair(elementValuePairGen0);
      // Undeclared exception!
      try { 
        annotationEntryGen0.toShortString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet
         //
         verifyException("org.apache.bcel.generic.AnnotationElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("*,45eU$Q#-lQ:>`d*8");
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, (List<ElementValuePairGen>) null, false, constantPoolGen0);
      // Undeclared exception!
      try { 
        annotationEntryGen0.toShortString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.AnnotationEntryGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ObjectType objectType0 = Type.STRINGBUFFER;
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, false, constantPoolGen0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(654, constantPoolGen0, (long) 654);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen(";}UC]N vug*i@/Z>", simpleElementValueGen0, constantPoolGen0);
      linkedList0.add(elementValuePairGen0);
      // Undeclared exception!
      try { 
        annotationEntryGen0.toShortString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // SimpleElementValueGen class does not know how to stringify type 654
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("*,45eU$Q#-lQ:>`d*8");
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, (List<ElementValuePairGen>) null, false, constantPoolGen0);
      AnnotationElementValueGen annotationElementValueGen0 = new AnnotationElementValueGen(annotationEntryGen0, constantPoolGen0);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen((-1772), annotationElementValueGen0, constantPoolGen0);
      annotationEntryGen0.addElementNameValuePair(elementValuePairGen0);
      // Undeclared exception!
      try { 
        annotationEntryGen0.toShortString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1772
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        AnnotationEntryGen.read((DataInput) null, constantPoolGen0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.AnnotationEntryGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-17), 1382);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      // Undeclared exception!
      try { 
        AnnotationEntryGen.read(dataInputStream0, constantPoolGen0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PipedInputStream pipedInputStream0 = new PipedInputStream(14);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 14);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      try { 
        AnnotationEntryGen.read(dataInputStream0, constantPoolGen0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      AnnotationEntryGen annotationEntryGen0 = AnnotationEntryGen.read(byteSequence0, constantPoolGen0, true);
      // Undeclared exception!
      try { 
        annotationEntryGen0.getTypeSignature();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.AnnotationEntryGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString((byte)32);
      constantArray0[0] = (Constant) constantString0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      AnnotationEntryGen annotationEntryGen0 = AnnotationEntryGen.read(byteSequence0, constantPoolGen0, true);
      // Undeclared exception!
      try { 
        annotationEntryGen0.getTypeSignature();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantString cannot be cast to org.apache.bcel.classfile.ConstantUtf8
         //
         verifyException("org.apache.bcel.generic.AnnotationEntryGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[2] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      byteSequence0.readShort();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      AnnotationEntryGen annotationEntryGen0 = AnnotationEntryGen.read(byteSequence0, constantPoolGen0, true);
      // Undeclared exception!
      try { 
        annotationEntryGen0.getTypeSignature();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17664
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[2] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      byteSequence0.readShort();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      AnnotationEntryGen annotationEntryGen0 = AnnotationEntryGen.read(byteSequence0, constantPoolGen0, true);
      // Undeclared exception!
      try { 
        annotationEntryGen0.getTypeName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17664
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      List<AnnotationEntryGen>[] listArray0 = (List<AnnotationEntryGen>[]) Array.newInstance(List.class, 1);
      LinkedList<AnnotationEntryGen> linkedList0 = new LinkedList<AnnotationEntryGen>();
      linkedList0.offerLast((AnnotationEntryGen) null);
      listArray0[0] = (List<AnnotationEntryGen>) linkedList0;
      // Undeclared exception!
      try { 
        AnnotationEntryGen.getParameterAnnotationAttributes(constantPoolGen0, listArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.AnnotationEntryGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      List<AnnotationEntryGen>[] listArray0 = (List<AnnotationEntryGen>[]) Array.newInstance(List.class, 4);
      LinkedList<AnnotationEntryGen> linkedList0 = new LinkedList<AnnotationEntryGen>();
      ObjectType objectType0 = Type.STRINGBUFFER;
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, (List<ElementValuePairGen>) null, true, constantPoolGen0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(32, constantPoolGen0, (double) 32);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen(2, simpleElementValueGen0, constantPoolGen0);
      annotationEntryGen0.addElementNameValuePair(elementValuePairGen0);
      linkedList0.add(annotationEntryGen0);
      listArray0[0] = (List<AnnotationEntryGen>) linkedList0;
      // Undeclared exception!
      try { 
        AnnotationEntryGen.getParameterAnnotationAttributes(constantPoolGen0, listArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // SimpleElementValueGen doesnt know how to write out type 32
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("UJ<'C C");
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, true, constantPoolGen0);
      AnnotationEntryGen[] annotationEntryGenArray0 = new AnnotationEntryGen[4];
      annotationEntryGenArray0[0] = annotationEntryGen0;
      annotationEntryGenArray0[1] = annotationEntryGen0;
      annotationEntryGenArray0[2] = annotationEntryGen0;
      annotationEntryGenArray0[3] = annotationEntryGen0;
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen((-77), constantPoolGen0, true);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen((-77), simpleElementValueGen0, constantPoolGen0);
      annotationEntryGen0.addElementNameValuePair(elementValuePairGen0);
      // Undeclared exception!
      try { 
        AnnotationEntryGen.getAnnotationAttributes(constantPoolGen0, annotationEntryGenArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // SimpleElementValueGen doesnt know how to write out type -77
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ObjectType objectType0 = Type.OBJECT;
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, true, constantPoolGen0);
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen((-2295), (-2295), constantPoolGen0);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen(1, enumElementValueGen0, constantPoolGen0);
      annotationEntryGen0.addElementNameValuePair(elementValuePairGen0);
      // Undeclared exception!
      try { 
        annotationEntryGen0.getAnnotation();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2295
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ObjectType objectType0 = Type.STRINGBUFFER;
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, false, constantPoolGen0);
      linkedList0.add((ElementValuePairGen) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream(14);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        annotationEntryGen0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.AnnotationEntryGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.STRINGBUFFER;
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, (List<ElementValuePairGen>) null, true, constantPoolGen0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        annotationEntryGen0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      AnnotationEntryGen annotationEntryGen0 = null;
      try {
        annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, false, (ConstantPoolGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.AnnotationEntryGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.CLASS;
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, (List<ElementValuePairGen>) null, false, constantPoolGen0);
      assertFalse(annotationEntryGen0.isRuntimeVisible());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      AnnotationEntry annotationEntry0 = new AnnotationEntry(0, constantPool0, true);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      AnnotationEntryGen annotationEntryGen0 = null;
      try {
        annotationEntryGen0 = new AnnotationEntryGen(annotationEntry0, constantPoolGen0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      AnnotationEntry annotationEntry0 = AnnotationEntry.read(byteSequence0, (ConstantPool) null, false);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassElementValue classElementValue0 = new ClassElementValue((byte) (-3), (byte) (-3), constantPool0);
      ElementValuePair elementValuePair0 = new ElementValuePair((byte) (-3), classElementValue0, (ConstantPool) null);
      annotationEntry0.addElementNameValuePair(elementValuePair0);
      AnnotationEntryGen annotationEntryGen0 = null;
      try {
        annotationEntryGen0 = new AnnotationEntryGen(annotationEntry0, constantPoolGen0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (-3)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("UkJ<'C 5");
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, false, constantPoolGen0);
      MockFile mockFile0 = new MockFile("RuntimeVisibleAnnotations", "(?DEJUj_8G|y");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      annotationEntryGen0.dump(dataOutputStream0);
      assertFalse(annotationEntryGen0.isRuntimeVisible());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.OBJECT;
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, false, constantPoolGen0);
      annotationEntryGen0.getTypeName();
      assertFalse(annotationEntryGen0.isRuntimeVisible());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("UkJ<'C 5");
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, false, constantPoolGen0);
      annotationEntryGen0.getTypeSignature();
      assertFalse(annotationEntryGen0.isRuntimeVisible());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      ObjectType objectType0 = Type.OBJECT;
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, true, constantPoolGen0);
      boolean boolean0 = annotationEntryGen0.isRuntimeVisible();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      List<AnnotationEntryGen>[] listArray0 = (List<AnnotationEntryGen>[]) Array.newInstance(List.class, 1);
      LinkedList<AnnotationEntryGen> linkedList0 = new LinkedList<AnnotationEntryGen>();
      ObjectType objectType0 = Type.OBJECT;
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, (List<ElementValuePairGen>) null, false, constantPoolGen0);
      linkedList0.add(annotationEntryGen0);
      listArray0[0] = (List<AnnotationEntryGen>) linkedList0;
      // Undeclared exception!
      try { 
        AnnotationEntryGen.getParameterAnnotationAttributes(constantPoolGen0, listArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.AnnotationEntryGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      List<AnnotationEntryGen>[] listArray0 = (List<AnnotationEntryGen>[]) Array.newInstance(List.class, 10);
      LinkedList<AnnotationEntryGen> linkedList0 = new LinkedList<AnnotationEntryGen>();
      ObjectType objectType0 = Type.THROWABLE;
      LinkedList<ElementValuePairGen> linkedList1 = new LinkedList<ElementValuePairGen>();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList1, false, constantPoolGen0);
      linkedList0.add(annotationEntryGen0);
      AnnotationEntryGen annotationEntryGen1 = new AnnotationEntryGen(objectType0, linkedList1, true, constantPoolGen0);
      linkedList0.add(annotationEntryGen1);
      listArray0[0] = (List<AnnotationEntryGen>) linkedList0;
      AnnotationEntryGen.getParameterAnnotationAttributes(constantPoolGen0, listArray0);
      assertEquals(4, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ObjectType objectType0 = Type.STRINGBUFFER;
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, false, constantPoolGen0);
      AnnotationEntryGen[] annotationEntryGenArray0 = new AnnotationEntryGen[4];
      annotationEntryGenArray0[0] = annotationEntryGen0;
      annotationEntryGenArray0[1] = annotationEntryGen0;
      annotationEntryGenArray0[2] = annotationEntryGen0;
      annotationEntryGenArray0[3] = annotationEntryGen0;
      linkedList0.add((ElementValuePairGen) null);
      // Undeclared exception!
      try { 
        AnnotationEntryGen.getAnnotationAttributes(constantPoolGen0, annotationEntryGenArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.AnnotationEntryGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ObjectType objectType0 = Type.STRINGBUFFER;
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, false, constantPoolGen0);
      AnnotationEntryGen[] annotationEntryGenArray0 = new AnnotationEntryGen[4];
      annotationEntryGenArray0[0] = annotationEntryGen0;
      // Undeclared exception!
      try { 
        AnnotationEntryGen.getAnnotationAttributes(constantPoolGen0, annotationEntryGenArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.AnnotationEntryGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AnnotationEntryGen[] annotationEntryGenArray0 = new AnnotationEntryGen[0];
      Attribute[] attributeArray0 = AnnotationEntryGen.getAnnotationAttributes(constantPoolGen0, annotationEntryGenArray0);
      assertEquals(0, attributeArray0.length);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ObjectType objectType0 = Type.STRINGBUFFER;
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, false, constantPoolGen0);
      linkedList0.add((ElementValuePairGen) null);
      annotationEntryGen0.addElementNameValuePair((ElementValuePairGen) null);
      String string0 = annotationEntryGen0.toShortString();
      assertEquals(2, linkedList0.size());
      assertEquals("@Ljava/lang/StringBuffer;(null,null)", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ObjectType objectType0 = Type.STRINGBUFFER;
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, false, constantPoolGen0);
      linkedList0.add((ElementValuePairGen) null);
      annotationEntryGen0.addElementNameValuePair((ElementValuePairGen) null);
      String string0 = annotationEntryGen0.toString();
      assertEquals(2, linkedList0.size());
      assertEquals("AnnotationGen:[Ljava/lang/StringBuffer; #2 {null,null}]", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("UkJ<'C 5");
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, true, constantPoolGen0);
      MockFile mockFile0 = new MockFile("AnnotationGen:[LUkJ<'C 5; #0 {}]", "(?DEJUj_8G|y");
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(81, constantPoolGen0, true);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen("UkJ<'C 5", simpleElementValueGen0, constantPoolGen0);
      linkedList0.add(elementValuePairGen0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 1786);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      // Undeclared exception!
      try { 
        annotationEntryGen0.dump(dataOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // SimpleElementValueGen doesnt know how to write out type 81
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ObjectType objectType0 = Type.OBJECT;
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, true, constantPoolGen0);
      AnnotationEntryGen[] annotationEntryGenArray0 = new AnnotationEntryGen[3];
      annotationEntryGenArray0[0] = annotationEntryGen0;
      annotationEntryGenArray0[1] = annotationEntryGen0;
      annotationEntryGenArray0[2] = annotationEntryGen0;
      AnnotationEntryGen.getAnnotationAttributes(constantPoolGen0, annotationEntryGenArray0);
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.OBJECT;
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, (List<ElementValuePairGen>) null, true, constantPoolGen0);
      annotationEntryGen0.addElementNameValuePair((ElementValuePairGen) null);
      // Undeclared exception!
      try { 
        annotationEntryGen0.getAnnotation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.AnnotationEntryGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      AnnotationEntry annotationEntry0 = AnnotationEntry.read(byteSequence0, constantPool0, false);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(annotationEntry0, constantPoolGen0, false);
      AnnotationEntry annotationEntry1 = annotationEntryGen0.getAnnotation();
      assertEquals(0, annotationEntry1.getTypeIndex());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      AnnotationEntry annotationEntry0 = AnnotationEntry.read(byteSequence0, constantPool0, false);
      annotationEntry0.addElementNameValuePair((ElementValuePair) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AnnotationEntryGen annotationEntryGen0 = null;
      try {
        annotationEntryGen0 = new AnnotationEntryGen(annotationEntry0, constantPoolGen0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ElementValuePairGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ObjectType objectType0 = Type.OBJECT;
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, true, constantPoolGen0);
      int int0 = annotationEntryGen0.getTypeIndex();
      assertEquals(1, int0);
      assertTrue(annotationEntryGen0.isRuntimeVisible());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      AnnotationEntryGen annotationEntryGen0 = AnnotationEntryGen.read(byteSequence0, constantPoolGen0, true);
      // Undeclared exception!
      try { 
        annotationEntryGen0.getTypeName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.AnnotationEntryGen", e);
      }
  }
}
