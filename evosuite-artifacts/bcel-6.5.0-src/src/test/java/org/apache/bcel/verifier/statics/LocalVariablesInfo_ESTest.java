/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:24:05 GMT 2022
 */

package org.apache.bcel.verifier.statics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.DCMPL;
import org.apache.bcel.generic.LCMP;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.RET;
import org.apache.bcel.generic.Type;
import org.apache.bcel.verifier.statics.LocalVariableInfo;
import org.apache.bcel.verifier.statics.LocalVariablesInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocalVariablesInfo_ESTest extends LocalVariablesInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      assertNotNull(localVariablesInfo0);
      
      int int1 = 1;
      String string0 = "Slot number for local variable information out of range.";
      LCMP lCMP0 = new LCMP();
      assertNotNull(lCMP0);
      assertEquals("lcmp", lCMP0.getName());
      assertEquals((short)148, lCMP0.getOpcode());
      assertEquals(1, lCMP0.getLength());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      Type type0 = lCMP0.getType(constantPoolGen0);
      assertNotNull(type0);
      assertEquals("lcmp", lCMP0.getName());
      assertEquals((short)148, lCMP0.getOpcode());
      assertEquals(1, lCMP0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals((byte)11, type0.getType());
      assertEquals(2, type0.getSize());
      assertEquals("J", type0.getSignature());
      
      localVariablesInfo0.add(1, "Slot number for local variable information out of range.", 4262, 4262, type0);
      assertEquals("lcmp", lCMP0.getName());
      assertEquals((short)148, lCMP0.getOpcode());
      assertEquals(1, lCMP0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals((byte)11, type0.getType());
      assertEquals(2, type0.getSize());
      assertEquals("J", type0.getSignature());
      
      // Undeclared exception!
      try { 
        localVariablesInfo0.add(int0, string0, int1, int1, type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Slot number for local variable information out of range.
         //
         verifyException("org.apache.bcel.verifier.statics.LocalVariablesInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      int int0 = 32767;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(32767);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      assertNotNull(localVariablesInfo0);
      
      LCMP lCMP0 = new LCMP();
      assertNotNull(lCMP0);
      assertEquals((short)148, lCMP0.getOpcode());
      assertEquals("lcmp", lCMP0.getName());
      assertEquals(1, lCMP0.getLength());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      Type type0 = lCMP0.getType(constantPoolGen0);
      assertNotNull(type0);
      assertEquals((short)148, lCMP0.getOpcode());
      assertEquals("lcmp", lCMP0.getName());
      assertEquals(1, lCMP0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals("J", type0.getSignature());
      assertEquals(2, type0.getSize());
      assertEquals((byte)11, type0.getType());
      
      localVariablesInfo0.add(1, "Slot number for local variable information out of range.", (-2066), (-2066), type0);
      assertEquals((short)148, lCMP0.getOpcode());
      assertEquals("lcmp", lCMP0.getName());
      assertEquals(1, lCMP0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals("J", type0.getSignature());
      assertEquals(2, type0.getSize());
      assertEquals((byte)11, type0.getType());
      
      LocalVariableInfo localVariableInfo0 = localVariablesInfo0.getLocalVariableInfo(0);
      assertNotNull(localVariableInfo0);
      
      localVariablesInfo0.add(1, "Slot number for local variable information out of range.", (-3242), (-2066), type0);
      assertEquals((short)148, lCMP0.getOpcode());
      assertEquals("lcmp", lCMP0.getName());
      assertEquals(1, lCMP0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals("J", type0.getSignature());
      assertEquals(2, type0.getSize());
      assertEquals((byte)11, type0.getType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      assertNotNull(localVariablesInfo0);
      
      int int1 = 1;
      LCMP lCMP0 = new LCMP();
      assertNotNull(lCMP0);
      assertEquals(1, lCMP0.getLength());
      assertEquals((short)148, lCMP0.getOpcode());
      assertEquals("lcmp", lCMP0.getName());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      BasicType basicType0 = Type.DOUBLE;
      assertNotNull(basicType0);
      assertEquals("D", basicType0.getSignature());
      assertEquals((byte)7, basicType0.getType());
      assertEquals(2, basicType0.getSize());
      
      localVariablesInfo0.add(1, "", (-2066), (-2066), basicType0);
      assertEquals("D", basicType0.getSignature());
      assertEquals((byte)7, basicType0.getType());
      assertEquals(2, basicType0.getSize());
      
      // Undeclared exception!
      try { 
        localVariablesInfo0.add(3037, "", 1, 1, basicType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Slot number for local variable information out of range.
         //
         verifyException("org.apache.bcel.verifier.statics.LocalVariablesInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1806);
      assertNotNull(localVariablesInfo0);
      
      LocalVariableInfo localVariableInfo0 = localVariablesInfo0.getLocalVariableInfo(1);
      assertNotNull(localVariableInfo0);
      
      int int0 = 0;
      BasicType basicType0 = Type.BOOLEAN;
      assertNotNull(basicType0);
      assertEquals((byte)4, basicType0.getType());
      assertEquals("Z", basicType0.getSignature());
      assertEquals(1, basicType0.getSize());
      
      String string0 = Type.getMethodSignature(basicType0, basicType0.NO_ARGS);
      assertNotNull(string0);
      assertEquals((byte)4, basicType0.getType());
      assertEquals("Z", basicType0.getSignature());
      assertEquals(1, basicType0.getSize());
      assertEquals("()Z", string0);
      
      localVariablesInfo0.add(207, "", 1, 0, basicType0);
      assertEquals((byte)4, basicType0.getType());
      assertEquals("Z", basicType0.getSignature());
      assertEquals(1, basicType0.getSize());
      
      LocalVariableInfo localVariableInfo1 = localVariablesInfo0.getLocalVariableInfo(1);
      assertNotNull(localVariableInfo1);
      assertSame(localVariableInfo1, localVariableInfo0);
      
      int int1 = 0;
      int int2 = 0;
      localVariablesInfo0.add(0, "K", 0, 0, basicType0);
      assertEquals((byte)4, basicType0.getType());
      assertEquals("Z", basicType0.getSignature());
      assertEquals(1, basicType0.getSize());
      
      try { 
        localVariablesInfo0.add(207, "zphd]OB'S& WhJP", 0, 1, basicType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // At bytecode offset '1' a local variable has two different names: '' and 'zphd]OB'S& WhJP'.
         //
         verifyException("org.apache.bcel.verifier.statics.LocalVariableInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 2543;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(2543);
      assertNotNull(localVariablesInfo0);
      
      int int1 = 0;
      Type type0 = null;
      // Undeclared exception!
      try { 
        localVariablesInfo0.add(0, "", 0, 2543, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(0);
      assertNotNull(localVariablesInfo0);
      
      BasicType basicType0 = Type.CHAR;
      assertNotNull(basicType0);
      assertEquals("C", basicType0.getSignature());
      assertEquals((byte)5, basicType0.getType());
      assertEquals(1, basicType0.getSize());
      
      // Undeclared exception!
      try { 
        localVariablesInfo0.add(107, "LocalVariable", (-3379), 85, basicType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Slot number for local variable information out of range.
         //
         verifyException("org.apache.bcel.verifier.statics.LocalVariablesInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      assertNotNull(localVariablesInfo0);
      
      LCMP lCMP0 = new LCMP();
      assertNotNull(lCMP0);
      assertEquals("lcmp", lCMP0.getName());
      assertEquals(1, lCMP0.getLength());
      assertEquals((short)148, lCMP0.getOpcode());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      Type type0 = lCMP0.getType(constantPoolGen0);
      assertNotNull(type0);
      assertEquals("lcmp", lCMP0.getName());
      assertEquals(1, lCMP0.getLength());
      assertEquals((short)148, lCMP0.getOpcode());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals((byte)11, type0.getType());
      assertEquals("J", type0.getSignature());
      assertEquals(2, type0.getSize());
      
      localVariablesInfo0.add(1, "", (-2066), (-2066), type0);
      assertEquals("lcmp", lCMP0.getName());
      assertEquals(1, lCMP0.getLength());
      assertEquals((short)148, lCMP0.getOpcode());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals((byte)11, type0.getType());
      assertEquals("J", type0.getSignature());
      assertEquals(2, type0.getSize());
      
      // Undeclared exception!
      try { 
        localVariablesInfo0.add(3037, "", 1, 1, type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Slot number for local variable information out of range.
         //
         verifyException("org.apache.bcel.verifier.statics.LocalVariablesInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1);
      assertNotNull(localVariablesInfo0);
      
      ObjectType objectType0 = Type.STRING;
      assertNotNull(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("java.lang.String", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Ljava/lang/String;", objectType0.getSignature());
      
      // Undeclared exception!
      try { 
        localVariablesInfo0.add((-304), "_", (-304), (-304), objectType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Slot number for local variable information out of range.
         //
         verifyException("org.apache.bcel.verifier.statics.LocalVariablesInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1693);
      assertNotNull(localVariablesInfo0);
      
      LocalVariableInfo localVariableInfo0 = localVariablesInfo0.getLocalVariableInfo(0);
      assertNotNull(localVariableInfo0);
      
      String string0 = "&zA]\\uV-";
      // Undeclared exception!
      try { 
        localVariablesInfo0.add(349, string0, 0, 349, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(221);
      assertNotNull(localVariablesInfo0);
      
      ObjectType objectType0 = Type.OBJECT;
      assertNotNull(objectType0);
      assertEquals("java.lang.Object", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Ljava/lang/Object;", objectType0.getSignature());
      
      // Undeclared exception!
      try { 
        localVariablesInfo0.add(221, "dcmpl", 1, 0, objectType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Slot number for local variable information out of range.
         //
         verifyException("org.apache.bcel.verifier.statics.LocalVariablesInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(0);
      assertNotNull(localVariablesInfo0);
      
      String string0 = "org.apache.bcel.generic.LAND";
      BasicType basicType0 = Type.CHAR;
      assertNotNull(basicType0);
      assertEquals(1, basicType0.getSize());
      assertEquals((byte)5, basicType0.getType());
      assertEquals("C", basicType0.getSignature());
      
      // Undeclared exception!
      try { 
        localVariablesInfo0.add(0, "org.apache.bcel.generic.LAND", 0, 0, basicType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Slot number for local variable information out of range.
         //
         verifyException("org.apache.bcel.verifier.statics.LocalVariablesInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1575);
      assertNotNull(localVariablesInfo0);
      
      LocalVariableInfo localVariableInfo0 = localVariablesInfo0.getLocalVariableInfo(0);
      assertNotNull(localVariableInfo0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1);
      assertNotNull(localVariablesInfo0);
      
      // Undeclared exception!
      try { 
        localVariablesInfo0.getLocalVariableInfo(1744);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Slot number for local variable information out of range.
         //
         verifyException("org.apache.bcel.verifier.statics.LocalVariablesInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(190);
      assertNotNull(localVariablesInfo0);
      
      // Undeclared exception!
      try { 
        localVariablesInfo0.getLocalVariableInfo((-1548));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Slot number for local variable information out of range.
         //
         verifyException("org.apache.bcel.verifier.statics.LocalVariablesInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 0;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(0);
      assertNotNull(localVariablesInfo0);
      
      // Undeclared exception!
      try { 
        localVariablesInfo0.getLocalVariableInfo(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Slot number for local variable information out of range.
         //
         verifyException("org.apache.bcel.verifier.statics.LocalVariablesInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = (-3553);
      LocalVariablesInfo localVariablesInfo0 = null;
      try {
        localVariablesInfo0 = new LocalVariablesInfo((-3553));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.statics.LocalVariablesInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 2179;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(2179);
      assertNotNull(localVariablesInfo0);
      
      int int1 = 0;
      String string0 = "*I^R,XO/Y[n(s34Qg49";
      int int2 = 1;
      DCMPL dCMPL0 = new DCMPL();
      assertNotNull(dCMPL0);
      assertEquals(1, dCMPL0.getLength());
      assertEquals((short)151, dCMPL0.getOpcode());
      assertEquals("dcmpl", dCMPL0.getName());
      
      Constant[] constantArray0 = new Constant[1];
      int int3 = 0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      assertNotNull(constantMethodType0);
      assertEquals(0, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantArray0.length);
      assertEquals(1, constantPoolGen0.getSize());
      
      Type type0 = dCMPL0.getType(constantPoolGen0);
      assertNotNull(type0);
      assertEquals(1, constantArray0.length);
      assertEquals(1, dCMPL0.getLength());
      assertEquals((short)151, dCMPL0.getOpcode());
      assertEquals("dcmpl", dCMPL0.getName());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(2, type0.getSize());
      assertEquals("D", type0.getSignature());
      assertEquals((byte)7, type0.getType());
      
      localVariablesInfo0.add(0, "*I^R,XO/Y[n(s34Qg49", 0, 1, type0);
      assertEquals(1, constantArray0.length);
      assertEquals(1, dCMPL0.getLength());
      assertEquals((short)151, dCMPL0.getOpcode());
      assertEquals("dcmpl", dCMPL0.getName());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(2, type0.getSize());
      assertEquals("D", type0.getSignature());
      assertEquals((byte)7, type0.getType());
      
      // Undeclared exception!
      try { 
        localVariablesInfo0.getLocalVariableInfo(2179);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Slot number for local variable information out of range.
         //
         verifyException("org.apache.bcel.verifier.statics.LocalVariablesInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1685);
      RET rET0 = new RET(0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = rET0.getType(constantPoolGen0);
      localVariablesInfo0.add(0, "},]&`", 1685, (-1077), type0);
      assertEquals((byte)16, type0.getType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(0);
      Type type0 = Type.getReturnType("I:d^7'5s");
      // Undeclared exception!
      try { 
        localVariablesInfo0.add(0, "I:d^7'5s", 0, 0, type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Slot number for local variable information out of range.
         //
         verifyException("org.apache.bcel.verifier.statics.LocalVariablesInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1041);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1780);
      localVariablesInfo0.getLocalVariableInfo(7);
      // Undeclared exception!
      try { 
        localVariablesInfo0.getLocalVariableInfo(1784);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Slot number for local variable information out of range.
         //
         verifyException("org.apache.bcel.verifier.statics.LocalVariablesInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 2179;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(2179);
      int int1 = 0;
      String string0 = "*I^R,XO/Y[n(s34Qg49";
      DCMPL dCMPL0 = new DCMPL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = dCMPL0.getType(constantPoolGen0);
      localVariablesInfo0.add(0, "*I^R,XO/Y[n(s34Qg49", 0, 0, type0);
      type0.toString();
      int int2 = (-1);
      // Undeclared exception!
      try { 
        localVariablesInfo0.add((-1), "double", 0, (-1), type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Slot number for local variable information out of range.
         //
         verifyException("org.apache.bcel.verifier.statics.LocalVariablesInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(130);
      // Undeclared exception!
      try { 
        localVariablesInfo0.getLocalVariableInfo((-2));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Slot number for local variable information out of range.
         //
         verifyException("org.apache.bcel.verifier.statics.LocalVariablesInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      localVariablesInfo0.add(1, "Slot number for local variable information out of range.", 1, 1, type0);
      // Undeclared exception!
      try { 
        localVariablesInfo0.add(3037, "Slot number for local variable information out of range.", 1, 1, type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Slot number for local variable information out of range.
         //
         verifyException("org.apache.bcel.verifier.statics.LocalVariablesInfo", e);
      }
  }
}
