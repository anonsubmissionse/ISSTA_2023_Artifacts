/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 20:28:31 GMT 2022
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.LineNumberTable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.LocalVariableTypeTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.generic.ALOAD;
import org.apache.bcel.generic.AnnotationEntryGen;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.BranchHandle;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CodeExceptionGen;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.DCMPG;
import org.apache.bcel.generic.DUP2;
import org.apache.bcel.generic.ElementValuePairGen;
import org.apache.bcel.generic.FCMPG;
import org.apache.bcel.generic.FCONST;
import org.apache.bcel.generic.GOTO;
import org.apache.bcel.generic.IALOAD;
import org.apache.bcel.generic.IFEQ;
import org.apache.bcel.generic.IFNONNULL;
import org.apache.bcel.generic.IF_ACMPNE;
import org.apache.bcel.generic.INEG;
import org.apache.bcel.generic.ISHL;
import org.apache.bcel.generic.IfInstruction;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.LineNumberGen;
import org.apache.bcel.generic.LocalVariableGen;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.MethodObserver;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.POP;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.ReturnaddressType;
import org.apache.bcel.generic.SWITCH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MethodGen_ESTest extends MethodGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      FCONST fCONST0 = new FCONST();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fCONST0.getType(constantPoolGen0);
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = type0;
      MethodGen methodGen0 = new MethodGen((-2185), type0, typeArray0, (String[]) null, "=HTc(=-hF+@rc", "yl#nhuX%~E7\" I", instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.setMaxLocals();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      Constant[] constantArray0 = new Constant[7];
      FCONST fCONST0 = new FCONST();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fCONST0.getType(constantPoolGen0);
      MethodGen methodGen0 = new MethodGen((-2185), type0, type0.NO_ARGS, (String[]) null, "=HTc(=-hF+@rc", "yl#nhuX%~E7\" I", instructionList0, constantPoolGen0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      LocalVariableTable localVariableTable0 = methodGen0.getLocalVariableTable(constantPoolGen1);
      assertEquals(8, constantPoolGen1.getSize());
      assertEquals(2, localVariableTable0.getLength());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      Type type0 = Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), type0, type0.NO_ARGS, (String[]) null, "", "", instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.getLocalVariableTable((ConstantPoolGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aLOAD0.getType(constantPoolGen0);
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen(2463, type0, type0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      methodGen0.hashCode();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IALOAD iALOAD0 = (IALOAD)InstructionConstants.IALOAD;
      InstructionHandle instructionHandle0 = new InstructionHandle(iALOAD0);
      MethodGen.BranchTarget methodGen_BranchTarget0 = new MethodGen.BranchTarget(instructionHandle0, 415);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = dCMPG0.getType(constantPoolGen0);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      byte[] byteArray0 = new byte[2];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      MethodGen methodGen0 = new MethodGen(198, type0, typeArray0, (String[]) null, "tasPCAJ;~wl;", "X/Wsy", instructionList0, constantPoolGen0);
      methodGen0.setArgumentName((byte)0, "X/Wsy");
      assertEquals(3, methodGen0.getMaxLocals());
      assertEquals("X/Wsy", methodGen0.getClassName());
      assertEquals("tasPCAJ;~wl;", methodGen0.getName());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD(2463);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aLOAD0.getType(constantPoolGen0);
      Byte byte0 = new Byte((byte)31);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen(2463, type0, type0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      methodGen0.copy("o%`ZeFN{13^-Xx$", constantPoolGen0);
      //  // Unstable assertion: assertEquals(4, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BasicType basicType0 = Type.VOID;
      String[] stringArray0 = new String[0];
      byte[] byteArray0 = new byte[1];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      MethodGen methodGen0 = new MethodGen(1280, basicType0, basicType0.NO_ARGS, stringArray0, "Xu<_{kUPvOC9X", " [", instructionList0, constantPoolGen0);
      methodGen0.getReturnType();
      assertEquals(" [", methodGen0.getClassName());
      assertEquals("Xu<_{kUPvOC9X", methodGen0.getName());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD(2463);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aLOAD0.getType(constantPoolGen0);
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen((short)0, type0, type0.NO_ARGS, (String[]) null, "", "", instructionList0, constantPoolGen0);
      methodGen0.getMethod();
      assertEquals(7, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int[] intArray0 = new int[0];
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[0];
      SWITCH sWITCH0 = new SWITCH(intArray0, instructionHandleArray0, instructionHandle0);
      InstructionList instructionList1 = sWITCH0.getInstructionList();
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionList1);
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      methodGen0.addExceptionHandler(instructionHandle0, instructionHandle1, instructionHandle0, objectType0);
      methodGen0.setMaxStack();
      int int0 = methodGen0.getMaxStack();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      ObjectType objectType0 = (ObjectType)Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), objectType0, objectType0.NO_ARGS, (String[]) null, ")", ")", instructionList0, constantPoolGen0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, objectType0);
      InstructionHandle instructionHandle0 = instructionList0.append((CompoundInstruction) pUSH0);
      methodGen0.addExceptionHandler(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      methodGen0.getExceptionHandlers();
      assertEquals(1, methodGen0.getMaxLocals());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      String string0 = methodGen0.getClassName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      Type type0 = Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), type0, type0.NO_ARGS, (String[]) null, ")", ")", instructionList0, constantPoolGen0);
      MethodGen methodGen1 = methodGen0.copy("", constantPoolGen0);
      String string0 = methodGen1.getClassName();
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = dCMPG0.getType(constantPoolGen0);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      byte[] byteArray0 = new byte[2];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      MethodGen methodGen0 = new MethodGen(198, type0, typeArray0, (String[]) null, "tasPCAJ;~wl;", "X/Wsy", instructionList0, constantPoolGen0);
      methodGen0.getArgumentTypes();
      assertEquals("X/Wsy", methodGen0.getClassName());
      assertEquals("tasPCAJ;~wl;", methodGen0.getName());
      assertEquals(3, methodGen0.getMaxLocals());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      FCONST fCONST0 = new FCONST();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fCONST0.getType(constantPoolGen0);
      Type[] typeArray0 = new Type[7];
      typeArray0[6] = type0;
      MethodGen methodGen0 = new MethodGen((-2185), type0, typeArray0, (String[]) null, "=HTc(=-hF+@rc", "yl#nhuX%~E7\" I", instructionList0, constantPoolGen0);
      Type type1 = methodGen0.getArgumentType(6);
      assertNotNull(type1);
      assertEquals("yl#nhuX%~E7\" I", methodGen0.getClassName());
      assertEquals("=HTc(=-hF+@rc", methodGen0.getName());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      String[] stringArray0 = new String[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Character character0 = Character.valueOf('V');
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      MethodGen methodGen0 = new MethodGen((-3975), objectType0, (Type[]) null, stringArray0, stringArray0[0], (String) null, instructionList0, constantPoolGen0);
      String[] stringArray1 = methodGen0.getArgumentNames();
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      String[] stringArray0 = new String[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Character character0 = Character.valueOf('V');
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      MethodGen methodGen0 = new MethodGen((-3975), objectType0, (Type[]) null, stringArray0, stringArray0[0], (String) null, instructionList0, constantPoolGen0);
      String string0 = methodGen0.getArgumentName(0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aLOAD0.getType(constantPoolGen0);
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen((byte)6, type0, type0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      methodGen0.addLocalVariable(" \"FCZQHIMfC]h%b", type0, 2464, (InstructionHandle) null, (InstructionHandle) null, (-975));
      assertEquals(2465, methodGen0.getMaxLocals());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      LineNumberGen lineNumberGen0 = methodGen0.addLineNumber(instructionHandle0, 0);
      assertEquals(0, lineNumberGen0.getSourceLine());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      methodGen0.addObserver((MethodObserver) null);
      // Undeclared exception!
      try { 
        methodGen0.update();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aLOAD0.getType(constantPoolGen0);
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen(2463, type0, type0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      String string0 = methodGen0.toString();
      assertEquals("public private protected static final transient native strictfp Object o%`ZeFN{13^-Xx$()", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int[] intArray0 = new int[0];
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[0];
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionList0);
      SWITCH sWITCH0 = new SWITCH(intArray0, instructionHandleArray0, instructionHandle1);
      InstructionList instructionList1 = sWITCH0.getInstructionList();
      instructionList0.insert(instructionList1);
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      // Undeclared exception!
      methodGen0.setMaxStack();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      iNEG0.setOpcode((short) (-7160));
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.setMaxStack();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(403, objectType0, (Type[]) null, (String[]) null, "}20~GjeB", "}20~GjeB", instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.setArgumentName(20, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      LocalVariableGen localVariableGen0 = methodGen0.addLocalVariable(", low = ", (Type) objectType0, 1280, instructionHandle0, instructionHandle0, 1280);
      localVariableGen0.setName((String) null);
      // Undeclared exception!
      try { 
        methodGen0.removeLocalVariable(localVariableGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BCELComparator bCELComparator0 = Method.getComparator();
      MethodGen.setComparator(bCELComparator0);
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.hashCode();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.generic.MethodGen cannot be cast to org.apache.bcel.classfile.Method
         //
         verifyException("org.apache.bcel.classfile.Method$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      IFEQ iFEQ0 = new IFEQ((InstructionHandle) null);
      instructionList0.insert((BranchInstruction) iFEQ0);
      FCONST fCONST0 = new FCONST();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fCONST0.getType(constantPoolGen0);
      MethodGen methodGen0 = new MethodGen((-2185), type0, type0.NO_ARGS, (String[]) null, "=HTc(=-hF+@rc", "yl#nhuX%~E7\" I", instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.getMethod();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Target of ifeq[153](3) is invalid null handle
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      FCONST fCONST0 = new FCONST();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fCONST0.getType(constantPoolGen0);
      Type[] typeArray0 = new Type[19];
      MethodGen methodGen0 = new MethodGen((-2185), type0, typeArray0, (String[]) null, "=HTc(=-hF+@rc", "yl#nhuX%~E7\" I", instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.getMethod();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.getMethod();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value must not be null.
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      Type type0 = Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), type0, type0.NO_ARGS, (String[]) null, "", "", instructionList0, constantPoolGen0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, "");
      InstructionList instructionList1 = new InstructionList(pUSH0);
      DUP2 dUP2_0 = (DUP2)InstructionConstants.DUP2;
      InstructionHandle instructionHandle0 = instructionList1.insert((Instruction) dUP2_0);
      instructionList0.append(instructionHandle0, (CompoundInstruction) pUSH0);
      // Undeclared exception!
      try { 
        methodGen0.getMethod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-114);
      InstructionList instructionList0 = new InstructionList(byteArray0);
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[0];
      // Undeclared exception!
      try { 
        MethodGen.getMaxStack(constantPoolGen0, instructionList0, codeExceptionGenArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 36352. Constant pool size is: 256
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ObjectType objectType0 = Type.OBJECT;
      String[] stringArray0 = new String[0];
      POP pOP0 = new POP();
      InstructionList instructionList0 = new InstructionList(pOP0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, stringArray0, "", "org.apache.bcGl.classfile.ConstantUtf8", instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.getLineNumberTable((ConstantPoolGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BasicType basicType0 = Type.CHAR;
      String[] stringArray0 = new String[4];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Boolean boolean0 = Boolean.FALSE;
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen(11, basicType0, (Type[]) null, stringArray0, "org.apache.bcel.verifier.statics.Pass3aVerifier$InstOperandConstraintVisitor", "", instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.getArgumentTypes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.getArgumentType(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MethodGen.setComparator((BCELComparator) null);
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      ISHL iSHL0 = new ISHL();
      // Undeclared exception!
      try { 
        methodGen0.equals(iSHL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.copy("}20~GjeB", constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value must not be null.
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      methodGen0.setArgumentTypes((Type[]) null);
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, true, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.addParameterAnnotation(158, annotationEntryGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ObjectType objectType0 = Type.OBJECT;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.addLocalVariable((String) null, (Type) objectType0, 1280, instructionHandle0, instructionHandle0, 1280);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[0];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method(908, 908, 16384, attributeArray0, constantPool0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen(method0, "", constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 16384. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Method method0 = new Method();
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen(method0, "?tj^kA1x$7Oi;i36Y", (ConstantPoolGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ReturnaddressType returnaddressType0 = ReturnaddressType.NO_TARGET;
      String[] stringArray0 = new String[7];
      byte[] byteArray0 = new byte[4];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen((-399), returnaddressType0, returnaddressType0.NO_ARGS, stringArray0, "", "", instructionList0, (ConstantPoolGen) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Type can not be <return address>
         //
         verifyException("org.apache.bcel.generic.FieldGenOrMethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      List<AnnotationEntryGen> list0 = methodGen0.getAnnotationsOnParameter(0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.THROWABLE;
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE();
      IfInstruction ifInstruction0 = iF_ACMPNE0.negate();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[3];
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen((InstructionHandle) null, (InstructionHandle) null, (InstructionHandle) null, objectType0);
      codeExceptionGenArray0[0] = codeExceptionGen0;
      codeExceptionGenArray0[1] = codeExceptionGenArray0[0];
      codeExceptionGenArray0[2] = codeExceptionGenArray0[1];
      // Undeclared exception!
      try { 
        MethodGen.getMaxStack(constantPoolGen0, instructionList0, codeExceptionGenArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int[] intArray0 = new int[0];
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[0];
      SWITCH sWITCH0 = new SWITCH(intArray0, instructionHandleArray0, instructionHandle0);
      InstructionList instructionList1 = sWITCH0.getInstructionList();
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionList1);
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      CodeExceptionGen codeExceptionGen0 = methodGen0.addExceptionHandler(instructionHandle0, instructionHandle1, instructionHandle0, objectType0);
      assertTrue(instructionHandle1.hasTargeters());
      
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[5];
      codeExceptionGenArray0[0] = codeExceptionGen0;
      codeExceptionGenArray0[1] = codeExceptionGen0;
      codeExceptionGenArray0[2] = codeExceptionGen0;
      codeExceptionGenArray0[3] = codeExceptionGen0;
      codeExceptionGenArray0[4] = codeExceptionGen0;
      int int0 = MethodGen.getMaxStack(constantPoolGen0, instructionList0, codeExceptionGenArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MethodGen.BranchStack methodGen_BranchStack0 = new MethodGen.BranchStack();
      MethodGen.BranchTarget methodGen_BranchTarget0 = methodGen_BranchStack0.pop();
      assertNull(methodGen_BranchTarget0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MethodGen.BranchStack methodGen_BranchStack0 = new MethodGen.BranchStack();
      byte[] byteArray0 = new byte[3];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE();
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) iF_ACMPNE0);
      methodGen_BranchStack0.push(branchHandle0, 10);
      MethodGen.BranchTarget methodGen_BranchTarget0 = methodGen_BranchStack0.pop();
      assertNotNull(methodGen_BranchTarget0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MethodGen.BranchStack methodGen_BranchStack0 = new MethodGen.BranchStack();
      byte[] byteArray0 = new byte[3];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE();
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) iF_ACMPNE0);
      methodGen_BranchStack0.push(branchHandle0, 10);
      methodGen_BranchStack0.push(branchHandle0, 7);
      assertEquals(0, branchHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aLOAD0.getType(constantPoolGen0);
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen(2463, type0, type0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      instructionList0.insert((Instruction) aLOAD0);
      methodGen0.setMaxLocals();
      assertEquals(0, methodGen0.getMaxLocals());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      methodGen0.removeNOPs();
      assertFalse(methodGen0.isSynchronized());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      FCONST fCONST0 = new FCONST();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fCONST0.getType(constantPoolGen0);
      MethodGen methodGen0 = new MethodGen((-2185), type0, type0.NO_ARGS, (String[]) null, "=HTc(=-hF+@rc", "yl#nhuX%~E7\" I", instructionList0, constantPoolGen0);
      methodGen0.getMethod();
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.THROWABLE;
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen((byte)6, objectType0, objectType0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      // Undeclared exception!
      try { 
        methodGen0.addExceptionHandler(instructionHandle0, (InstructionHandle) null, (InstructionHandle) null, objectType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Exception handler target is null instruction
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aLOAD0.getType(constantPoolGen0);
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen((byte)6, type0, type0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      LineNumberTable lineNumberTable0 = methodGen0.getLineNumberTable(constantPoolGen0);
      assertEquals(2, lineNumberTable0.getLength());
      assertEquals(1, methodGen0.getMaxLocals());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.THROWABLE;
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen((byte)6, objectType0, objectType0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      methodGen0.getLocalVariableTable(constantPoolGen0);
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(1, methodGen0.getMaxLocals());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Type type0 = Type.UNKNOWN;
      String[] stringArray0 = new String[0];
      InstructionList instructionList0 = new InstructionList();
      MethodGen methodGen0 = new MethodGen(5, type0, type0.NO_ARGS, stringArray0, "", "t!>!W5[", instructionList0, (ConstantPoolGen) null);
      LocalVariableGen localVariableGen0 = methodGen0.addLocalVariable("IE8$$/uEB<L'/kx", type0, (InstructionHandle) null, (InstructionHandle) null);
      assertEquals(1, localVariableGen0.getIndex());
      
      methodGen0.getLocalVariables();
      assertEquals(2, methodGen0.getMaxLocals());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      Type type0 = Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(646, type0, type0.NO_ARGS, (String[]) null, ")", "<|F`", instructionList0, constantPoolGen0);
      methodGen0.getLocalVariables();
      assertEquals(1, methodGen0.getMaxLocals());
      assertEquals("<|F`", methodGen0.getClassName());
      assertEquals(")", methodGen0.getName());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      String[] stringArray0 = new String[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Character character0 = Character.valueOf('T');
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      MethodGen methodGen0 = new MethodGen((-3975), objectType0, (Type[]) null, stringArray0, stringArray0[0], (String) null, instructionList0, constantPoolGen0);
      methodGen0.removeLocalVariables();
      assertTrue(methodGen0.isEnum());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      Type type0 = Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), type0, type0.NO_ARGS, (String[]) null, ")", ")", instructionList0, constantPoolGen0);
      methodGen0.addAttribute((Attribute) null);
      Method method0 = methodGen0.getMethod();
      MethodGen methodGen1 = new MethodGen(method0, "final volatile synthetic annotation enum module org.apache.bcel.generic.ISHL )() [null]", constantPoolGen0);
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals(1, methodGen0.getMaxLocals());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("");
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen(2463, objectType0, objectType0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      Method method0 = methodGen0.getMethod();
      MethodGen methodGen1 = new MethodGen(method0, "PU `H6vVao-.e", constantPoolGen0);
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD(0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = aLOAD0.getType(constantPoolGen0);
      InstructionList instructionList0 = new InstructionList(aLOAD0);
      MethodGen methodGen0 = new MethodGen(0, type0, type0.NO_ARGS, (String[]) null, "", "d~[!<=g`t", instructionList0, constantPoolGen0);
      assertEquals(1, methodGen0.getMaxLocals());
      
      methodGen0.setMaxLocals(0);
      assertEquals(0, methodGen0.getMaxLocals());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aLOAD0.getType(constantPoolGen0);
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen(2463, type0, type0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      String string0 = methodGen0.getSignature();
      assertEquals("()Ljava/lang/Object;", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      methodGen0.removeExceptionHandlers();
      assertFalse(methodGen0.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      Attribute[] attributeArray0 = methodGen0.getCodeAttributes();
      assertEquals(0, attributeArray0.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      Type type0 = Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), type0, type0.NO_ARGS, (String[]) null, ")", ")", instructionList0, constantPoolGen0);
      methodGen0.getExceptionHandlers();
      assertEquals(1, methodGen0.getMaxLocals());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.addLocalVariable((String) null, (Type) objectType0, 1238, instructionHandle0, instructionHandle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      String[] stringArray0 = new String[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Character character0 = Character.valueOf('T');
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      MethodGen methodGen0 = new MethodGen((-3975), objectType0, (Type[]) null, stringArray0, stringArray0[0], (String) null, instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.setArgumentType(0, objectType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aLOAD0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      PUSH pUSH0 = new PUSH(constantPoolGen0, (String) null);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen((byte)127, type0, type0.NO_ARGS, stringArray0, "^]]+#jN{|OA Gr,jd", "^]]+#jN{|OA Gr,jd", instructionList0, constantPoolGen0);
      methodGen0.setInstructionList(instructionList0);
      assertTrue(methodGen0.isSynchronized());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BasicType basicType0 = Type.INT;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-506), basicType0, basicType0.NO_ARGS, (String[]) null, "_}KT0~{:6Vk6", "uN", (InstructionList) null, constantPoolGen0);
      methodGen0.setClassName("uN");
      assertEquals("uN", methodGen0.getClassName());
      assertEquals("_}KT0~{:6Vk6", methodGen0.getName());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aLOAD0.getType(constantPoolGen0);
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen(2463, type0, type0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      Type[] typeArray0 = methodGen0.getArgumentTypes();
      assertEquals(0, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      String[] stringArray0 = new String[0];
      POP pOP0 = new POP();
      InstructionList instructionList0 = new InstructionList(pOP0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, stringArray0, "", "", instructionList0, constantPoolGen0);
      methodGen0.getInstructionList();
      assertEquals(1, methodGen0.getMaxLocals());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD(0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = aLOAD0.getType(constantPoolGen0);
      InstructionList instructionList0 = new InstructionList(aLOAD0);
      MethodGen methodGen0 = new MethodGen(0, type0, type0.NO_ARGS, (String[]) null, "", "d~[!<=g`t", instructionList0, constantPoolGen0);
      int int0 = methodGen0.getMaxLocals();
      assertEquals("d~[!<=g`t", methodGen0.getClassName());
      assertEquals("", methodGen0.getName());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      Type type0 = Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), type0, type0.NO_ARGS, (String[]) null, ")", ")", instructionList0, constantPoolGen0);
      methodGen0.getLineNumbers();
      assertEquals(1, methodGen0.getMaxLocals());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      methodGen0.removeCodeAttribute((Attribute) null);
      assertFalse(methodGen0.isTransient());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      methodGen0.setArgumentNames((String[]) null);
      // Undeclared exception!
      try { 
        methodGen0.getArgumentName(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      Type type0 = Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), type0, type0.NO_ARGS, (String[]) null, ")", ")", instructionList0, constantPoolGen0);
      methodGen0.addAttribute((Attribute) null);
      methodGen0.getAnnotationsOnParameter((-4016));
      assertEquals(1, methodGen0.getMaxLocals());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      methodGen0.getAnnotationsOnParameter(0);
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, true, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.addParameterAnnotation(158, annotationEntryGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 158
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      Type type0 = Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), type0, type0.NO_ARGS, (String[]) null, ")", ")", instructionList0, constantPoolGen0);
      methodGen0.addAttribute((Attribute) null);
      String string0 = methodGen0.toString();
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals("final volatile synthetic annotation enum module org.apache.bcel.generic.ISHL )() [null]", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      MethodObserver methodObserver0 = mock(MethodObserver.class, new ViolatedAssumptionAnswer());
      methodGen0.addObserver(methodObserver0);
      methodGen0.update();
      assertNull(methodGen0.getClassName());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      Type type0 = Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), type0, type0.NO_ARGS, (String[]) null, "*H%V7+/3_Ai", "*H%V7+/3_Ai", instructionList0, constantPoolGen0);
      methodGen0.update();
      assertEquals(1, methodGen0.getMaxLocals());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      MethodObserver methodObserver0 = mock(MethodObserver.class, new ViolatedAssumptionAnswer());
      methodGen0.addObserver(methodObserver0);
      methodGen0.removeObserver((MethodObserver) null);
      assertFalse(methodGen0.isSynchronized());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ObjectType objectType0 = Type.OBJECT;
      String[] stringArray0 = new String[0];
      POP pOP0 = new POP();
      InstructionList instructionList0 = new InstructionList(pOP0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, stringArray0, "", "org.apache.bcGl.classfile.ConstantUtf8", instructionList0, constantPoolGen0);
      MethodObserver methodObserver0 = mock(MethodObserver.class, new ViolatedAssumptionAnswer());
      methodGen0.removeObserver(methodObserver0);
      assertEquals("org.apache.bcGl.classfile.ConstantUtf8", methodGen0.getClassName());
      assertEquals(1, methodGen0.getMaxLocals());
      assertEquals("", methodGen0.getName());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ObjectType objectType0 = Type.STRINGBUFFER;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      MethodObserver methodObserver0 = mock(MethodObserver.class, new ViolatedAssumptionAnswer());
      methodGen0.addObserver(methodObserver0);
      MethodObserver methodObserver1 = mock(MethodObserver.class, new ViolatedAssumptionAnswer());
      methodGen0.addObserver(methodObserver1);
      assertNull(methodGen0.getName());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-84);
      InstructionList instructionList0 = new InstructionList(byteArray0);
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[0];
      int int0 = MethodGen.getMaxStack(constantPoolGen0, instructionList0, codeExceptionGenArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-68);
      InstructionList instructionList0 = new InstructionList(byteArray0);
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[0];
      int int0 = MethodGen.getMaxStack(constantPoolGen0, instructionList0, codeExceptionGenArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-55);
      InstructionList instructionList0 = new InstructionList(byteArray0);
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[0];
      int int0 = MethodGen.getMaxStack(constantPoolGen0, instructionList0, codeExceptionGenArray0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("");
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen(2463, objectType0, objectType0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[4];
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(aLOAD0);
      GOTO gOTO0 = new GOTO(instructionHandle0);
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) gOTO0);
      CodeExceptionGen codeExceptionGen0 = methodGen0.addExceptionHandler(branchHandle0, branchHandle0, instructionHandle0, objectType0);
      codeExceptionGenArray0[0] = codeExceptionGen0;
      codeExceptionGenArray0[1] = codeExceptionGenArray0[0];
      codeExceptionGenArray0[2] = codeExceptionGenArray0[0];
      codeExceptionGenArray0[3] = codeExceptionGenArray0[0];
      // Undeclared exception!
      try { 
        MethodGen.getMaxStack(constantPoolGen0, instructionList0, codeExceptionGenArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      String[] stringArray0 = new String[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Character character0 = Character.valueOf('T');
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      MethodGen methodGen0 = new MethodGen((-3975), objectType0, (Type[]) null, stringArray0, stringArray0[0], (String) null, instructionList0, constantPoolGen0);
      methodGen0.setMaxLocals();
      assertEquals(0, methodGen0.getMaxLocals());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aLOAD0.getType(constantPoolGen0);
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen((byte)6, type0, type0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      methodGen0.stripAttributes(true);
      methodGen0.copy(" \"FCZQHIMfC]h%b", constantPoolGen0);
      //  // Unstable assertion: assertEquals(7, constantPoolGen0.getSize());
      //  // Unstable assertion: assertEquals(1, methodGen0.getMaxLocals());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ObjectType objectType0 = Type.OBJECT;
      String[] stringArray0 = new String[0];
      POP pOP0 = new POP();
      InstructionList instructionList0 = new InstructionList(pOP0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, stringArray0, "", "org.apache.bcGl.classfile.ConstantUtf8", instructionList0, constantPoolGen0);
      methodGen0.addParameterAnnotationsAsAttribute((ConstantPoolGen) null);
      assertEquals("org.apache.bcGl.classfile.ConstantUtf8", methodGen0.getClassName());
      assertEquals("", methodGen0.getName());
      assertEquals(1, methodGen0.getMaxLocals());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      methodGen0.addAnnotationsAsAttribute(constantPoolGen0);
      assertFalse(methodGen0.isNative());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aLOAD0.getType(constantPoolGen0);
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen((byte)6, type0, type0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      methodGen0.addException("'void' is an illegal argument type for a method");
      methodGen0.copy(" \"FCZQHIMfC]h%b", constantPoolGen0);
      assertEquals(10, constantPoolGen0.getSize());
      assertEquals(1, methodGen0.getMaxLocals());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      ObjectType objectType0 = (ObjectType)Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), objectType0, objectType0.NO_ARGS, (String[]) null, "*H%V7+/3_Ai", "*H%V7+/3_Ai", instructionList0, constantPoolGen0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, objectType0);
      InstructionHandle instructionHandle0 = instructionList0.append((CompoundInstruction) pUSH0);
      // Undeclared exception!
      try { 
        methodGen0.addExceptionHandler(instructionHandle0, instructionHandle0, (InstructionHandle) null, objectType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Exception handler target is null instruction
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      ObjectType objectType0 = (ObjectType)Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), objectType0, objectType0.NO_ARGS, (String[]) null, ")", ")", instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.addExceptionHandler((InstructionHandle) null, (InstructionHandle) null, (InstructionHandle) null, objectType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Exception handler target is null instruction
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      Type type0 = Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), type0, type0.NO_ARGS, (String[]) null, "", "", instructionList0, constantPoolGen0);
      DUP2 dUP2_0 = (DUP2)InstructionConstants.DUP2;
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) dUP2_0);
      methodGen0.addLocalVariable("", type0, instructionHandle0, instructionHandle0);
      methodGen0.getMethod();
      assertEquals(8, constantPoolGen0.getSize());
      assertEquals(2, methodGen0.getMaxLocals());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      ObjectType objectType0 = (ObjectType)Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), objectType0, objectType0.NO_ARGS, (String[]) null, "*H%V7+/3_Ai", "*H%V7+/3_Ai", instructionList0, constantPoolGen0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, objectType0);
      InstructionHandle instructionHandle0 = instructionList0.append((CompoundInstruction) pUSH0);
      methodGen0.addExceptionHandler(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      instructionList0.insert(instructionList0);
      // Undeclared exception!
      try { 
        methodGen0.copy("*H%V7+/3_Ai", constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      ObjectType objectType0 = (ObjectType)Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), objectType0, objectType0.NO_ARGS, (String[]) null, "*H%V7+/3_Ai", "*H%V7+/3_Ai", instructionList0, constantPoolGen0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, objectType0);
      InstructionHandle instructionHandle0 = instructionList0.append((CompoundInstruction) pUSH0);
      methodGen0.addExceptionHandler(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      methodGen0.copy("*H%V7+/3_Ai", constantPoolGen0);
      assertEquals(9, constantPoolGen0.getSize());
      assertEquals(1, methodGen0.getMaxLocals());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FCMPG fCMPG0 = new FCMPG();
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = fCMPG0.getType(constantPoolGen0);
      String[] stringArray0 = new String[1];
      Boolean boolean0 = new Boolean(",");
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen(1323, type0, type0.NO_ARGS, stringArray0, ",", "-;~S]arc_5t0ht", instructionList0, constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Mismatch in argument array lengths: 0 vs. 1
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      BasicType basicType0 = Type.VOID;
      Type[] typeArray0 = new Type[7];
      typeArray0[5] = (Type) basicType0;
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen(646, basicType0, typeArray0, (String[]) null, "=HTc(=-hF+@rc", "yl#nhuX%~E7\" I", instructionList0, constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 'void' is an illegal argument type for a method
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD(2463);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aLOAD0.getType(constantPoolGen0);
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      Type[] typeArray0 = new Type[6];
      InstructionList instructionList0 = new InstructionList(pUSH0);
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen((short)0, type0, typeArray0, (String[]) null, "o%`ZeFN{13^-Xx$", "", instructionList0, constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ObjectType objectType0 = Type.STRINGBUFFER;
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(8, objectType0, objectType0.NO_ARGS, (String[]) null, "", "", instructionList0, constantPoolGen0);
      boolean boolean0 = methodGen0.equals(methodGen0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      Type type0 = Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4012), type0, type0.NO_ARGS, (String[]) null, ")", ")", instructionList0, constantPoolGen0);
      MethodGen methodGen1 = new MethodGen((-4012), type0, type0.NO_ARGS, (String[]) null, "d0b0KDwviO-9MkNU=PJ@", ")", instructionList0, constantPoolGen0);
      boolean boolean0 = methodGen1.equals(methodGen0);
      assertFalse(boolean0);
      assertEquals(")", methodGen1.getClassName());
      assertEquals(1, methodGen1.getMaxLocals());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.MethodGen$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("");
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen(2463, objectType0, objectType0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      MethodGen methodGen1 = methodGen0.copy("o%`ZeFN{13^-Xx$", constantPoolGen0);
      methodGen1.getMethod();
      //  // Unstable assertion: assertEquals(4, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      Type type0 = Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), type0, type0.NO_ARGS, (String[]) null, "*H%V7+/3_Ai", "*H%V7+/3_Ai", instructionList0, constantPoolGen0);
      methodGen0.removeCodeAttributes();
      assertEquals(1, methodGen0.getMaxLocals());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("");
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen(2463, objectType0, objectType0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      methodGen0.removeException("o%`ZeFN{13^-Xx$");
      assertTrue(methodGen0.isProtected());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BCELComparator bCELComparator0 = MethodGen.getComparator();
      assertNotNull(bCELComparator0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      String[] stringArray0 = new String[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Character character0 = Character.valueOf('V');
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      MethodGen methodGen0 = new MethodGen((-3975), objectType0, (Type[]) null, stringArray0, stringArray0[0], (String) null, instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.getArgumentType(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ObjectType objectType0 = Type.STRINGBUFFER;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      ISHL iSHL0 = new ISHL();
      // Undeclared exception!
      try { 
        methodGen0.equals(iSHL0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.generic.ISHL cannot be cast to org.apache.bcel.generic.MethodGen
         //
         verifyException("org.apache.bcel.generic.MethodGen$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("");
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen(2463, objectType0, objectType0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      String[] stringArray0 = methodGen0.getExceptions();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      methodGen0.removeLocalVariableTypeTable();
      assertFalse(methodGen0.isProtected());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ObjectType objectType0 = Type.STRINGBUFFER;
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(8, objectType0, objectType0.NO_ARGS, (String[]) null, "", "", instructionList0, constantPoolGen0);
      LocalVariableTypeTable localVariableTypeTable0 = methodGen0.getLocalVariableTypeTable();
      assertNull(localVariableTypeTable0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("");
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen(2463, objectType0, objectType0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      methodGen0.removeExceptions();
      assertEquals("o%`ZeFN{13^-Xx$", methodGen0.getClassName());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.getArgumentName(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("");
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen(2463, objectType0, objectType0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      String[] stringArray0 = methodGen0.getArgumentNames();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      ObjectType objectType1 = (ObjectType)methodGen0.getReturnType();
      assertEquals("java.lang.Class", objectType1.getClassName());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      LocalVariableGen localVariableGen0 = methodGen0.addLocalVariable(", low = ", (Type) objectType0, 0, instructionHandle0, instructionHandle0, 0);
      methodGen0.removeLocalVariable(localVariableGen0);
      assertEquals(1, methodGen0.getMaxLocals());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.THROWABLE;
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen((byte)6, objectType0, objectType0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen((InstructionHandle) null, (InstructionHandle) null, (InstructionHandle) null, objectType0);
      methodGen0.removeExceptionHandler(codeExceptionGen0);
      assertEquals(1, methodGen0.getMaxLocals());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(10, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      LineNumberGen lineNumberGen0 = methodGen0.addLineNumber(instructionHandle0, 10);
      methodGen0.removeLineNumber(lineNumberGen0);
      assertEquals(10, lineNumberGen0.getSourceLine());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      Type type0 = Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), type0, type0.NO_ARGS, (String[]) null, ".JvH[j", ".JvH[j", instructionList0, constantPoolGen0);
      methodGen0.removeLineNumbers();
      assertEquals(1, methodGen0.getMaxLocals());
  }
}
