/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:50:24 GMT 2022
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInput;
import java.io.DataOutputStream;
import java.io.OutputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.NestHost;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NestHost_ESTest extends NestHost_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NestHost nestHost0 = new NestHost(0, 0, (-38), (ConstantPool) null);
      int int0 = nestHost0.getHostClassIndex();
      assertEquals((-38), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      NestHost nestHost0 = new NestHost(3487, 0, 1829, constantPool0);
      NestHost nestHost1 = (NestHost)nestHost0.copy(constantPool0);
      assertNotSame(nestHost1, nestHost0);
      assertEquals(1829, nestHost1.getHostClassIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      NestHost nestHost0 = new NestHost(0, 7, 7, constantPool0);
      NestHost nestHost1 = (NestHost)nestHost0.copy(constantPool0);
      assertEquals(7, nestHost1.getHostClassIndex());
      assertNotSame(nestHost1, nestHost0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      NestHost nestHost0 = new NestHost((-501), (-501), (-501), constantPool0);
      NestHost nestHost1 = (NestHost)nestHost0.copy(constantPool0);
      assertEquals((-501), nestHost1.getHostClassIndex());
      assertNotSame(nestHost1, nestHost0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      NestHost nestHost0 = new NestHost((-1869), (-1869), 3653, constantPool0);
      // Undeclared exception!
      try { 
        nestHost0.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 3653. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NestHost nestHost0 = null;
      try {
        nestHost0 = new NestHost((NestHost) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.NestHost", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NestHost nestHost0 = new NestHost(2605, 2605, 30, (ConstantPool) null);
      int int0 = nestHost0.getHostClassIndex();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      NestHost nestHost0 = new NestHost(0, 7, 7, constantPool0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      nestHost0.accept(emptyVisitor0);
      assertEquals(7, nestHost0.getHostClassIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      NestHost nestHost0 = new NestHost(1486, 1486, 1486, constantPool0);
      nestHost0.setHostClassIndex(1486);
      assertEquals(1486, nestHost0.getHostClassIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NestHost nestHost0 = new NestHost(2605, 2605, 30, (ConstantPool) null);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        nestHost0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NestHost nestHost0 = new NestHost(1, 1, 1, (ConstantPool) null);
      NestHost nestHost1 = new NestHost(nestHost0);
      assertEquals(1, nestHost0.getHostClassIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NestHost nestHost0 = new NestHost(1, 1, 1, (ConstantPool) null);
      // Undeclared exception!
      try { 
        nestHost0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.NestHost", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NestHost nestHost0 = null;
      try {
        nestHost0 = new NestHost((-3353), 2785, (DataInput) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.NestHost", e);
      }
  }
}
