/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:23:13 GMT 2022
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.ModulePackages;
import org.apache.bcel.classfile.Visitor;
import org.apache.bcel.util.ClassPath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ModulePackages_ESTest extends ModulePackages_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[0];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ModulePackages modulePackages0 = new ModulePackages((-146), (-146), intArray0, constantPool1);
      Attribute attribute0 = modulePackages0.copy(constantPool0);
      assertNotSame(attribute0, modulePackages0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[4];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ModulePackages modulePackages0 = new ModulePackages(0, 0, intArray0, constantPool0);
      int[] intArray1 = modulePackages0.getPackageIndexTable();
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[4];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ModulePackages modulePackages0 = new ModulePackages(0, 0, intArray0, constantPool0);
      int int0 = modulePackages0.getNumberOfPackages();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[7];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ModulePackages modulePackages0 = new ModulePackages(177, 177, intArray0, constantPool0);
      Attribute attribute0 = modulePackages0.copy(constantPool0);
      assertNotSame(attribute0, modulePackages0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[9];
      ModulePackages modulePackages0 = new ModulePackages(2322, (-2948), intArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        modulePackages0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ModulePackages", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[5];
      ModulePackages modulePackages0 = new ModulePackages(47, 631, intArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        modulePackages0.getPackageNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ModulePackages", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[4];
      ModulePackages modulePackages0 = new ModulePackages(2117, (-2636), intArray0, (ConstantPool) null);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        modulePackages0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ModulePackages modulePackages0 = new ModulePackages(0, 0, (int[]) null, (ConstantPool) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ModulePackages(0):", true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      try { 
        modulePackages0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[6];
      ModulePackages modulePackages0 = new ModulePackages(0, 0, intArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        modulePackages0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ModulePackages", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ModulePackages modulePackages0 = null;
      try {
        modulePackages0 = new ModulePackages(23, 0, (DataInput) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ModulePackages", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-126), 233);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ModulePackages modulePackages0 = null;
      try {
        modulePackages0 = new ModulePackages((-200), 0, dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ModulePackages modulePackages0 = null;
      try {
        modulePackages0 = new ModulePackages(194, 194, dataInputStream0, constantPool0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ModulePackages modulePackages0 = new ModulePackages(0, 0, (int[]) null, (ConstantPool) null);
      Attribute attribute0 = modulePackages0.copy((ConstantPool) null);
      assertNotSame(attribute0, modulePackages0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[9];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ModulePackages modulePackages0 = new ModulePackages(27, 27, intArray0, constantPool0);
      // Undeclared exception!
      try { 
        modulePackages0.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ModulePackages modulePackages0 = new ModulePackages(0, 0, (int[]) null, (ConstantPool) null);
      String string0 = modulePackages0.toString();
      assertEquals("ModulePackages(0):", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[5];
      ModulePackages modulePackages0 = new ModulePackages(47, 631, intArray0, (ConstantPool) null);
      modulePackages0.setPackageIndexTable(intArray0);
      assertEquals(5, modulePackages0.getNumberOfPackages());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ModulePackages modulePackages0 = new ModulePackages(0, 0, (int[]) null, (ConstantPool) null);
      modulePackages0.setPackageIndexTable((int[]) null);
      assertEquals(0, modulePackages0.getNumberOfPackages());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[1];
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ModulePackages modulePackages0 = new ModulePackages(182, 182, intArray0, constantPool0);
      // Undeclared exception!
      try { 
        modulePackages0.getPackageNames();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ModulePackages modulePackages0 = new ModulePackages(0, 0, (int[]) null, (ConstantPool) null);
      String[] stringArray0 = modulePackages0.getPackageNames();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ModulePackages modulePackages0 = new ModulePackages(0, 0, (int[]) null, (ConstantPool) null);
      int int0 = modulePackages0.getNumberOfPackages();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[9];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ModulePackages modulePackages0 = new ModulePackages(27, 27, intArray0, constantPool0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("yg3y!un'1");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      modulePackages0.dump(dataOutputStream0);
      assertEquals(9, modulePackages0.getNumberOfPackages());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      InputStream inputStream0 = classPath0.getInputStream("", "");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      ModulePackages modulePackages0 = null;
      try {
        modulePackages0 = new ModulePackages(0, 0, dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[0];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ModulePackages modulePackages0 = new ModulePackages(0, 0, intArray0, constantPool0);
      ModulePackages modulePackages1 = new ModulePackages(modulePackages0);
      assertEquals(0, modulePackages1.getLength());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ModulePackages modulePackages0 = new ModulePackages(0, 0, (int[]) null, (ConstantPool) null);
      int[] intArray0 = modulePackages0.getPackageIndexTable();
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ModulePackages modulePackages0 = null;
      try {
        modulePackages0 = new ModulePackages((ModulePackages) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ModulePackages", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ModulePackages modulePackages0 = new ModulePackages(0, 0, (int[]) null, (ConstantPool) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      modulePackages0.accept(emptyVisitor0);
      assertEquals(0, modulePackages0.getNumberOfPackages());
  }
}
