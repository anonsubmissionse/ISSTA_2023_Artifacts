/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:11:13 GMT 2022
 */

package org.apache.bcel.verifier;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.util.ClassLoaderRepository;
import org.apache.bcel.util.Repository;
import org.apache.bcel.verifier.VerificationResult;
import org.apache.bcel.verifier.Verifier;
import org.apache.bcel.verifier.structurals.Pass3bVerifier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Verifier_ESTest extends Verifier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Verifier.verifyType("org.apache.bcel.generic.FNEG");
      Verifier verifier0 = new Verifier("org.apache.bcel.generic.FNEG");
      assertEquals("org.apache.bcel.generic.FNEG", verifier0.getClassName());
      assertNotNull(verifier0);
      
      VerificationResult verificationResult0 = verifier0.doPass2();
      assertEquals("org.apache.bcel.generic.FNEG", verifier0.getClassName());
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertEquals(1, verificationResult0.getStatus());
      assertNotNull(verificationResult0);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      
      VerificationResult verificationResult1 = verifier0.doPass2();
      assertEquals("org.apache.bcel.generic.FNEG", verifier0.getClassName());
      assertEquals(1, verificationResult1.getStatus());
      assertEquals("Passed verification.", verificationResult1.getMessage());
      assertSame(verificationResult1, verificationResult0);
      assertNotNull(verificationResult1);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      
      // Undeclared exception!
      try { 
        verifier0.doPass3a(129);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // METHOD DOES NOT EXIST!
         //
         verifyException("org.apache.bcel.verifier.statics.Pass3aVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Verifier verifier0 = new Verifier("D{$");
      assertEquals("D{$", verifier0.getClassName());
      assertNotNull(verifier0);
      
      VerificationResult verificationResult0 = verifier0.doPass2();
      assertEquals("D{$", verifier0.getClassName());
      assertEquals(0, verificationResult0.getStatus());
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertNotNull(verificationResult0);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "D{$";
      stringArray0[1] = "D{$";
      stringArray0[2] = "org.apache.bcel.verifier.Verifier";
      stringArray0[3] = "D{$";
      stringArray0[4] = "D{$";
      stringArray0[5] = "D{$";
      stringArray0[6] = "D{$";
      stringArray0[7] = "D{$";
      Verifier.main(stringArray0);
      assertEquals(8, stringArray0.length);
      
      String string0 = "";
      // Undeclared exception!
      Verifier.verifyType("org.apache.bcel.generic.InstructionConstants$Clinit");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "org.apache.bcel.generic.FCMPL";
      Verifier verifier0 = new Verifier("org.apache.bcel.generic.FCMPL");
      assertEquals("org.apache.bcel.generic.FCMPL", verifier0.getClassName());
      assertNotNull(verifier0);
      
      VerificationResult verificationResult0 = verifier0.doPass2();
      assertEquals("org.apache.bcel.generic.FCMPL", verifier0.getClassName());
      assertEquals(1, verificationResult0.getStatus());
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertNotNull(verificationResult0);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      
      verifier0.flush();
      assertEquals("org.apache.bcel.generic.FCMPL", verifier0.getClassName());
      
      verifier0.flush();
      assertEquals("org.apache.bcel.generic.FCMPL", verifier0.getClassName());
      
      String[] stringArray0 = verifier0.getMessages();
      assertEquals("org.apache.bcel.generic.FCMPL", verifier0.getClassName());
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      VerificationResult verificationResult1 = verifier0.doPass1();
      assertEquals("org.apache.bcel.generic.FCMPL", verifier0.getClassName());
      assertEquals(1, verificationResult1.getStatus());
      assertEquals("Passed verification.", verificationResult1.getMessage());
      assertSame(verificationResult1, verificationResult0);
      assertNotNull(verificationResult1);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      
      Verifier.verifyType((String) null);
      VerificationResult verificationResult2 = verifier0.doPass3a(2);
      assertEquals("org.apache.bcel.generic.FCMPL", verifier0.getClassName());
      assertEquals("Passed verification.", verificationResult2.getMessage());
      assertEquals(1, verificationResult2.getStatus());
      assertSame(verificationResult2, verificationResult0);
      assertSame(verificationResult2, verificationResult1);
      assertNotNull(verificationResult2);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      
      Verifier.main(stringArray0);
      assertEquals("org.apache.bcel.generic.FCMPL", verifier0.getClassName());
      assertEquals(0, stringArray0.length);
      
      Verifier.main(stringArray0);
      assertEquals("org.apache.bcel.generic.FCMPL", verifier0.getClassName());
      assertEquals(0, stringArray0.length);
      
      // Undeclared exception!
      try { 
        verifier0.doPass3b(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Some RuntimeException occured while verify()ing class 'org.apache.bcel.generic.FCMPL', method 'public void <init>()'. Original RuntimeException's stack trace:
         // ---
         // <evosuite>.<evosuite>(<evosuite>)
         // <evosuite>.<evosuite>(<evosuite>)
         // <evosuite>.<evosuite>(<evosuite>)
         // ---
         //
         verifyException("org.apache.bcel.verifier.structurals.Pass3bVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Verifier verifier0 = new Verifier("org.apache.bcel.generic.DCMPG");
      //  // Unstable assertion: assertEquals("org.apache.bcel.generic.DCMPG", verifier0.getClassName());
      //  // Unstable assertion: assertNotNull(verifier0);
      
      VerificationResult verificationResult0 = verifier0.doPass1();
      //  // Unstable assertion: assertEquals("org.apache.bcel.generic.DCMPG", verifier0.getClassName());
      //  // Unstable assertion: assertEquals(1, verificationResult0.getStatus());
      //  // Unstable assertion: assertEquals("Passed verification.", verificationResult0.getMessage());
      //  // Unstable assertion: assertNotNull(verificationResult0);
      //  // Unstable assertion: assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      //  // Unstable assertion: assertEquals(1, VerificationResult.VERIFIED_OK);
      //  // Unstable assertion: assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      
      String[] stringArray0 = verifier0.getMessages();
      //  // Unstable assertion: assertEquals("org.apache.bcel.generic.DCMPG", verifier0.getClassName());
      //  // Unstable assertion: assertNotNull(stringArray0);
      //  // Unstable assertion: assertEquals(0, stringArray0.length);
      
      int int0 = (-1);
      VerificationResult verificationResult1 = verifier0.doPass3b(1);
      //  // Unstable assertion: assertEquals("org.apache.bcel.generic.DCMPG", verifier0.getClassName());
      //  // Unstable assertion: assertEquals("Passed verification.", verificationResult1.getMessage());
      //  // Unstable assertion: assertEquals(1, verificationResult1.getStatus());
      //  // Unstable assertion: assertSame(verificationResult1, verificationResult0);
      //  // Unstable assertion: assertNotNull(verificationResult1);
      //  // Unstable assertion: assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      //  // Unstable assertion: assertEquals(1, VerificationResult.VERIFIED_OK);
      //  // Unstable assertion: assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      
      // Undeclared exception!
      try { 
        verifier0.doPass3b((-1));
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.verifier.statics.Pass3aVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = "' with proper signature not declared in superclass hierarchy.";
      stringArray0[0] = "' with proper signature not declared in superclass hierarchy.";
      String string1 = "org.apache.bcel.verifier.Verifier";
      stringArray0[1] = "org.apache.bcel.verifier.Verifier";
      stringArray0[2] = "Pass 3a, method number ";
      stringArray0[3] = "(bOkZ%v?o8OmF/i<%0";
      String string2 = "qtBbm;?Zhhf#pd5t~";
      stringArray0[4] = "qtBbm;?Zhhf#pd5t~";
      stringArray0[5] = "";
      String string3 = "r%57m6O";
      stringArray0[6] = "r%57m6O";
      String string4 = "^;sDCV";
      stringArray0[7] = "^;sDCV";
      Verifier.main(stringArray0);
      assertEquals(8, stringArray0.length);
      
      Verifier verifier0 = new Verifier("r%57m6O");
      assertEquals("r%57m6O", verifier0.getClassName());
      assertNotNull(verifier0);
      
      // Undeclared exception!
      Verifier.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Verifier.main(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Verifier verifier0 = new Verifier("&6`x|F{ag0");
      assertEquals("&6`x|F{ag0", verifier0.getClassName());
      assertNotNull(verifier0);
      
      VerificationResult verificationResult0 = verifier0.doPass2();
      assertEquals("&6`x|F{ag0", verifier0.getClassName());
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertEquals(0, verificationResult0.getStatus());
      assertNotNull(verificationResult0);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      
      VerificationResult verificationResult1 = verifier0.doPass3a(3705);
      assertEquals("&6`x|F{ag0", verifier0.getClassName());
      assertEquals("Not yet verified.", verificationResult1.getMessage());
      assertEquals(0, verificationResult1.getStatus());
      assertSame(verificationResult1, verificationResult0);
      assertNotNull(verificationResult1);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      
      VerificationResult verificationResult2 = verifier0.doPass2();
      assertEquals("&6`x|F{ag0", verifier0.getClassName());
      assertEquals("Not yet verified.", verificationResult2.getMessage());
      assertEquals(0, verificationResult2.getStatus());
      assertSame(verificationResult2, verificationResult0);
      assertSame(verificationResult2, verificationResult1);
      assertNotNull(verificationResult2);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      
      String[] stringArray1 = verifier0.getMessages();
      assertEquals("&6`x|F{ag0", verifier0.getClassName());
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      VerificationResult verificationResult3 = verifier0.doPass3a(47);
      assertEquals("&6`x|F{ag0", verifier0.getClassName());
      assertEquals("Not yet verified.", verificationResult3.getMessage());
      assertEquals(0, verificationResult3.getStatus());
      assertSame(verificationResult3, verificationResult1);
      assertSame(verificationResult3, verificationResult2);
      assertSame(verificationResult3, verificationResult0);
      assertNotNull(verificationResult3);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      
      VerificationResult verificationResult4 = verifier0.doPass2();
      assertEquals("&6`x|F{ag0", verifier0.getClassName());
      assertEquals("Not yet verified.", verificationResult4.getMessage());
      assertEquals(0, verificationResult4.getStatus());
      assertSame(verificationResult4, verificationResult3);
      assertSame(verificationResult4, verificationResult2);
      assertSame(verificationResult4, verificationResult0);
      assertSame(verificationResult4, verificationResult1);
      assertNotNull(verificationResult4);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      
      VerificationResult verificationResult5 = verifier0.doPass3b(7);
      assertEquals("&6`x|F{ag0", verifier0.getClassName());
      assertEquals("Not yet verified.", verificationResult5.getMessage());
      assertEquals(0, verificationResult5.getStatus());
      assertSame(verificationResult5, verificationResult2);
      assertSame(verificationResult5, verificationResult4);
      assertSame(verificationResult5, verificationResult3);
      assertSame(verificationResult5, verificationResult1);
      assertSame(verificationResult5, verificationResult0);
      assertNotNull(verificationResult5);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      
      String[] stringArray2 = new String[5];
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "";
      stringArray2[1] = "&6`x|F{ag0";
      stringArray2[2] = "org.apache.bcel.generic.IMPDEP1";
      stringArray2[3] = "&6`x|F{ag0";
      stringArray2[4] = "";
      // Undeclared exception!
      try { 
        Verifier.main(stringArray2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Some RuntimeException occured while verify()ing class 'org.apache.bcel.generic.IMPDEP1', method 'public void <init>()'. Original RuntimeException's stack trace:
         // ---
         // <evosuite>.<evosuite>(<evosuite>)
         // <evosuite>.<evosuite>(<evosuite>)
         // <evosuite>.<evosuite>(<evosuite>)
         // ---
         //
         verifyException("org.apache.bcel.verifier.structurals.Pass3bVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "org.apache.bcel.generic.FCMPL";
      Verifier verifier0 = new Verifier("org.apache.bcel.generic.FCMPL");
      assertEquals("org.apache.bcel.generic.FCMPL", verifier0.getClassName());
      assertNotNull(verifier0);
      
      VerificationResult verificationResult0 = verifier0.doPass2();
      assertEquals("org.apache.bcel.generic.FCMPL", verifier0.getClassName());
      assertEquals(1, verificationResult0.getStatus());
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertNotNull(verificationResult0);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      
      verifier0.flush();
      assertEquals("org.apache.bcel.generic.FCMPL", verifier0.getClassName());
      
      verifier0.flush();
      assertEquals("org.apache.bcel.generic.FCMPL", verifier0.getClassName());
      
      String[] stringArray0 = verifier0.getMessages();
      assertEquals("org.apache.bcel.generic.FCMPL", verifier0.getClassName());
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      // Undeclared exception!
      try { 
        verifier0.doPass3b((-1089));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1089
         //
         verifyException("org.apache.bcel.verifier.statics.Pass3aVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "org.apache.bcel.verifier.structurals.UninitializedObjectType";
      Verifier verifier0 = new Verifier("org.apache.bcel.verifier.structurals.UninitializedObjectType");
      assertEquals("org.apache.bcel.verifier.structurals.UninitializedObjectType", verifier0.getClassName());
      assertNotNull(verifier0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setClassAssertionStatus("org.apache.bcel.verifier.structurals.UninitializedObjectType", true);
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Pass3bVerifier> class0 = Pass3bVerifier.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertFalse(javaClass0.isTransient());
      assertEquals("Pass3bVerifier.java", javaClass0.getSourceFileName());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isPrivate());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isVolatile());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isNative());
      assertEquals("org.apache.bcel.verifier.PassVerifier", javaClass0.getSuperclassName());
      assertEquals(154, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isClass());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(0, javaClass0.getMinor());
      assertEquals("org.apache.bcel.verifier.structurals.Pass3bVerifier", javaClass0.getClassName());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isEnum());
      assertEquals("org.apache.bcel.verifier.structurals", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertEquals("org.apache.bcel.verifier.structurals.Pass3bVerifier", javaClass0.getFileName());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isFinal());
      assertNotNull(javaClass0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      
      Repository repository0 = javaClass0.getRepository();
      assertFalse(javaClass0.isTransient());
      assertEquals("Pass3bVerifier.java", javaClass0.getSourceFileName());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isPrivate());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isVolatile());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isNative());
      assertEquals("org.apache.bcel.verifier.PassVerifier", javaClass0.getSuperclassName());
      assertEquals(154, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isClass());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(0, javaClass0.getMinor());
      assertEquals("org.apache.bcel.verifier.structurals.Pass3bVerifier", javaClass0.getClassName());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isEnum());
      assertEquals("org.apache.bcel.verifier.structurals", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertEquals("org.apache.bcel.verifier.structurals.Pass3bVerifier", javaClass0.getFileName());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isFinal());
      assertSame(classLoaderRepository0, repository0);
      assertSame(repository0, classLoaderRepository0);
      assertNotNull(repository0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      
      org.apache.bcel.Repository.setRepository(repository0);
      assertFalse(javaClass0.isTransient());
      assertEquals("Pass3bVerifier.java", javaClass0.getSourceFileName());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isPrivate());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isVolatile());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isNative());
      assertEquals("org.apache.bcel.verifier.PassVerifier", javaClass0.getSuperclassName());
      assertEquals(154, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isClass());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(0, javaClass0.getMinor());
      assertEquals("org.apache.bcel.verifier.structurals.Pass3bVerifier", javaClass0.getClassName());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isEnum());
      assertEquals("org.apache.bcel.verifier.structurals", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertEquals("org.apache.bcel.verifier.structurals.Pass3bVerifier", javaClass0.getFileName());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isFinal());
      assertSame(classLoaderRepository0, repository0);
      assertSame(repository0, classLoaderRepository0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      
      String string1 = "il.append(new IINC(";
      Verifier.verifyType("il.append(new IINC(");
      // Undeclared exception!
      try { 
        verifier0.doPass3a((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.verifier.statics.Pass3aVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "org.apache.bcel.generic.L2F";
      Verifier verifier0 = new Verifier("org.apache.bcel.generic.L2F");
      assertEquals("org.apache.bcel.generic.L2F", verifier0.getClassName());
      assertNotNull(verifier0);
      
      VerificationResult verificationResult0 = verifier0.doPass1();
      assertEquals("org.apache.bcel.generic.L2F", verifier0.getClassName());
      assertEquals(1, verificationResult0.getStatus());
      assertEquals("Passed verification.", verificationResult0.getMessage());
      assertNotNull(verificationResult0);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      
      // Undeclared exception!
      try { 
        verifier0.doPass3b(95);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // METHOD DOES NOT EXIST!
         //
         verifyException("org.apache.bcel.verifier.statics.Pass3aVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Verifier verifier0 = new Verifier("");
      assertEquals("", verifier0.getClassName());
      assertNotNull(verifier0);
      
      String[] stringArray0 = verifier0.getMessages();
      assertEquals("", verifier0.getClassName());
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      VerificationResult verificationResult0 = verifier0.doPass3b(2398);
      assertEquals("", verifier0.getClassName());
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertEquals(0, verificationResult0.getStatus());
      assertNotNull(verificationResult0);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      
      String string0 = verifier0.getClassName();
      assertEquals("", string0);
      assertEquals("", verifier0.getClassName());
      assertNotNull(string0);
      
      VerificationResult verificationResult1 = verifier0.doPass3a((-4286));
      assertEquals("", verifier0.getClassName());
      assertEquals(0, verificationResult1.getStatus());
      assertEquals("Not yet verified.", verificationResult1.getMessage());
      assertSame(verificationResult1, verificationResult0);
      assertNotNull(verificationResult1);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Verifier verifier0 = new Verifier((String) null);
      assertNull(verifier0.getClassName());
      assertNotNull(verifier0);
      
      String[] stringArray0 = verifier0.getMessages();
      assertNull(verifier0.getClassName());
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Verifier.main(stringArray0);
      assertNull(verifier0.getClassName());
      assertEquals(0, stringArray0.length);
      
      Verifier.verifyType((String) null);
      Verifier.main(stringArray0);
      assertNull(verifier0.getClassName());
      assertEquals(0, stringArray0.length);
      
      VerificationResult verificationResult0 = verifier0.doPass2();
      assertNull(verifier0.getClassName());
      assertEquals(0, verificationResult0.getStatus());
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertNotNull(verificationResult0);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      
      verifier0.flush();
      assertNull(verifier0.getClassName());
      
      VerificationResult verificationResult1 = verifier0.doPass1();
      assertNull(verifier0.getClassName());
      assertEquals("Parsing via BCEL did not succeed. org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException occured:\norg.apache.bcel.util.AbstractClassPathRepository.loadClass(AbstractClassPathRepository.java:67)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n", verificationResult1.getMessage());
      assertEquals(2, verificationResult1.getStatus());
      assertNotSame(verificationResult1, verificationResult0);
      assertNotNull(verificationResult1);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertFalse(verificationResult1.equals((Object)verificationResult0));
      
      String string0 = verifier0.getClassName();
      assertNull(verifier0.getClassName());
      assertNull(string0);
      
      String[] stringArray1 = verifier0.getMessages();
      assertNull(verifier0.getClassName());
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Verifier verifier0 = new Verifier("org.apache.bcel.generic.DCMPG");
      assertEquals("org.apache.bcel.generic.DCMPG", verifier0.getClassName());
      assertNotNull(verifier0);
      
      // Undeclared exception!
      try { 
        verifier0.doPass3b((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.verifier.statics.Pass3aVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Verifier verifier0 = new Verifier("Only element values of type annotation can be built with this ctor - type specified: ");
      assertEquals("Only element values of type annotation can be built with this ctor - type specified: ", verifier0.getClassName());
      assertNotNull(verifier0);
      
      VerificationResult verificationResult0 = verifier0.doPass3a(989);
      assertEquals("Only element values of type annotation can be built with this ctor - type specified: ", verifier0.getClassName());
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertEquals(0, verificationResult0.getStatus());
      assertNotNull(verificationResult0);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      
      VerificationResult verificationResult1 = verifier0.doPass3a(989);
      assertEquals("Only element values of type annotation can be built with this ctor - type specified: ", verifier0.getClassName());
      assertEquals("Not yet verified.", verificationResult1.getMessage());
      assertEquals(0, verificationResult1.getStatus());
      assertSame(verificationResult1, verificationResult0);
      assertNotNull(verificationResult1);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      
      VerificationResult verificationResult2 = verifier0.doPass1();
      assertEquals("Only element values of type annotation can be built with this ctor - type specified: ", verifier0.getClassName());
      assertEquals(2, verificationResult2.getStatus());
      assertEquals("Repository.lookup() failed. FILE NOT FOUND?", verificationResult2.getMessage());
      assertNotSame(verificationResult2, verificationResult1);
      assertNotSame(verificationResult2, verificationResult0);
      assertNotNull(verificationResult2);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertFalse(verificationResult2.equals((Object)verificationResult1));
      assertFalse(verificationResult2.equals((Object)verificationResult0));
      
      String string0 = verifier0.getClassName();
      assertEquals("Only element values of type annotation can be built with this ctor - type specified: ", string0);
      assertEquals("Only element values of type annotation can be built with this ctor - type specified: ", verifier0.getClassName());
      assertNotNull(string0);
      
      VerificationResult verificationResult3 = verifier0.doPass3b(0);
      assertEquals("Only element values of type annotation can be built with this ctor - type specified: ", verifier0.getClassName());
      assertEquals(0, verificationResult3.getStatus());
      assertEquals("Not yet verified.", verificationResult3.getMessage());
      assertNotSame(verificationResult3, verificationResult2);
      assertSame(verificationResult3, verificationResult1);
      assertSame(verificationResult3, verificationResult0);
      assertNotNull(verificationResult3);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertFalse(verificationResult3.equals((Object)verificationResult2));
      
      VerificationResult verificationResult4 = verifier0.doPass1();
      assertEquals("Only element values of type annotation can be built with this ctor - type specified: ", verifier0.getClassName());
      assertEquals("Repository.lookup() failed. FILE NOT FOUND?", verificationResult4.getMessage());
      assertEquals(2, verificationResult4.getStatus());
      assertNotSame(verificationResult4, verificationResult1);
      assertNotSame(verificationResult4, verificationResult3);
      assertNotSame(verificationResult4, verificationResult0);
      assertSame(verificationResult4, verificationResult2);
      assertNotNull(verificationResult4);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertFalse(verificationResult4.equals((Object)verificationResult1));
      assertFalse(verificationResult4.equals((Object)verificationResult3));
      assertFalse(verificationResult4.equals((Object)verificationResult0));
      
      Verifier.verifyType("Only element values of type annotation can be built with this ctor - type specified: ");
      String[] stringArray0 = verifier0.getMessages();
      assertEquals("Only element values of type annotation can be built with this ctor - type specified: ", verifier0.getClassName());
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      VerificationResult verificationResult5 = verifier0.doPass3b(0);
      assertEquals("Only element values of type annotation can be built with this ctor - type specified: ", verifier0.getClassName());
      assertEquals(0, verificationResult5.getStatus());
      assertEquals("Not yet verified.", verificationResult5.getMessage());
      assertSame(verificationResult5, verificationResult3);
      assertSame(verificationResult5, verificationResult0);
      assertNotSame(verificationResult5, verificationResult4);
      assertNotSame(verificationResult5, verificationResult2);
      assertSame(verificationResult5, verificationResult1);
      assertNotNull(verificationResult5);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertFalse(verificationResult5.equals((Object)verificationResult4));
      assertFalse(verificationResult5.equals((Object)verificationResult2));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Verifier verifier0 = new Verifier("");
      assertEquals("", verifier0.getClassName());
      assertNotNull(verifier0);
      
      VerificationResult verificationResult0 = verifier0.doPass3b((-1201));
      assertEquals("", verifier0.getClassName());
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertEquals(0, verificationResult0.getStatus());
      assertNotNull(verificationResult0);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      
      String[] stringArray0 = verifier0.getMessages();
      assertEquals("", verifier0.getClassName());
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = " /D";
      Verifier verifier0 = new Verifier(" /D");
      assertEquals(" /D", verifier0.getClassName());
      assertNotNull(verifier0);
      
      VerificationResult verificationResult0 = verifier0.doPass2();
      assertEquals(" /D", verifier0.getClassName());
      assertEquals(0, verificationResult0.getStatus());
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertNotNull(verificationResult0);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      
      Repository repository0 = null;
      org.apache.bcel.Repository.setRepository((Repository) null);
      VerificationResult verificationResult1 = verifier0.doPass2();
      assertEquals(" /D", verifier0.getClassName());
      assertEquals("Not yet verified.", verificationResult1.getMessage());
      assertEquals(0, verificationResult1.getStatus());
      assertSame(verificationResult1, verificationResult0);
      assertNotNull(verificationResult1);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      
      verifier0.flush();
      assertEquals(" /D", verifier0.getClassName());
      
      Verifier.verifyType(" /D");
      String[] stringArray0 = new String[5];
      stringArray0[0] = " /D";
      stringArray0[1] = " /D";
      stringArray0[2] = " /D";
      VerificationResult verificationResult2 = verifier0.doPass2();
      assertEquals(" /D", verifier0.getClassName());
      assertEquals("Not yet verified.", verificationResult2.getMessage());
      assertEquals(0, verificationResult2.getStatus());
      assertSame(verificationResult2, verificationResult1);
      assertSame(verificationResult2, verificationResult0);
      assertNotNull(verificationResult2);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      
      stringArray0[3] = " /D";
      stringArray0[4] = " /D";
      // Undeclared exception!
      try { 
        Verifier.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.Repository", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "`vG}z]";
      stringArray0[1] = "X$i\"#R7V T0`fC";
      stringArray0[2] = ".;dNso";
      stringArray0[3] = "E;Bq#9>]]PkXsv0{>X5";
      stringArray0[4] = "?e.class";
      Verifier.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[14];
      stringArray0[0] = "`vG}z]";
      stringArray0[1] = "X$i\"#R7V T0`fC";
      stringArray0[2] = ".;dbso";
      stringArray0[3] = "E;Bq#9>]]PkXsv0{>X5";
      stringArray0[4] = "?e.class";
      // Undeclared exception!
      try { 
        Verifier.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Verifier.verifyType((String) null);
      Verifier verifier0 = new Verifier("Lq-K2rN/");
      assertEquals("Lq-K2rN/", verifier0.getClassName());
      assertNotNull(verifier0);
      
      VerificationResult verificationResult0 = verifier0.doPass3b(1922);
      assertEquals("Lq-K2rN/", verifier0.getClassName());
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertEquals(0, verificationResult0.getStatus());
      assertNotNull(verificationResult0);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      
      VerificationResult verificationResult1 = verifier0.doPass3b((-2615));
      assertEquals("Lq-K2rN/", verifier0.getClassName());
      assertEquals("Not yet verified.", verificationResult1.getMessage());
      assertEquals(0, verificationResult1.getStatus());
      assertSame(verificationResult1, verificationResult0);
      assertNotNull(verificationResult1);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      
      String[] stringArray0 = verifier0.getMessages();
      assertEquals("Lq-K2rN/", verifier0.getClassName());
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "Lq-K2rN/";
      stringArray1[1] = null;
      stringArray1[2] = "Lq-K2rN/";
      Verifier.verifyType("u437<ZQYHx-s1");
      VerificationResult verificationResult2 = verifier0.doPass3b((-4012));
      assertEquals("Lq-K2rN/", verifier0.getClassName());
      assertEquals(0, verificationResult2.getStatus());
      assertEquals("Not yet verified.", verificationResult2.getMessage());
      assertSame(verificationResult2, verificationResult0);
      assertSame(verificationResult2, verificationResult1);
      assertNotNull(verificationResult2);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      
      stringArray1[3] = null;
      stringArray1[4] = "Lq-K2rN/";
      VerificationResult verificationResult3 = verifier0.doPass3a(1249);
      assertEquals("Lq-K2rN/", verifier0.getClassName());
      assertEquals("Not yet verified.", verificationResult3.getMessage());
      assertEquals(0, verificationResult3.getStatus());
      assertSame(verificationResult3, verificationResult2);
      assertSame(verificationResult3, verificationResult1);
      assertSame(verificationResult3, verificationResult0);
      assertNotNull(verificationResult3);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      
      VerificationResult verificationResult4 = verifier0.doPass2();
      assertEquals("Lq-K2rN/", verifier0.getClassName());
      assertEquals("Not yet verified.", verificationResult4.getMessage());
      assertEquals(0, verificationResult4.getStatus());
      assertSame(verificationResult4, verificationResult2);
      assertSame(verificationResult4, verificationResult1);
      assertSame(verificationResult4, verificationResult0);
      assertSame(verificationResult4, verificationResult3);
      assertNotNull(verificationResult4);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      
      stringArray1[5] = "Lq-K2rN/";
      // Undeclared exception!
      try { 
        Verifier.main(stringArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "_N?x`I8Hoo";
      stringArray0[1] = "pBYvvRzpW)sXJlrbDZv";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "?e";
      stringArray0[5] = "";
      stringArray0[6] = ".class";
      Verifier.main(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Verifier verifier0 = new Verifier("D{$");
      assertEquals("D{$", verifier0.getClassName());
      assertNotNull(verifier0);
      
      VerificationResult verificationResult0 = verifier0.doPass2();
      assertEquals("D{$", verifier0.getClassName());
      assertEquals(0, verificationResult0.getStatus());
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertNotNull(verificationResult0);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "D{$";
      stringArray0[1] = "D{$";
      stringArray0[2] = "org.apache.bcel.verifier.Verifier";
      stringArray0[3] = "D{$";
      stringArray0[4] = "D{$";
      stringArray0[5] = "D{$";
      stringArray0[6] = "D{$";
      stringArray0[7] = "D{$";
      Verifier.main(stringArray0);
      assertEquals(8, stringArray0.length);
      
      Verifier.verifyType("");
      String[] stringArray1 = verifier0.getMessages();
      assertEquals("D{$", verifier0.getClassName());
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      verifier0.flush();
      assertEquals("D{$", verifier0.getClassName());
      
      VerificationResult verificationResult1 = verifier0.doPass3b((-2052));
      assertEquals("D{$", verifier0.getClassName());
      assertEquals(0, verificationResult1.getStatus());
      assertEquals("Not yet verified.", verificationResult1.getMessage());
      assertSame(verificationResult1, verificationResult0);
      assertNotNull(verificationResult1);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      
      VerificationResult verificationResult2 = verifier0.doPass1();
      assertEquals("Repository.lookup() failed. FILE NOT FOUND?", verificationResult2.getMessage());
      assertEquals(2, verificationResult2.getStatus());
      assertEquals("D{$", verifier0.getClassName());
      assertNotSame(verificationResult2, verificationResult0);
      assertNotSame(verificationResult2, verificationResult1);
      assertNotNull(verificationResult2);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertFalse(verificationResult2.equals((Object)verificationResult0));
      assertFalse(verificationResult2.equals((Object)verificationResult1));
      
      String string0 = verifier0.getClassName();
      assertEquals("D{$", string0);
      assertEquals("D{$", verifier0.getClassName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Verifier verifier0 = new Verifier("");
      assertEquals("", verifier0.getClassName());
      assertNotNull(verifier0);
      
      String[] stringArray0 = verifier0.getMessages();
      assertEquals("", verifier0.getClassName());
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      VerificationResult verificationResult0 = verifier0.doPass2();
      assertEquals("", verifier0.getClassName());
      assertEquals(0, verificationResult0.getStatus());
      assertEquals("Not yet verified.", verificationResult0.getMessage());
      assertNotNull(verificationResult0);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      
      VerificationResult verificationResult1 = verifier0.doPass3a((-381));
      assertEquals("", verifier0.getClassName());
      assertEquals(0, verificationResult1.getStatus());
      assertEquals("Not yet verified.", verificationResult1.getMessage());
      assertSame(verificationResult1, verificationResult0);
      assertNotNull(verificationResult1);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      
      VerificationResult verificationResult2 = verifier0.doPass1();
      assertEquals("", verifier0.getClassName());
      assertEquals("Parsing via BCEL did not succeed. org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException occured:\norg.apache.bcel.util.AbstractClassPathRepository.loadClass(AbstractClassPathRepository.java:67)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n", verificationResult2.getMessage());
      assertEquals(2, verificationResult2.getStatus());
      assertNotSame(verificationResult2, verificationResult0);
      assertNotSame(verificationResult2, verificationResult1);
      assertNotNull(verificationResult2);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertFalse(verificationResult2.equals((Object)verificationResult0));
      assertFalse(verificationResult2.equals((Object)verificationResult1));
      
      VerificationResult verificationResult3 = verifier0.doPass1();
      assertEquals("", verifier0.getClassName());
      assertEquals("Parsing via BCEL did not succeed. org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException occured:\norg.apache.bcel.util.AbstractClassPathRepository.loadClass(AbstractClassPathRepository.java:67)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n", verificationResult3.getMessage());
      assertEquals(2, verificationResult3.getStatus());
      assertNotSame(verificationResult3, verificationResult1);
      assertNotSame(verificationResult3, verificationResult0);
      assertSame(verificationResult3, verificationResult2);
      assertNotNull(verificationResult3);
      assertEquals(1, VerificationResult.VERIFIED_OK);
      assertEquals(2, VerificationResult.VERIFIED_REJECTED);
      assertEquals(0, VerificationResult.VERIFIED_NOTYET);
      assertFalse(verificationResult3.equals((Object)verificationResult1));
      assertFalse(verificationResult3.equals((Object)verificationResult0));
      
      verifier0.flush();
      assertEquals("", verifier0.getClassName());
      
      Verifier.main(stringArray0);
      assertEquals("", verifier0.getClassName());
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = new String[8];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "$V2+";
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray1[3] = "HPYIY5k({^`";
      stringArray1[4] = "$kqxi!9";
      stringArray1[5] = "";
      stringArray1[6] = " ('";
      stringArray1[7] = "";
      Verifier.main(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Verifier verifier0 = new Verifier("tukg}");
      verifier0.doPass1();
      verifier0.doPass2();
      String[] stringArray0 = new String[8];
      verifier0.doPass1();
      stringArray0[0] = "tukg}";
      stringArray0[1] = "tukg}";
      stringArray0[2] = "tukg}";
      stringArray0[3] = "tukg}";
      stringArray0[4] = "tukg}";
      stringArray0[5] = "/<dR-~b!$RX<lcEb^";
      stringArray0[6] = "tukg}";
      stringArray0[7] = "tukg}";
      Verifier.main(stringArray0);
      verifier0.flush();
      verifier0.flush();
      Verifier.verifyType("tukg}");
      Verifier.verifyType(".<dR-~b!$RX<lcEb^");
      Verifier.verifyType("tukg}");
      verifier0.flush();
      verifier0.flush();
      verifier0.doPass2();
      verifier0.getClassName();
      verifier0.doPass2();
      verifier0.doPass3b(0);
      verifier0.doPass3b(0);
      Verifier.verifyType("tukg}");
  }
}
