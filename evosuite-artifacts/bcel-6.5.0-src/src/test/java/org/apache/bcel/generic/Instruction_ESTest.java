/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 21:18:21 GMT 2022
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.generic.ALOAD;
import org.apache.bcel.generic.ASTORE;
import org.apache.bcel.generic.CALOAD;
import org.apache.bcel.generic.CASTORE;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.DCMPL;
import org.apache.bcel.generic.DLOAD;
import org.apache.bcel.generic.DSTORE;
import org.apache.bcel.generic.DUP;
import org.apache.bcel.generic.DUP2_X2;
import org.apache.bcel.generic.F2I;
import org.apache.bcel.generic.FCMPG;
import org.apache.bcel.generic.FLOAD;
import org.apache.bcel.generic.FMUL;
import org.apache.bcel.generic.FRETURN;
import org.apache.bcel.generic.FSTORE;
import org.apache.bcel.generic.GETSTATIC;
import org.apache.bcel.generic.IDIV;
import org.apache.bcel.generic.IFNE;
import org.apache.bcel.generic.IINC;
import org.apache.bcel.generic.ILOAD;
import org.apache.bcel.generic.IMPDEP2;
import org.apache.bcel.generic.INVOKEVIRTUAL;
import org.apache.bcel.generic.ISTORE;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionComparator;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.JSR;
import org.apache.bcel.generic.L2D;
import org.apache.bcel.generic.LCONST;
import org.apache.bcel.generic.LDC;
import org.apache.bcel.generic.LLOAD;
import org.apache.bcel.generic.LSHR;
import org.apache.bcel.generic.LSTORE;
import org.apache.bcel.generic.LXOR;
import org.apache.bcel.generic.NOP;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.SIPUSH;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.verifier.structurals.InstConstraintVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Instruction_ESTest extends Instruction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = Instruction.isValidShort(32767);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, 127);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-128));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      NOP nOP0 = new NOP();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      nOP0.accept(instConstraintVisitor0);
      assertEquals(1, nOP0.getLength());
      assertEquals((short)0, nOP0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      NOP nOP0 = (NOP)Instruction.readInstruction(byteSequence0);
      nOP0.setOpcode((short)253);
      assertEquals((short)253, nOP0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IINC iINC0 = new IINC();
      iINC0.setLength(2202);
      assertEquals(2202, iINC0.getLength());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      L2D l2D0 = new L2D();
      byte[] byteArray0 = new byte[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      l2D0.initFromFile(byteSequence0, true);
      assertEquals(1, l2D0.getLength());
      assertEquals((short)138, l2D0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FMUL fMUL0 = new FMUL();
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = fMUL0.toString(constantPool0);
      assertEquals(1, fMUL0.getLength());
      assertEquals("fmul", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)115;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals((short)115, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CASTORE cASTORE0 = new CASTORE();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = cASTORE0.produceStack(constantPoolGen0);
      assertEquals(1, cASTORE0.getLength());
      assertEquals(0, int0);
      assertEquals((short)85, cASTORE0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = dUP2_X2_0.produceStack(constantPoolGen0);
      assertEquals(6, int0);
      assertEquals(1, dUP2_X2_0.getLength());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      IMPDEP2 iMPDEP2_0 = new IMPDEP2();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = iMPDEP2_0.produceStack(constantPoolGen0);
      assertEquals(1, iMPDEP2_0.getLength());
      assertEquals((-2), int0);
      assertEquals((short)255, iMPDEP2_0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IDIV iDIV0 = new IDIV();
      short short0 = iDIV0.getOpcode();
      assertEquals(1, iDIV0.getLength());
      assertEquals((short)108, short0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LDC lDC0 = new LDC();
      short short0 = lDC0.getOpcode();
      assertEquals((short) (-1), short0);
      assertEquals(1, lDC0.getLength());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      boolean boolean0 = instruction0.equals(instruction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      Instruction instruction1 = instruction0.copy();
      assertSame(instruction1, instruction0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      IMPDEP2 iMPDEP2_0 = new IMPDEP2();
      assertEquals(1, iMPDEP2_0.getLength());
      
      iMPDEP2_0.length = (short) (-2098);
      Instruction instruction0 = iMPDEP2_0.copy();
      assertNotSame(iMPDEP2_0, instruction0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      IINC iINC0 = new IINC(176, 176);
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = iINC0.consumeStack(constantPoolGen0);
      assertEquals((short)132, iINC0.getOpcode());
      assertEquals(6, iINC0.getLength());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      IMPDEP2 iMPDEP2_0 = new IMPDEP2();
      int int0 = iMPDEP2_0.consumeStack((ConstantPoolGen) null);
      assertEquals(1, iMPDEP2_0.getLength());
      assertEquals((short)255, iMPDEP2_0.getOpcode());
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      INVOKEVIRTUAL iNVOKEVIRTUAL0 = new INVOKEVIRTUAL(905);
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        iNVOKEVIRTUAL0.toString(constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 905. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      IINC iINC0 = new IINC();
      // Undeclared exception!
      try { 
        iINC0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        Instruction.readInstruction((ByteSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      GETSTATIC gETSTATIC0 = new GETSTATIC(893);
      // Undeclared exception!
      try { 
        gETSTATIC0.produceStack((ConstantPoolGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LCONST lCONST0 = new LCONST();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        lCONST0.produceStack(constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LDC lDC0 = new LDC();
      // Undeclared exception!
      try { 
        lDC0.getName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      IDIV iDIV0 = new IDIV();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        iDIV0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      F2I f2I0 = new F2I();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        f2I0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSR jSR0 = new JSR();
      // Undeclared exception!
      try { 
        jSR0.copy();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.generic.InstructionConst", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LDC lDC0 = new LDC();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        lDC0.consumeStack(constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SIPUSH sIPUSH0 = new SIPUSH((short)165);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        sIPUSH0.accept(instConstraintVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = Instruction.isValidShort(254);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = Instruction.isValidByte((-1024));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-20);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 236
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(3, instruction0.getLength());
      assertEquals((short)181, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(2, instruction0.getLength());
      assertEquals((short)16, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      byteSequence0.readShort();
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(2, instruction0.getLength());
      assertEquals((short)169, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction.readInstruction(byteSequence0);
      assertEquals(1, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction.readInstruction(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-13);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 243
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-25);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 231
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction.readInstruction(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(2, instruction0.getLength());
      assertEquals((short)18, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)38;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals((short)38, instruction0.getOpcode());
      assertEquals(1, instruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(1, instruction0.getLength());
      assertEquals((short)73, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-54);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((short)202, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-6);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 250
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-30);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 226
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-58);
      byteArray0[3] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction.readInstruction(byteSequence0);
      ISTORE iSTORE0 = (ISTORE)Instruction.readInstruction(byteSequence0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(3, iSTORE0.getIndex());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals((short)19, instruction0.getOpcode());
      assertEquals(3, instruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals((short)184, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals((short)166, instruction0.getOpcode());
      assertEquals(3, instruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals((short)159, instruction0.getOpcode());
      assertEquals(3, instruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-12);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 244
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(1, instruction0.getLength());
      assertEquals((short)67, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((short)56, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)33;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(1, instruction0.getLength());
      assertEquals((short)33, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FSTORE fSTORE0 = (FSTORE)Instruction.readInstruction(byteSequence0);
      assertEquals(3, fSTORE0.getIndex());
      assertEquals(1, fSTORE0.getLength());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((short)188, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)30;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(1, instruction0.getLength());
      assertEquals((short)30, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-27);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 229
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)26;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, instruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-31);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 225
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals((short)63, instruction0.getOpcode());
      assertEquals(1, instruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-42);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 214
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals((short)187, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals((short)163, instruction0.getOpcode());
      assertEquals(3, instruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(3, instruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction.readInstruction(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-43);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 213
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-52);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 204
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-28);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 228
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)60;
      byteArray0[0] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((short)60, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals((short)182, instruction0.getOpcode());
      assertEquals(3, instruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 235
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-4);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 252
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)75;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ASTORE aSTORE0 = (ASTORE)Instruction.readInstruction(byteSequence0);
      assertEquals(1, aSTORE0.getLength());
      assertEquals(0, aSTORE0.getIndex());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ILOAD iLOAD0 = (ILOAD)Instruction.readInstruction(byteSequence0);
      assertEquals(3, iLOAD0.getIndex());
      assertEquals(1, iLOAD0.getLength());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(3, instruction0.getLength());
      assertEquals((short)156, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ILOAD iLOAD0 = (ILOAD)Instruction.readInstruction(byteSequence0);
      assertEquals(1, iLOAD0.getLength());
      assertEquals(1, iLOAD0.getIndex());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals((short)160, instruction0.getOpcode());
      assertEquals(3, instruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-10);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 246
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FSTORE fSTORE0 = (FSTORE)Instruction.readInstruction(byteSequence0);
      assertEquals(1, fSTORE0.getLength());
      assertEquals(2, fSTORE0.getIndex());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(2, instruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-48);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 208
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      DLOAD dLOAD0 = (DLOAD)Instruction.readInstruction(byteSequence0);
      assertEquals(1, dLOAD0.getLength());
      assertEquals(1, dLOAD0.getIndex());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-55);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals((short)183, instruction0.getOpcode());
      assertEquals(3, instruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((short)54, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(3, instruction0.getLength());
      assertEquals((short)164, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(1, instruction0.getLength());
      assertEquals((short)76, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-7);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 249
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals((short)157, instruction0.getOpcode());
      assertEquals(3, instruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)28;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals((short)28, instruction0.getOpcode());
      assertEquals(1, instruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LCONST lCONST0 = new LCONST();
      // Undeclared exception!
      try { 
        lCONST0.toString(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      L2D l2D0 = new L2D();
      String string0 = l2D0.toString(false);
      assertEquals("l2d", string0);
      assertEquals(1, l2D0.getLength());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FRETURN fRETURN0 = (FRETURN)InstructionConstants.FRETURN;
      fRETURN0.hashCode();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CALOAD cALOAD0 = new CALOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = cALOAD0.consumeStack(constantPoolGen0);
      assertEquals(1, cALOAD0.getLength());
      assertEquals((short)52, cALOAD0.getOpcode());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DCMPL dCMPL0 = new DCMPL();
      String string0 = dCMPL0.getName();
      assertEquals("dcmpl", string0);
      assertEquals(1, dCMPL0.getLength());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      int int0 = instruction0.getLength();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      short short0 = instruction0.getOpcode();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = Instruction.isValidShort(32811);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-32789));
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = Instruction.isValidByte((byte) (-25));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = Instruction.isValidByte(254);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-32768));
      assertEquals(1, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FLOAD fLOAD0 = new FLOAD();
      FCMPG fCMPG0 = new FCMPG();
      fLOAD0.equals(fCMPG0);
      assertEquals(1, fLOAD0.getLength());
      assertEquals((short) (-1), fLOAD0.getOpcode());
      assertEquals(1, fCMPG0.getLength());
      assertEquals((short)150, fCMPG0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      boolean boolean0 = instruction0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      byteArray0[1] = (byte) (-1);
      byteArray0[0] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode after wide: 255
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)55;
      byteArray0[0] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((short)55, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-2);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((short)254, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-3);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 253
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-5);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 251
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-8);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 248
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-9);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 247
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-11);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 245
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-14);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 242
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[1] = (byte) (-15);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 241
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-16);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 240
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte) (-17);
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 239
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-18);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 238
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-19);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 237
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-22);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 234
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-23);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 233
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-24);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 232
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-26);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 230
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-29);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 227
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-32);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 224
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-33);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 223
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-34);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 222
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-35);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 221
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-36);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 220
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-37);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 219
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-38);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 218
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-39);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 217
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-40);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 216
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-41);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 215
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-44);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 212
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-45);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 211
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-46);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 210
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-47);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 209
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-49);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 207
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-50);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 206
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-51);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 205
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-53);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 203
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals((short)200, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(4, instruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-60);
      byteArray0[0] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 196
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(3, instruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(3, instruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction.readInstruction(byteSequence0);
      assertEquals(5, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals((short)185, instruction0.getOpcode());
      assertEquals(5, instruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(3, instruction0.getLength());
      assertEquals((short)180, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(3, instruction0.getLength());
      assertEquals((short)179, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals((short)178, instruction0.getOpcode());
      assertEquals(3, instruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals((short)168, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals((short)167, instruction0.getOpcode());
      assertEquals(3, instruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals((short)165, instruction0.getOpcode());
      assertEquals(3, instruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(3, instruction0.getLength());
      assertEquals((short)162, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(3, instruction0.getLength());
      assertEquals((short)161, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(3, instruction0.getLength());
      assertEquals((short)158, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals((short)155, instruction0.getOpcode());
      assertEquals(3, instruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(3, instruction0.getLength());
      assertEquals((short)154, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(3, instruction0.getLength());
      assertEquals((short)153, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction.readInstruction(byteSequence0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(1, instruction0.getLength());
      assertEquals((short)78, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ASTORE aSTORE0 = (ASTORE)Instruction.readInstruction(byteSequence0);
      assertEquals(1, aSTORE0.getLength());
      assertEquals(2, aSTORE0.getIndex());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      DSTORE dSTORE0 = (DSTORE)Instruction.readInstruction(byteSequence0);
      assertEquals(1, dSTORE0.getLength());
      assertEquals(3, dSTORE0.getIndex());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction.readInstruction(byteSequence0);
      DSTORE dSTORE0 = (DSTORE)Instruction.readInstruction(byteSequence0);
      assertEquals(1, dSTORE0.getLength());
      assertEquals(1, dSTORE0.getIndex());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)71;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(7, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FSTORE fSTORE0 = (FSTORE)Instruction.readInstruction(byteSequence0);
      assertEquals(1, fSTORE0.getIndex());
      assertEquals(1, fSTORE0.getLength());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(1, instruction0.getLength());
      assertEquals((short)66, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      LSTORE lSTORE0 = (LSTORE)Instruction.readInstruction(byteSequence0);
      assertEquals(1, lSTORE0.getLength());
      assertEquals(2, lSTORE0.getIndex());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      LSTORE lSTORE0 = (LSTORE)Instruction.readInstruction(byteSequence0);
      assertEquals(1, lSTORE0.getIndex());
      assertEquals(1, lSTORE0.getLength());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)61;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ISTORE iSTORE0 = (ISTORE)Instruction.readInstruction(byteSequence0);
      assertEquals(1, iSTORE0.getLength());
      assertEquals(2, iSTORE0.getIndex());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((short)45, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)44;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ALOAD aLOAD0 = (ALOAD)Instruction.readInstruction(byteSequence0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(2, aLOAD0.getIndex());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ALOAD aLOAD0 = (ALOAD)Instruction.readInstruction(byteSequence0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, aLOAD0.getIndex());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((short)42, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, instruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, instruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[3] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction.readInstruction(byteSequence0);
      Instruction.readInstruction(byteSequence0);
      assertEquals(4, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((short)36, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)35;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((short)35, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((short)34, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, instruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      LLOAD lLOAD0 = (LLOAD)Instruction.readInstruction(byteSequence0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, lLOAD0.getIndex());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      byteArray0[0] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((short)25, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals((short)24, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction.readInstruction(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction.readInstruction(byteSequence0);
      assertEquals(3, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      InstructionComparator instructionComparator0 = Instruction.getComparator();
      Instruction.setComparator(instructionComparator0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      IFNE iFNE0 = new IFNE();
      // Undeclared exception!
      try { 
        iFNE0.toString((ConstantPool) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      LXOR lXOR0 = new LXOR();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(92);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 92);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      lXOR0.dump(dataOutputStream0);
      assertEquals((short)131, lXOR0.getOpcode());
      assertEquals(1, lXOR0.getLength());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      LSHR lSHR0 = new LSHR();
      String string0 = lSHR0.toString();
      assertEquals((short)123, lSHR0.getOpcode());
      assertEquals("lshr[123](1)", string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      DUP dUP0 = new DUP();
      dUP0.dispose();
      assertEquals((short)89, dUP0.getOpcode());
      assertEquals(1, dUP0.getLength());
  }
}
