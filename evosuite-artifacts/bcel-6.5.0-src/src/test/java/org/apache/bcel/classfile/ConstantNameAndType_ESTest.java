/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:56:42 GMT 2022
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.Visitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantNameAndType_ESTest extends ConstantNameAndType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1023), 0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantNameAndType0.accept(emptyVisitor0);
      assertEquals((-1023), constantNameAndType0.getNameIndex());
      assertEquals(0, constantNameAndType0.getSignatureIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1685, 1685);
      int int0 = constantNameAndType0.getSignatureIndex();
      assertEquals(1685, constantNameAndType0.getNameIndex());
      assertEquals(1685, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1957), (-754));
      int int0 = constantNameAndType0.getSignatureIndex();
      assertEquals((-754), int0);
      assertEquals((-1957), constantNameAndType0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(0, 0);
      int int0 = constantNameAndType0.getNameIndex();
      assertEquals(0, constantNameAndType0.getSignatureIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(42, 12);
      int int0 = constantNameAndType0.getNameIndex();
      assertEquals(42, int0);
      assertEquals(12, constantNameAndType0.getSignatureIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(0, 0);
      // Undeclared exception!
      try { 
        constantNameAndType0.getSignature((ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantNameAndType", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(3869, 3869);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantNameAndType0.getName(constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(911, 911);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        constantNameAndType0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-2493), 0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        constantNameAndType0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = null;
      try {
        constantNameAndType0 = new ConstantNameAndType((ConstantNameAndType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantNameAndType", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ConstantNameAndType constantNameAndType0 = null;
      try {
        constantNameAndType0 = new ConstantNameAndType(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-19), (byte) (-120));
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantNameAndType constantNameAndType0 = null;
      try {
        constantNameAndType0 = new ConstantNameAndType(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1023), 0);
      int int0 = constantNameAndType0.getNameIndex();
      assertEquals((-1023), int0);
      assertEquals(0, constantNameAndType0.getSignatureIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1023), 0);
      int int0 = constantNameAndType0.getSignatureIndex();
      assertEquals((-1023), constantNameAndType0.getNameIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(dataInputStream0);
      assertEquals(0, constantNameAndType0.getNameIndex());
      assertEquals(0, constantNameAndType0.getSignatureIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-2942), 0);
      assertEquals((-2942), constantNameAndType0.getNameIndex());
      
      constantNameAndType0.setNameIndex(0);
      assertEquals(0, constantNameAndType0.getSignatureIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(0, 0);
      constantNameAndType0.setSignatureIndex(0);
      assertEquals(0, constantNameAndType0.getNameIndex());
      assertEquals(0, constantNameAndType0.getSignatureIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1619), (-2811));
      // Undeclared exception!
      try { 
        constantNameAndType0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantNameAndType", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-2942), 0);
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        constantNameAndType0.getSignature(constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-2395), (-2395));
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      assertTrue(constantNameAndType1.equals((Object)constantNameAndType0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-2395), (-2395));
      String string0 = constantNameAndType0.toString();
      assertEquals("CONSTANT_NameAndType[12](nameIndex = -2395, signatureIndex = -2395)", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-2395), (-2395));
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        constantNameAndType0.getName(constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -2395. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-2942), 0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
      constantNameAndType0.dump(dataOutputStream0);
      assertEquals((-2942), constantNameAndType0.getNameIndex());
      assertEquals(0, constantNameAndType0.getSignatureIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ConstantNameAndType constantNameAndType0 = null;
      try {
        constantNameAndType0 = new ConstantNameAndType(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
