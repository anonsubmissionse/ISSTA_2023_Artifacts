/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:39:35 GMT 2022
 */

package org.apache.bcel.verifier.statics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FilterInputStream;
import org.apache.bcel.classfile.AnnotationDefault;
import org.apache.bcel.classfile.AnnotationEntry;
import org.apache.bcel.classfile.Annotations;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.BootstrapMethod;
import org.apache.bcel.classfile.BootstrapMethods;
import org.apache.bcel.classfile.ClassElementValue;
import org.apache.bcel.classfile.Code;
import org.apache.bcel.classfile.CodeException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantDynamic;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantModule;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPackage;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.ConstantValue;
import org.apache.bcel.classfile.Deprecated;
import org.apache.bcel.classfile.ElementValue;
import org.apache.bcel.classfile.EnclosingMethod;
import org.apache.bcel.classfile.ExceptionTable;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.InnerClass;
import org.apache.bcel.classfile.InnerClasses;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LineNumber;
import org.apache.bcel.classfile.LineNumberTable;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.LocalVariableTypeTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.MethodParameters;
import org.apache.bcel.classfile.ModuleMainClass;
import org.apache.bcel.classfile.NestHost;
import org.apache.bcel.classfile.NestMembers;
import org.apache.bcel.classfile.Node;
import org.apache.bcel.classfile.PMGClass;
import org.apache.bcel.classfile.ParameterAnnotationEntry;
import org.apache.bcel.classfile.ParameterAnnotations;
import org.apache.bcel.classfile.Signature;
import org.apache.bcel.classfile.SourceFile;
import org.apache.bcel.classfile.StackMap;
import org.apache.bcel.classfile.StackMapEntry;
import org.apache.bcel.classfile.StackMapType;
import org.apache.bcel.classfile.Synthetic;
import org.apache.bcel.classfile.Unknown;
import org.apache.bcel.util.ClassLoaderRepository;
import org.apache.bcel.verifier.statics.StringRepresentation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringRepresentation_ESTest extends StringRepresentation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[4];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      NestMembers nestMembers0 = new NestMembers(0, 0, intArray0, constantPool0);
      StringRepresentation stringRepresentation0 = new StringRepresentation(nestMembers0);
      Signature signature0 = new Signature((-1988), (-3594), 0, constantPool0);
      stringRepresentation0.visitSignature(signature0);
      assertEquals(0, signature0.getSignatureIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantDynamic constantDynamic0 = new ConstantDynamic(3322, 3322);
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantDynamic0);
      Method method0 = new Method();
      stringRepresentation0.visitMethod(method0);
      assertFalse(method0.isFinal());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(0, 0, 0, 0);
      StringRepresentation stringRepresentation0 = new StringRepresentation(innerClass0);
      LineNumber lineNumber0 = new LineNumber((-1873), (-3068));
      stringRepresentation0.visitLineNumber(lineNumber0);
      assertEquals(62468, lineNumber0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantPackage constantPackage0 = new ConstantPackage((-591));
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantPackage0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<FilterInputStream> class0 = FilterInputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      stringRepresentation0.visitJavaClass(javaClass0);
      assertFalse(javaClass0.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(0, (-1));
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantFieldref0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-2034), 0);
      stringRepresentation0.visitConstantNameAndType(constantNameAndType0);
      assertEquals((-2034), constantNameAndType0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Synthetic synthetic0 = new Synthetic(1, 1, byteArray0, constantPool0);
      StringRepresentation stringRepresentation0 = new StringRepresentation(synthetic0);
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      LocalVariableTypeTable localVariableTypeTable0 = new LocalVariableTypeTable(661, 2526, localVariableArray0, constantPool0);
      stringRepresentation0.visitLocalVariableTypeTable(localVariableTypeTable0);
      assertEquals((byte)17, localVariableTypeTable0.getTag());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[5];
      NestMembers nestMembers0 = new NestMembers(0, 0, intArray0, (ConstantPool) null);
      StringRepresentation stringRepresentation0 = new StringRepresentation(nestMembers0);
      InnerClass[] innerClassArray0 = new InnerClass[4];
      InnerClasses innerClasses0 = new InnerClasses(0, 0, innerClassArray0, (ConstantPool) null);
      stringRepresentation0.visitInnerClasses(innerClasses0);
      assertEquals(0, innerClasses0.getLength());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(0, 0, 0, 0);
      StringRepresentation stringRepresentation0 = new StringRepresentation(innerClass0);
      // Undeclared exception!
      try { 
        stringRepresentation0.visitSynthetic((Synthetic) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.statics.StringRepresentation", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(129, 129);
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantInterfaceMethodref0);
      // Undeclared exception!
      try { 
        stringRepresentation0.visitParameterAnnotationEntry((ParameterAnnotationEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.statics.StringRepresentation", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(0);
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantClass0);
      // Undeclared exception!
      try { 
        stringRepresentation0.visitLocalVariable((LocalVariable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.statics.StringRepresentation", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Constant[] constantArray0 = new Constant[8];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Deprecated deprecated0 = new Deprecated(445, 1, byteArray0, constantPool0);
      StringRepresentation stringRepresentation0 = new StringRepresentation(deprecated0);
      // Undeclared exception!
      try { 
        stringRepresentation0.visitLineNumberTable((LineNumberTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.statics.StringRepresentation", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(0, 0, 0, 662);
      StringRepresentation stringRepresentation0 = new StringRepresentation(innerClass0);
      // Undeclared exception!
      try { 
        stringRepresentation0.visitConstantValue((ConstantValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.statics.StringRepresentation", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(0, 0, 0, 0);
      StringRepresentation stringRepresentation0 = new StringRepresentation(innerClass0);
      // Undeclared exception!
      try { 
        stringRepresentation0.visitConstantString((ConstantString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.statics.StringRepresentation", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StackMapEntry[] stackMapEntryArray0 = new StackMapEntry[0];
      StackMap stackMap0 = new StackMap(880, 0, stackMapEntryArray0, (ConstantPool) null);
      StringRepresentation stringRepresentation0 = new StringRepresentation(stackMap0);
      // Undeclared exception!
      try { 
        stringRepresentation0.visitConstantPool((ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.statics.StringRepresentation", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantPackage constantPackage0 = new ConstantPackage((-591));
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantPackage0);
      // Undeclared exception!
      try { 
        stringRepresentation0.visitConstantInvokeDynamic((ConstantInvokeDynamic) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.statics.StringRepresentation", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(0);
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantString0);
      // Undeclared exception!
      try { 
        stringRepresentation0.visitConstantInterfaceMethodref((ConstantInterfaceMethodref) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.statics.StringRepresentation", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantModule constantModule0 = new ConstantModule((-1056));
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantModule0);
      // Undeclared exception!
      try { 
        stringRepresentation0.visitConstantDouble((ConstantDouble) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.statics.StringRepresentation", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantFloat0);
      // Undeclared exception!
      try { 
        stringRepresentation0.visitBootstrapMethods((BootstrapMethods) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.statics.StringRepresentation", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantDynamic constantDynamic0 = new ConstantDynamic(3322, 3322);
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantDynamic0);
      // Undeclared exception!
      try { 
        stringRepresentation0.visitAnnotationDefault((AnnotationDefault) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.statics.StringRepresentation", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringRepresentation stringRepresentation0 = null;
      try {
        stringRepresentation0 = new StringRepresentation((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.statics.StringRepresentation", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(0);
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantClass0);
      ConstantFloat constantFloat0 = new ConstantFloat(0);
      stringRepresentation0.visitConstantFloat(constantFloat0);
      assertEquals((byte)4, constantFloat0.getTag());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassElementValue classElementValue0 = new ClassElementValue(552, 2131, (ConstantPool) null);
      AnnotationDefault annotationDefault0 = new AnnotationDefault(2131, 2131, classElementValue0, (ConstantPool) null);
      StringRepresentation stringRepresentation0 = new StringRepresentation(annotationDefault0);
      ConstantDouble constantDouble0 = new ConstantDouble(4271.76400896);
      stringRepresentation0.visitConstantDouble(constantDouble0);
      assertEquals(4271.76400896, constantDouble0.getBytes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-25), (-1));
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantFieldref0);
      // Undeclared exception!
      try { 
        stringRepresentation0.visitConstantNameAndType((ConstantNameAndType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.statics.StringRepresentation", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(0, (-1));
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantFieldref0);
      LocalVariable localVariable0 = new LocalVariable((-1), 339, 0, 1226, 339, (ConstantPool) null, (-757));
      stringRepresentation0.visitLocalVariable(localVariable0);
      assertEquals(1226, localVariable0.getSignatureIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantMethodType0);
      ConstantString constantString0 = new ConstantString(2534);
      stringRepresentation0.visitConstantString(constantString0);
      assertEquals((byte)8, constantString0.getTag());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantDynamic constantDynamic0 = new ConstantDynamic(3322, 3322);
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantDynamic0);
      ConstantClass constantClass0 = new ConstantClass((-3849));
      stringRepresentation0.visitConstantClass(constantClass0);
      assertEquals((-3849), constantClass0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(2006);
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantClass0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(2006, 136);
      stringRepresentation0.visitConstantInterfaceMethodref(constantInterfaceMethodref0);
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(0, 0, 0, 662);
      StringRepresentation stringRepresentation0 = new StringRepresentation(innerClass0);
      // Undeclared exception!
      try { 
        stringRepresentation0.visitMethod((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.statics.StringRepresentation", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("g$;-8l|H9&");
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantUtf8_0);
      CodeException codeException0 = new CodeException((-2250), (-2250), (-2250), 2239);
      stringRepresentation0.visitCodeException(codeException0);
      assertEquals(2239, codeException0.getCatchType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1734), (-1734));
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantNameAndType0);
      // Undeclared exception!
      try { 
        stringRepresentation0.visitLineNumber((LineNumber) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.statics.StringRepresentation", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantDouble0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-818), (-818));
      stringRepresentation0.visitConstantFieldref(constantFieldref0);
      assertEquals((byte)9, constantFieldref0.getTag());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(0, 0, 0, 0);
      StringRepresentation stringRepresentation0 = new StringRepresentation(innerClass0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(0, 0);
      stringRepresentation0.visitConstantMethodref(constantMethodref0);
      assertEquals(0, constantMethodref0.getNameAndTypeIndex());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(252, 0);
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantFieldref0);
      InnerClass innerClass0 = new InnerClass(108, 108, 0, 0);
      stringRepresentation0.visitInnerClass(innerClass0);
      assertEquals(0, innerClass0.getInnerAccessFlags());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("g$;-8l|H9&");
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantUtf8_0);
      stringRepresentation0.visitConstantUtf8(constantUtf8_0);
      assertEquals("g$;-8l|H9&", constantUtf8_0.getBytes());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ModuleMainClass moduleMainClass0 = new ModuleMainClass((-1), 0, 0, constantPool0);
      StringRepresentation stringRepresentation0 = new StringRepresentation(moduleMainClass0);
      // Undeclared exception!
      try { 
        stringRepresentation0.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Please adapt 'class org.apache.bcel.verifier.statics.StringRepresentation' to deal with objects of class 'class org.apache.bcel.classfile.ModuleMainClass'.
         //
         verifyException("org.apache.bcel.verifier.statics.StringRepresentation", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(0);
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantString0);
      String string0 = stringRepresentation0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LineNumber lineNumber0 = new LineNumber(1246, 1246);
      StringRepresentation stringRepresentation0 = new StringRepresentation(lineNumber0);
      // Undeclared exception!
      try { 
        stringRepresentation0.visitSourceFile((SourceFile) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.statics.StringRepresentation", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantMethodType0);
      ConstantLong constantLong0 = new ConstantLong(0);
      stringRepresentation0.visitConstantLong(constantLong0);
      assertEquals((byte)5, constantLong0.getTag());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[0];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method(4096, 4096, 0, attributeArray0, constantPool0);
      StringRepresentation stringRepresentation0 = new StringRepresentation(method0);
      int[] intArray0 = new int[2];
      ExceptionTable exceptionTable0 = new ExceptionTable(4096, 0, intArray0, constantPool0);
      stringRepresentation0.visitExceptionTable(exceptionTable0);
      assertEquals(0, exceptionTable0.getLength());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantDouble0);
      // Undeclared exception!
      try { 
        stringRepresentation0.visitAnnotation((Annotations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.statics.StringRepresentation", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      PMGClass pMGClass0 = new PMGClass(0, 0, 318, 0, constantPool0);
      StringRepresentation stringRepresentation0 = new StringRepresentation(pMGClass0);
      AnnotationEntry annotationEntry0 = new AnnotationEntry((-1), constantPool0, true);
      stringRepresentation0.visitAnnotationEntry(annotationEntry0);
      assertTrue(annotationEntry0.isRuntimeVisible());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(0);
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantString0);
      ParameterAnnotationEntry parameterAnnotationEntry0 = mock(ParameterAnnotationEntry.class, new ViolatedAssumptionAnswer());
      stringRepresentation0.visitParameterAnnotationEntry(parameterAnnotationEntry0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1734), (-1734));
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantNameAndType0);
      EnclosingMethod enclosingMethod0 = mock(EnclosingMethod.class, new ViolatedAssumptionAnswer());
      stringRepresentation0.visitEnclosingMethod(enclosingMethod0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(0, (-1));
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantFieldref0);
      SourceFile sourceFile0 = new SourceFile(1226, 0, 1226, (ConstantPool) null);
      stringRepresentation0.visitSourceFile(sourceFile0);
      assertEquals(0, sourceFile0.getLength());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(0);
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantString0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(0, 0);
      stringRepresentation0.visitConstantInvokeDynamic(constantInvokeDynamic0);
      assertEquals(0, constantInvokeDynamic0.getNameAndTypeIndex());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("g$;-8l|H9&");
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantUtf8_0);
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      AnnotationDefault annotationDefault0 = new AnnotationDefault((-2250), (-2250), (ElementValue) null, constantPool0);
      stringRepresentation0.visitAnnotationDefault(annotationDefault0);
      assertEquals((-2250), annotationDefault0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Signature signature0 = new Signature(1734, 1734, 1734, constantPool0);
      StringRepresentation stringRepresentation0 = new StringRepresentation(signature0);
      byte[] byteArray0 = new byte[3];
      Deprecated deprecated0 = new Deprecated((-1113), 1734, byteArray0, constantPool0);
      stringRepresentation0.visitDeprecated(deprecated0);
      assertEquals((-1113), deprecated0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("");
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantUtf8_0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(99, 99);
      stringRepresentation0.visitConstantMethodHandle(constantMethodHandle0);
      assertEquals(99, constantMethodHandle0.getReferenceKind());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ConstantDynamic constantDynamic0 = new ConstantDynamic(202, 202);
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantDynamic0);
      MethodParameters methodParameters0 = mock(MethodParameters.class, new ViolatedAssumptionAnswer());
      stringRepresentation0.visitMethodParameters(methodParameters0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(0, 0, 0, 662);
      StringRepresentation stringRepresentation0 = new StringRepresentation(innerClass0);
      byte[] byteArray0 = new byte[4];
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Synthetic synthetic0 = new Synthetic(662, 100, byteArray0, constantPool0);
      stringRepresentation0.visitSynthetic(synthetic0);
      assertEquals(662, synthetic0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(0);
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantString0);
      Constant[] constantArray0 = new Constant[8];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Attribute[] attributeArray0 = new Attribute[4];
      Field field0 = new Field(0, 1627, 1627, attributeArray0, constantPool0);
      stringRepresentation0.visitField(field0);
      assertFalse(field0.isProtected());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      NestHost nestHost0 = new NestHost((-1), (-2003), (-1), constantPool0);
      StringRepresentation stringRepresentation0 = new StringRepresentation(nestHost0);
      StackMapEntry[] stackMapEntryArray0 = new StackMapEntry[4];
      StackMap stackMap0 = new StackMap((-2003), (-1), stackMapEntryArray0, constantPool0);
      stringRepresentation0.visitStackMap(stackMap0);
      assertEquals((-2003), stackMap0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(3057, (-1120));
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantInterfaceMethodref0);
      // Undeclared exception!
      try { 
        stringRepresentation0.visitJavaClass((JavaClass) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.statics.StringRepresentation", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-2575), (-2575));
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantMethodref0);
      // Undeclared exception!
      try { 
        stringRepresentation0.visitStackMapEntry((StackMapEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.statics.StringRepresentation", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1734), (-1734));
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantNameAndType0);
      // Undeclared exception!
      try { 
        stringRepresentation0.visitUnknown((Unknown) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.statics.StringRepresentation", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(783, 783, 783, 783, 270, constantPool0, (-3826));
      StringRepresentation stringRepresentation0 = new StringRepresentation(localVariable0);
      BootstrapMethod[] bootstrapMethodArray0 = new BootstrapMethod[7];
      BootstrapMethods bootstrapMethods0 = new BootstrapMethods((-776), 248, bootstrapMethodArray0, constantPool0);
      stringRepresentation0.visitBootstrapMethods(bootstrapMethods0);
      assertEquals(248, bootstrapMethods0.getLength());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(0);
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantString0);
      Constant[] constantArray0 = new Constant[8];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantValue constantValue0 = new ConstantValue(0, 1270, 0, constantPool0);
      stringRepresentation0.visitConstantValue(constantValue0);
      assertEquals((byte)1, constantValue0.getTag());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantFloat0);
      LineNumber[] lineNumberArray0 = new LineNumber[8];
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LineNumberTable lineNumberTable0 = new LineNumberTable(108, 0, lineNumberArray0, constantPool0);
      stringRepresentation0.visitLineNumberTable(lineNumberTable0);
      assertEquals((byte)4, lineNumberTable0.getTag());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(783, 783, 783, 783, 270, constantPool0, (-3826));
      StringRepresentation stringRepresentation0 = new StringRepresentation(localVariable0);
      stringRepresentation0.visitConstantPool(constantPool0);
      assertEquals(0, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(0);
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantClass0);
      ConstantInteger constantInteger0 = new ConstantInteger(0);
      stringRepresentation0.visitConstantInteger(constantInteger0);
      assertEquals(0, constantInteger0.getBytes());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(0, 0);
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantMethodHandle0);
      // Undeclared exception!
      try { 
        stringRepresentation0.visitParameterAnnotation((ParameterAnnotations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.statics.StringRepresentation", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(0, (-1));
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantFieldref0);
      LocalVariable[] localVariableArray0 = new LocalVariable[6];
      LocalVariableTable localVariableTable0 = new LocalVariableTable(1, 0, localVariableArray0, (ConstantPool) null);
      stringRepresentation0.visitLocalVariableTable(localVariableTable0);
      assertEquals(6, localVariableTable0.getTableLength());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(0);
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantString0);
      // Undeclared exception!
      try { 
        stringRepresentation0.visitLocalVariableTypeTable((LocalVariableTypeTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.statics.StringRepresentation", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(0);
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantString0);
      Constant[] constantArray0 = new Constant[8];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      CodeException[] codeExceptionArray0 = new CodeException[7];
      Attribute[] attributeArray0 = new Attribute[0];
      Code code0 = new Code(2050, 0, 0, 2050, byteArray0, codeExceptionArray0, attributeArray0, constantPool0);
      stringRepresentation0.visitCode(code0);
      assertEquals(2050, code0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(0, 0, 0, 662);
      StringRepresentation stringRepresentation0 = new StringRepresentation(innerClass0);
      // Undeclared exception!
      try { 
        stringRepresentation0.visitInnerClasses((InnerClasses) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.statics.StringRepresentation", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CodeException codeException0 = new CodeException(689, 605, (-253), 0);
      StringRepresentation stringRepresentation0 = new StringRepresentation(codeException0);
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(184, 1638, (StackMapType[]) null, (StackMapType[]) null, constantPool0);
      stringRepresentation0.visitStackMapEntry(stackMapEntry0);
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(0);
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantClass0);
      int[] intArray0 = new int[4];
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      NestMembers nestMembers0 = new NestMembers(0, 0, intArray0, constantPool0);
      stringRepresentation0.visitNestMembers(nestMembers0);
      assertEquals((byte)26, nestMembers0.getTag());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantDouble0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      stringRepresentation0.visitConstantMethodType(constantMethodType0);
      assertEquals(0, constantMethodType0.getDescriptorIndex());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ConstantDynamic constantDynamic0 = new ConstantDynamic(158, 158);
      StringRepresentation stringRepresentation0 = new StringRepresentation(constantDynamic0);
      // Undeclared exception!
      try { 
        stringRepresentation0.visitSignature((Signature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.statics.StringRepresentation", e);
      }
  }
}
