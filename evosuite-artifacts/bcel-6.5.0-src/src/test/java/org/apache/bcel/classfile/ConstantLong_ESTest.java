/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:48:14 GMT 2022
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.PipedOutputStream;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Visitor;
import org.apache.bcel.util.ClassLoaderRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantLong_ESTest extends ConstantLong_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(126L);
      long long0 = constantLong0.getBytes();
      assertEquals(126L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((-535L));
      long long0 = constantLong0.getBytes();
      assertEquals((-535L), long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(0L);
      // Undeclared exception!
      try { 
        constantLong0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantLong", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(2249L);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        constantLong0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(0L);
      // Undeclared exception!
      try { 
        constantLong0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantLong", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantLong constantLong0 = null;
      try {
        constantLong0 = new ConstantLong((ConstantLong) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantLong", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantLong constantLong0 = null;
      try {
        constantLong0 = new ConstantLong((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantLong", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      ConstantLong constantLong0 = null;
      try {
        constantLong0 = new ConstantLong(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 5, (-906));
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantLong constantLong0 = null;
      try {
        constantLong0 = new ConstantLong(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(0L);
      String string0 = constantLong0.toString();
      assertEquals("CONSTANT_Long[5](bytes = 0)", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(0L);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      constantLong0.dump(dataOutputStream0);
      assertEquals(0L, constantLong0.getBytes());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(0L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      assertTrue(constantLong1.equals((Object)constantLong0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(0L);
      long long0 = constantLong0.getBytes();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(0L);
      Object object0 = constantLong0.getConstantValue((ConstantPool) null);
      assertEquals(0L, object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(126L);
      constantLong0.setBytes(126L);
      assertEquals(126L, constantLong0.getBytes());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(944L);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      constantLong0.accept(descendingVisitor0);
      assertEquals(944L, constantLong0.getBytes());
  }
}
