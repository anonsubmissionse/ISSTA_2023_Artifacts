/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 21:47:21 GMT 2022
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ExceptionTable;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.InnerClasses;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Module;
import org.apache.bcel.classfile.ModuleMainClass;
import org.apache.bcel.classfile.RuntimeInvisibleAnnotations;
import org.apache.bcel.classfile.RuntimeVisibleParameterAnnotations;
import org.apache.bcel.classfile.Synthetic;
import org.apache.bcel.generic.AnnotationEntryGen;
import org.apache.bcel.generic.ClassGen;
import org.apache.bcel.generic.ClassObserver;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ClassLoaderRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassGen_ESTest extends ClassGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Module> class0 = Module.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      Field field0 = classGen0.containsField("usesCount");
      Field field1 = new Field(field0);
      classGen0.replaceField(field1, field0);
      assertEquals(77, field1.getNameIndex());
      assertEquals(77, field0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      ClassGen classGen0 = new ClassGen("Upq>", "Qj)", "Upq>", 766, (String[]) null, constantPoolGen0);
      Method method0 = new Method();
      Method method1 = new Method(method0);
      classGen0.replaceMethod(method1, method0);
      assertEquals(8, constantPoolGen0.getSize());
      assertEquals(5, classGen0.getClassNameIndex());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<ModuleMainClass> class0 = ModuleMainClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      Method method0 = classGen0.getMethodAt(7);
      Method method1 = new Method(method0);
      classGen0.replaceMethod(method1, method0);
      assertEquals(58, method1.getNameIndex());
      assertEquals(59, method0.getSignatureIndex());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<ModuleMainClass> class0 = ModuleMainClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      Method method0 = classGen0.getMethodAt(7);
      // Undeclared exception!
      try { 
        classGen0.replaceMethod(method0, (Method) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Replacement method must not be null
         //
         verifyException("org.apache.bcel.generic.ClassGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<RuntimeVisibleParameterAnnotations> class0 = RuntimeVisibleParameterAnnotations.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      classGen0.setSuperclassNameIndex((byte)1);
      assertEquals(1, classGen0.getSuperclassNameIndex());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ClassGen classGen0 = new ClassGen("B", "B", "B", 95, stringArray0);
      classGen0.setSuperclassName("B");
      assertEquals(3, classGen0.getMinor());
      assertEquals(45, classGen0.getMajor());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<ExceptionTable> class0 = ExceptionTable.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      classGen0.removeMethod((Method) null);
      assertTrue(classGen0.isSynchronized());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<AnnotationEntryGen> class0 = AnnotationEntryGen.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      JavaClass javaClass1 = javaClass0.getSuperClass();
      ClassGen classGen0 = new ClassGen(javaClass1);
      int int0 = classGen0.getSuperclassNameIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ClassGen classGen0 = new ClassGen("<init>", "", "<init>", 2385, stringArray0);
      String string0 = classGen0.getSuperclassName();
      assertEquals(3, classGen0.getMinor());
      assertEquals(5, classGen0.getSuperclassNameIndex());
      assertEquals(3, classGen0.getClassNameIndex());
      assertEquals(45, classGen0.getMajor());
      assertEquals("<init>", classGen0.getFileName());
      assertEquals("", string0);
      assertEquals("<init>", classGen0.getClassName());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = new String[6];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("Oz*lg!z,E+!", "6{OCy3g4B&>rm_Z", "Oz*lg!z,E+!", 40, stringArray0, constantPoolGen0);
      int int0 = classGen0.getMinor();
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("4\"%<(oC& @>4", "4\"%<(oC& @>4", "4\"%<(oC& @>4", (-2104005193), (String[]) null, constantPoolGen0);
      classGen0.setMinor((-2104005193));
      int int0 = classGen0.getMinor();
      assertEquals((-2104005193), int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Module> class0 = Module.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      Method[] methodArray0 = classGen0.getMethods();
      assertEquals(9, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<ExceptionTable> class0 = ExceptionTable.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      classGen0.setMethodAt((Method) null, (byte)1);
      Method method0 = classGen0.getMethodAt((byte)1);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<ExceptionTable> class0 = ExceptionTable.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      JavaClass javaClass1 = javaClass0.getSuperClass();
      ClassGen classGen0 = new ClassGen(javaClass1);
      Method method0 = classGen0.getMethodAt((byte)2);
      assertFalse(method0.isPublic());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<ExceptionTable> class0 = ExceptionTable.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      JavaClass javaClass1 = javaClass0.getSuperClass();
      JavaClass javaClass2 = javaClass1.getSuperClass();
      ClassGen classGen0 = new ClassGen(javaClass2);
      Method method0 = classGen0.getMethodAt((byte)1);
      assertEquals(266, method0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Attribute> class0 = Attribute.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      Method method0 = classGen0.getMethodAt(17);
      assertEquals(183, method0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<ModuleMainClass> class0 = ModuleMainClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      Method method0 = classGen0.getMethodAt((byte)2);
      assertEquals(40, method0.getSignatureIndex());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Module> class0 = Module.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      classGen0.setMajor(0);
      int int0 = classGen0.getMajor();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ClassGen classGen0 = new ClassGen("getName", "e#!oKbSA62_j", "getName", (-44), stringArray0);
      classGen0.setMajor((-44));
      int int0 = classGen0.getMajor();
      assertEquals((-44), int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ClassGen classGen0 = new ClassGen("J", "J", "J", 30, stringArray0);
      JavaClass javaClass0 = classGen0.getJavaClass();
      assertEquals("J", javaClass0.getSuperclassName());
      assertEquals(45, javaClass0.getMajor());
      assertEquals(3, javaClass0.getMinor());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "NE{";
      stringArray0[1] = "/e/]@";
      stringArray0[2] = "/e/]@";
      stringArray0[3] = "k{2fa*CW>GPE(ziS/o";
      stringArray0[4] = "NE{";
      stringArray0[5] = "k{2fa*CW>GPE(ziS/o";
      stringArray0[6] = "NE{";
      stringArray0[7] = "NE{";
      stringArray0[8] = "/e/]@";
      ClassGen classGen0 = new ClassGen("NE{", "/e/]@", "k{2fa*CW>GPE(ziS/o", (-168), stringArray0);
      classGen0.setMinor((-45));
      classGen0.getJavaClass();
      assertEquals((-45), classGen0.getMinor());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "M|";
      stringArray0[1] = "nF~(y2~5cYr";
      stringArray0[2] = "M|";
      ClassGen classGen0 = new ClassGen("M|", "M|", "nF~(y2~5cYr", 2048, stringArray0);
      classGen0.setMajor((-2773));
      classGen0.getJavaClass();
      assertEquals((-2773), classGen0.getMajor());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ClassGen classGen0 = new ClassGen(">J", ">J", ">J", 0, stringArray0);
      JavaClass javaClass0 = classGen0.getJavaClass();
      assertEquals(3, javaClass0.getSuperclassNameIndex());
      assertEquals(3, javaClass0.getMinor());
      assertEquals(45, javaClass0.getMajor());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ClassGen classGen0 = new ClassGen("J", "J", "J", (-15), stringArray0);
      JavaClass javaClass0 = classGen0.getJavaClass();
      assertEquals(45, javaClass0.getMajor());
      assertEquals(3, javaClass0.getMinor());
      assertEquals("J", javaClass0.getSuperclassName());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "GY1 Sbxj3;_{";
      stringArray0[1] = "aept";
      ClassGen classGen0 = new ClassGen("org.apache.bcel.generic.DALOAD", "GY1 Sbxj3;_{", "aept", 222, stringArray0);
      int[] intArray0 = classGen0.getInterfaces();
      assertEquals(6, classGen0.getSuperclassNameIndex());
      assertEquals("aept", classGen0.getFileName());
      assertEquals(45, classGen0.getMajor());
      assertEquals("GY1 Sbxj3;_{", classGen0.getSuperclassName());
      assertArrayEquals(new int[] {6, 7}, intArray0);
      assertEquals("org.apache.bcel.generic.DALOAD", classGen0.getClassName());
      assertEquals(3, classGen0.getMinor());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<ExceptionTable> class0 = ExceptionTable.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      JavaClass javaClass1 = javaClass0.getSuperClass();
      ClassGen classGen0 = new ClassGen(javaClass1);
      String[] stringArray0 = classGen0.getInterfaceNames();
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ClassGen classGen0 = new ClassGen("d@ea(", "d@ea(", (String) null, 0, (String[]) null);
      String string0 = classGen0.getFileName();
      assertNull(string0);
      assertEquals(45, classGen0.getMajor());
      assertEquals(3, classGen0.getMinor());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ClassGen classGen0 = new ClassGen("", "u;~~#QXe!Z8wJP]8[", "", (-923), stringArray0);
      String string0 = classGen0.getFileName();
      assertEquals("u;~~#QXe!Z8wJP]8[", classGen0.getSuperclassName());
      assertEquals(3, classGen0.getClassNameIndex());
      assertEquals(5, classGen0.getSuperclassNameIndex());
      assertEquals("", classGen0.getClassName());
      assertEquals(45, classGen0.getMajor());
      assertEquals(3, classGen0.getMinor());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ClassGen classGen0 = new ClassGen("Signature", "Signature", "Signature", (-83), (String[]) null);
      classGen0.getFields();
      assertEquals(45, classGen0.getMajor());
      assertEquals(3, classGen0.getMinor());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String[] stringArray0 = new String[4];
      ClassGen classGen0 = new ClassGen("org.apache.bcel.generic.ClassGen$1", "org.apache.bcel.generic.ClassGen$1", "org.apache.bcel.generic.ClassGen$1", 0, stringArray0);
      classGen0.setConstantPool((ConstantPoolGen) null);
      classGen0.getConstantPool();
      assertEquals(45, classGen0.getMajor());
      assertEquals(3, classGen0.getMinor());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ClassGen.setComparator((BCELComparator) null);
      BCELComparator bCELComparator0 = ClassGen.getComparator();
      assertNull(bCELComparator0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[4];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("", "", "ec", 7, stringArray0, constantPoolGen0);
      String string0 = classGen0.getClassName();
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ClassGen classGen0 = new ClassGen("Clone Not Supported", "Clone Not Supported", (String) null, 3, stringArray0, constantPoolGen0);
      classGen0.getAttributes();
      assertEquals(3, classGen0.getMinor());
      assertEquals(45, classGen0.getMajor());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ClassGen classGen0 = new ClassGen("", "", "<peV", (-18), stringArray0);
      classGen0.addAnnotationEntry((AnnotationEntryGen) null);
      classGen0.getAnnotationEntries();
      assertEquals(45, classGen0.getMajor());
      assertEquals(4, classGen0.getSuperclassNameIndex());
      assertEquals("<peV", classGen0.getFileName());
      assertEquals(3, classGen0.getMinor());
      assertEquals("", classGen0.getClassName());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<ExceptionTable> class0 = ExceptionTable.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      boolean boolean0 = classGen0.equals(classGen0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Module> class0 = Module.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      Field field0 = classGen0.containsField("usesCount");
      assertNotNull(field0);
      
      field0.isSynchronized(true);
      Field field1 = classGen0.containsField("usesCount");
      assertEquals(77, field1.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Module> class0 = Module.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      Field field0 = classGen0.containsField("requiresTable");
      assertNotNull(field0);
      assertEquals(2, field0.getAccessFlags());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<RuntimeVisibleParameterAnnotations> class0 = RuntimeVisibleParameterAnnotations.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      classGen0.setConstantPool((ConstantPoolGen) null);
      // Undeclared exception!
      try { 
        classGen0.setSuperclassNameIndex((byte)1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ClassGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ClassGen classGen0 = new ClassGen("SAME_LOCALS_1_STACK_EXTENDED", "SAME_LOCALS_1_STACK_EXTENDED", "SAME_LOCALS_1_STACK_EXTENDED", 1329, stringArray0);
      // Undeclared exception!
      try { 
        classGen0.setMethods((Method[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ClassGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ClassGen classGen0 = new ClassGen("_1DaBtzxgaa&|.9`U?@", "_1DaBtzxgaa&|.9`U?@", "9{$Z}G+wXS?", (-3692), stringArray0);
      Attribute[] attributeArray0 = new Attribute[1];
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method((-3692), (-222), (-3229), attributeArray0, constantPool0);
      // Undeclared exception!
      try { 
        classGen0.setMethodAt(method0, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<ExceptionTable> class0 = ExceptionTable.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      // Undeclared exception!
      try { 
        classGen0.setClassNameIndex((-1913458687));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -1913458687. Constant pool size is: 256
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ClassGen classGen0 = new ClassGen("#l:1@r]O", ",KKffr|);;", "#l:1@r]O", 989, stringArray0);
      // Undeclared exception!
      try { 
        classGen0.setClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ClassGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<RuntimeInvisibleAnnotations> class0 = RuntimeInvisibleAnnotations.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        classGen0.replaceMethod(method0, method0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<ModuleMainClass> class0 = ModuleMainClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      Attribute[] attributeArray0 = new Attribute[0];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Field field0 = new Field((byte)3, 0, (byte)3, attributeArray0, constantPool0);
      // Undeclared exception!
      try { 
        classGen0.replaceField(field0, field0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BCELComparator bCELComparator0 = ClassGen.getComparator();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Module> class0 = Module.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      Field field0 = classGen0.containsField("usesCount");
      Field.setComparator(bCELComparator0);
      // Undeclared exception!
      try { 
        classGen0.replaceField(field0, field0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.Field cannot be cast to org.apache.bcel.generic.ClassGen
         //
         verifyException("org.apache.bcel.generic.ClassGen$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<InnerClasses> class0 = InnerClasses.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        classGen0.removeMethod(method0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("6%D{KcJ", "6%D{KcJ", "", 0, stringArray0, constantPoolGen0);
      // Undeclared exception!
      try { 
        classGen0.getMethodAt(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ClassGen classGen0 = new ClassGen("0q]m4 YZSD", "v-f?11TM:Bb", "0q]m4 YZSD", 0, stringArray0);
      // Undeclared exception!
      try { 
        classGen0.getMethodAt((-985));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ClassGen classGen0 = new ClassGen("", "0", (String) null, 149, stringArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      classGen0.setConstantPool(constantPoolGen0);
      // Undeclared exception!
      try { 
        classGen0.getJavaClass();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 2. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("org.apache.bcel.generic.ClassGen$1", "org.apache.bcel.generic.ClassGen$1", "T6y^#[S}UlG", (-1133), stringArray0, constantPoolGen0);
      // Undeclared exception!
      try { 
        classGen0.equals((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ClassGen$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<ModuleMainClass> class0 = ModuleMainClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      Method method0 = classGen0.getMethodAt((byte)3);
      method0.setNameIndex(253);
      // Undeclared exception!
      try { 
        classGen0.containsMethod("SourceFile", "<lnit>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 253. Constant pool size is: 122
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ClassGen classGen0 = new ClassGen("p;-Av[g_LY`4HEE", "p;-Av[g_LY`4HEE", "Bl~{H:nTS4{", (-210), stringArray0);
      Attribute[] attributeArray0 = new Attribute[20];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Field field0 = new Field((-1441189510), (-1441189510), (-210), attributeArray0, constantPool0);
      Field field1 = new Field(field0);
      classGen0.replaceField(field1, field1);
      // Undeclared exception!
      try { 
        classGen0.containsField(field0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -1441189510. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<ExceptionTable> class0 = ExceptionTable.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      // Undeclared exception!
      try { 
        classGen0.containsField((Field) null);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Field$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ClassGen classGen0 = new ClassGen("p;-Av[g_LY`4HEE", "p;-Av[g_LY`4HEE", "Bl~{H:nTS4{", (-210), stringArray0);
      Attribute[] attributeArray0 = new Attribute[20];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Field field0 = new Field((-1441189510), (-1441189510), (-210), attributeArray0, constantPool0);
      classGen0.replaceField(field0, field0);
      // Undeclared exception!
      try { 
        classGen0.containsField("<init>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -1441189510. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = new String[4];
      ClassGen classGen0 = new ClassGen("(w7nM+ox9>\"?5;<uxKu", "(w7nM+ox9>\"?5;<uxKu", "(w7nM+ox9>\"?5;<uxKu", 435, stringArray0);
      // Undeclared exception!
      try { 
        classGen0.addEmptyConstructor((-1963));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L(w7nM+ox9>\"?5;<uxKu;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ClassGen classGen0 = new ClassGen("org.apache.bcel.generic.DALOAD", "GY1 Sbxj3;_{", "aept", 222, stringArray0);
      classGen0.setConstantPool((ConstantPoolGen) null);
      // Undeclared exception!
      try { 
        classGen0.addEmptyConstructor(222);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ClassGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ClassGen classGen0 = null;
      try {
        classGen0 = new ClassGen((JavaClass) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ClassGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ClassGen classGen0 = null;
      try {
        classGen0 = new ClassGen((String) null, (String) null, (String) null, 0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ClassGen classGen0 = new ClassGen("org.apache.bcel.generic.DALOAD", "GY1 Sbxj3;_{", "aept", 222, stringArray0);
      // Undeclared exception!
      try { 
        classGen0.getInterfaces();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<ModuleMainClass> class0 = ModuleMainClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      int[] intArray0 = classGen0.getInterfaces();
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = null;
      try {
        classGen0 = new ClassGen((String) null, (String) null, (String) null, 1374, stringArray0, constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ClassGen classGen0 = new ClassGen("Signature", "Signature", "Signature", (-83), (String[]) null);
      Attribute[] attributeArray0 = classGen0.getAttributes();
      Field field0 = new Field((-83), (-1727986908), (-1727986908), attributeArray0, (ConstantPool) null);
      Field field1 = new Field(field0);
      classGen0.replaceField(field0, field1);
      assertEquals(3, classGen0.getMinor());
      assertEquals(45, classGen0.getMajor());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ClassGen classGen0 = new ClassGen(">J", ">J", ">J", 0, stringArray0);
      classGen0.addInterface(">J");
      assertEquals(3, classGen0.getMinor());
      assertEquals(45, classGen0.getMajor());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ClassGen classGen0 = new ClassGen("boolean", "boolean", "boolean", 900, stringArray0);
      byte[] byteArray0 = new byte[2];
      Synthetic synthetic0 = new Synthetic(89, 89, byteArray0, (ConstantPool) null);
      classGen0.addAttribute(synthetic0);
      assertEquals(3, classGen0.getMinor());
      assertEquals(45, classGen0.getMajor());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ClassGen classGen0 = new ClassGen("3R", "3R", "MG", (-3426), stringArray0);
      classGen0.addMethod((Method) null);
      // Undeclared exception!
      try { 
        classGen0.containsMethod("3R", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ClassGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ClassGen classGen0 = new ClassGen("Signature", "Signature", "Signature", (-83), (String[]) null);
      classGen0.getMethods();
      assertEquals(3, classGen0.getMinor());
      assertEquals(45, classGen0.getMajor());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<ExceptionTable> class0 = ExceptionTable.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      classGen0.addField((Field) null);
      // Undeclared exception!
      try { 
        classGen0.containsField("Iz$\fE[wW;Q'R[0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ClassGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<AnnotationEntryGen> class0 = AnnotationEntryGen.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      Field[] fieldArray0 = classGen0.getFields();
      assertEquals(4, fieldArray0.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<ModuleMainClass> class0 = ModuleMainClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      String string0 = classGen0.getClassName();
      assertEquals("org.apache.bcel.classfile.ModuleMainClass", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String[] stringArray0 = new String[4];
      ClassGen classGen0 = new ClassGen("getName", "getName", "getName", (-131), stringArray0);
      ClassObserver classObserver0 = mock(ClassObserver.class, new ViolatedAssumptionAnswer());
      classGen0.addObserver(classObserver0);
      classGen0.update();
      assertEquals(3, classGen0.getMinor());
      assertEquals(45, classGen0.getMajor());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ClassGen classGen0 = new ClassGen("getName", "e#!oKbSA62_j", "getName", (-44), stringArray0);
      classGen0.addObserver((ClassObserver) null);
      // Undeclared exception!
      try { 
        classGen0.update();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ClassGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<RuntimeInvisibleAnnotations> class0 = RuntimeInvisibleAnnotations.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      classGen0.update();
      assertFalse(classGen0.isTransient());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ClassGen classGen0 = new ClassGen("#:1@r]O", "#:1@r]O", "#:1@r]O", 989, stringArray0);
      ClassObserver classObserver0 = mock(ClassObserver.class, new ViolatedAssumptionAnswer());
      classGen0.addObserver(classObserver0);
      ClassObserver classObserver1 = mock(ClassObserver.class, new ViolatedAssumptionAnswer());
      classGen0.removeObserver(classObserver1);
      assertEquals(3, classGen0.getMinor());
      assertEquals(45, classGen0.getMajor());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<ExceptionTable> class0 = ExceptionTable.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      ClassObserver classObserver0 = mock(ClassObserver.class, new ViolatedAssumptionAnswer());
      classGen0.removeObserver(classObserver0);
      assertFalse(classGen0.isInterface());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ClassGen classGen0 = new ClassGen("boolean", "boolean", "boolean", 900, stringArray0);
      classGen0.addObserver((ClassObserver) null);
      classGen0.addObserver((ClassObserver) null);
      assertEquals(45, classGen0.getMajor());
      assertEquals(3, classGen0.getMinor());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<ExceptionTable> class0 = ExceptionTable.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      Method[] methodArray0 = new Method[7];
      classGen0.setMethods(methodArray0);
      assertEquals("org.apache.bcel.classfile.Attribute", classGen0.getSuperclassName());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      JavaClass javaClass0 = classLoaderRepository0.loadClass("org.apache.bcel.generic.ClassGen");
      ClassGen classGen0 = new ClassGen(javaClass0);
      // Undeclared exception!
      try { 
        classGen0.replaceField((Field) null, (Field) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Replacement method must not be null
         //
         verifyException("org.apache.bcel.generic.ClassGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<RuntimeInvisibleAnnotations> class0 = RuntimeInvisibleAnnotations.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      Method method0 = classGen0.containsMethod("<init>", "(IILjava/io/DataInput;Lorg/apache/bcel/classfile/ConstantPool;)V");
      classGen0.replaceMethod(method0, method0);
      assertEquals(7, classGen0.getClassNameIndex());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<RuntimeInvisibleAnnotations> class0 = RuntimeInvisibleAnnotations.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      Method method0 = classGen0.containsMethod("<init>", "%IILjava/io/DataInput;Lorg/apache/bcel/classfile/ConstantPool;)V");
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<ExceptionTable> class0 = ExceptionTable.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      Field field0 = classGen0.containsField("]*B[");
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ClassGen classGen0 = new ClassGen("T:_1IP{2)NFF", "T:_1IP{2)NFF", "T:_1IP{2)NFF", (-407), stringArray0);
      boolean boolean0 = classGen0.containsField((Field) null);
      assertEquals(3, classGen0.getMinor());
      assertEquals(45, classGen0.getMajor());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "2a#w";
      stringArray0[1] = "2a#w";
      ClassGen classGen0 = new ClassGen("2a#w", "2a#w", "2a#w", (-18), stringArray0);
      classGen0.addAnnotationEntry((AnnotationEntryGen) null);
      // Undeclared exception!
      try { 
        classGen0.getJavaClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.AnnotationEntryGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<ExceptionTable> class0 = ExceptionTable.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      JavaClass javaClass1 = javaClass0.getSuperClass();
      ClassGen classGen0 = new ClassGen(javaClass1);
      Field field0 = classGen0.containsField("length");
      assertFalse(field0.isStatic());
      assertNotNull(field0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<ModuleMainClass> class0 = ModuleMainClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      int int0 = classGen0.getClassNameIndex();
      assertEquals(22, int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ClassGen classGen0 = new ClassGen("", "0", (String) null, 149, stringArray0);
      classGen0.addEmptyConstructor((-1625320804));
      assertEquals(45, classGen0.getMajor());
      assertEquals(4, classGen0.getSuperclassNameIndex());
      assertEquals(3, classGen0.getMinor());
      assertEquals("0", classGen0.getSuperclassName());
      assertEquals("", classGen0.getClassName());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("dR", "dR", "dR", 41, stringArray0, constantPoolGen0);
      classGen0.hashCode();
      assertEquals(4, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<ExceptionTable> class0 = ExceptionTable.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      String[] stringArray0 = classGen0.getInterfaceNames();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Module> class0 = Module.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      int int0 = classGen0.getMinor();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("4\"%<(oC& @>4", "4\"%<(oC& @>4", "4\"%<(oC& @>4", 766, (String[]) null, constantPoolGen0);
      int int0 = classGen0.getMajor();
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(45, int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<ModuleMainClass> class0 = ModuleMainClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      AnnotationEntryGen[] annotationEntryGenArray0 = classGen0.getAnnotationEntries();
      assertEquals(0, annotationEntryGenArray0.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ClassGen classGen0 = new ClassGen("yg+?^>", "", "", 2723, stringArray0);
      // Undeclared exception!
      try { 
        classGen0.equals("'eoj_?UzgjB<XVYE");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.apache.bcel.generic.ClassGen
         //
         verifyException("org.apache.bcel.generic.ClassGen$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<RuntimeInvisibleAnnotations> class0 = RuntimeInvisibleAnnotations.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      int int0 = classGen0.getSuperclassNameIndex();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[7];
      ClassGen classGen0 = new ClassGen("org.apache.bcel.generic.ClassGen$1", "org.apache.bcel.generic.ClassGen$1", "org.apache.bcel.generic.ClassGen$1", 0, stringArray0);
      ConstantPoolGen constantPoolGen0 = classGen0.getConstantPool();
      assertEquals(45, classGen0.getMajor());
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(3, classGen0.getMinor());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<RuntimeInvisibleAnnotations> class0 = RuntimeInvisibleAnnotations.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      classGen0.setConstantPool((ConstantPoolGen) null);
      // Undeclared exception!
      try { 
        classGen0.setClassNameIndex((byte)1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ClassGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[7];
      ClassGen classGen0 = new ClassGen("Nl2FA}G,XR}G", "-", "-", (-3198), stringArray0);
      // Undeclared exception!
      try { 
        classGen0.setSuperclassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ClassGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ClassGen classGen0 = new ClassGen("", "", "", (-6), (String[]) null);
      // Undeclared exception!
      try { 
        classGen0.setMethodAt((Method) null, (-6));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<RuntimeInvisibleAnnotations> class0 = RuntimeInvisibleAnnotations.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      String string0 = classGen0.getFileName();
      assertEquals("RuntimeInvisibleAnnotations.java", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ClassGen classGen0 = new ClassGen("getName", "e#!oKbSA62_j", "getName", (-44), stringArray0);
      Object object0 = classGen0.clone();
      classGen0.setClassName("-");
      boolean boolean0 = classGen0.equals(object0);
      assertEquals(7, classGen0.getClassNameIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<ModuleMainClass> class0 = ModuleMainClass.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      JavaClass javaClass1 = classGen0.getJavaClass();
      assertEquals(0, javaClass1.getMinor());
      assertEquals(52, javaClass1.getMajor());
      assertEquals("org.apache.bcel.classfile.Attribute", javaClass1.getSuperclassName());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ClassGen classGen0 = new ClassGen("!8", "!8", "!8", 254, (String[]) null);
      classGen0.removeAttribute((Attribute) null);
      assertEquals(3, classGen0.getSuperclassNameIndex());
      assertEquals(45, classGen0.getMajor());
      assertEquals(3, classGen0.getMinor());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ClassGen classGen0 = new ClassGen("T:_1IP{2)NFF", "T:_1IP{2)NFF", "T:_1IP{2)NFF", (-407), stringArray0);
      classGen0.getSuperclassName();
      assertEquals(45, classGen0.getMajor());
      assertEquals(3, classGen0.getClassNameIndex());
      assertEquals(3, classGen0.getMinor());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<RuntimeInvisibleAnnotations> class0 = RuntimeInvisibleAnnotations.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      classGen0.setClassNameIndex((byte)1);
      assertEquals(1, classGen0.getClassNameIndex());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[7];
      ClassGen classGen0 = new ClassGen("org.apache.bcel.generic.ClassGen$1", "org.apache.bcel.generic.ClassGen$1", "org.apache.bcel.generic.ClassGen$1", 0, stringArray0);
      classGen0.removeField((Field) null);
      assertEquals(45, classGen0.getMajor());
      assertEquals(4, classGen0.getClassNameIndex());
      assertEquals(3, classGen0.getMinor());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ClassGen classGen0 = new ClassGen("B", "B", "B", 95, stringArray0);
      classGen0.removeInterface("B");
      assertEquals(45, classGen0.getMajor());
      assertEquals(3, classGen0.getMinor());
      assertEquals(3, classGen0.getClassNameIndex());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ClassGen classGen0 = new ClassGen("", "", (String) null, 0, stringArray0);
      // Undeclared exception!
      try { 
        classGen0.setSuperclassNameIndex(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<AnnotationEntryGen> class0 = AnnotationEntryGen.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      Attribute[] attributeArray0 = new Attribute[0];
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method((byte)3, 0, (byte)3, attributeArray0, constantPool0);
      // Undeclared exception!
      try { 
        classGen0.removeMethod(method0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
}
