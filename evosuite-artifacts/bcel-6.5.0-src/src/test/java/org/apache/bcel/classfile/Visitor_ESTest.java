/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:53:06 GMT 2022
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.bcel.classfile.CodeException;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPackage;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.EnclosingMethod;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.MethodParameter;
import org.apache.bcel.classfile.ModuleExports;
import org.apache.bcel.classfile.ModuleRequires;
import org.apache.bcel.classfile.NestHost;
import org.apache.bcel.classfile.NestMembers;
import org.apache.bcel.classfile.ParameterAnnotationEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Visitor_ESTest extends Visitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      emptyVisitor0.visitNestHost((NestHost) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      emptyVisitor0.visitModuleRequires((ModuleRequires) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      emptyVisitor0.visitModuleExports((ModuleExports) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      MethodParameter methodParameter0 = new MethodParameter();
      emptyVisitor0.visitMethodParameter(methodParameter0);
      assertFalse(methodParameter0.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      emptyVisitor0.visitMethod((Method) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      emptyVisitor0.visitLocalVariable((LocalVariable) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      emptyVisitor0.visitEnclosingMethod((EnclosingMethod) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("SAME_EXTENDED");
      emptyVisitor0.visitConstantUtf8(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ConstantString constantString0 = new ConstantString((-2547));
      emptyVisitor0.visitConstantString(constantString0);
      assertEquals((byte)8, constantString0.getTag());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ConstantPackage constantPackage0 = new ConstantPackage(87);
      emptyVisitor0.visitConstantPackage(constantPackage0);
      assertEquals((byte)20, constantPackage0.getTag());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(58, 58);
      emptyVisitor0.visitConstantNameAndType(constantNameAndType0);
      assertEquals(58, constantNameAndType0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      emptyVisitor0.visitConstantMethodType((ConstantMethodType) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2635), (-324));
      emptyVisitor0.visitConstantMethodHandle(constantMethodHandle0);
      assertEquals((-2635), constantMethodHandle0.getReferenceKind());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ConstantLong constantLong0 = new ConstantLong((byte) (-93));
      emptyVisitor0.visitConstantLong(constantLong0);
      assertEquals((byte)5, constantLong0.getTag());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(98, 2787);
      emptyVisitor0.visitConstantInvokeDynamic(constantInvokeDynamic0);
      assertEquals(2787, constantInvokeDynamic0.getNameAndTypeIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(63, (-2781));
      emptyVisitor0.visitConstantInterfaceMethodref(constantInterfaceMethodref0);
      assertEquals((-2781), constantInterfaceMethodref0.getNameAndTypeIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      ConstantFloat constantFloat0 = new ConstantFloat(69);
      descendingVisitor0.visitConstantFloat(constantFloat0);
      assertEquals(69.0F, constantFloat0.getBytes(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ConstantClass constantClass0 = new ConstantClass(2382);
      emptyVisitor0.visitConstantClass(constantClass0);
      assertEquals((byte)7, constantClass0.getTag());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      CodeException codeException0 = new CodeException(0, 45, 2418, 3885);
      emptyVisitor0.visitCodeException(codeException0);
      assertEquals(0, codeException0.getStartPC());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitParameterAnnotationEntry((ParameterAnnotationEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitNestMembers((NestMembers) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
}
