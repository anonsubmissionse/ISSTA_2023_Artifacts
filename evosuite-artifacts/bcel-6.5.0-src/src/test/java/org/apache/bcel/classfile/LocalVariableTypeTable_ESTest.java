/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:23:32 GMT 2022
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTypeTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocalVariableTypeTable_ESTest extends LocalVariableTypeTable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      LocalVariable localVariable0 = new LocalVariable(0, 0, 0, 17, 0, constantPool1, 0);
      LocalVariable[] localVariableArray0 = new LocalVariable[1];
      localVariableArray0[0] = localVariable0;
      LocalVariableTypeTable localVariableTypeTable0 = new LocalVariableTypeTable((-228), 194, localVariableArray0, constantPool0);
      Attribute attribute0 = localVariableTypeTable0.copy(constantPool1);
      assertNotSame(attribute0, localVariableTypeTable0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocalVariable[] localVariableArray0 = new LocalVariable[2];
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariableTypeTable localVariableTypeTable0 = new LocalVariableTypeTable((-1689), (-1689), localVariableArray0, constantPool0);
      int int0 = localVariableTypeTable0.getTableLength();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariableTypeTable localVariableTypeTable0 = new LocalVariableTypeTable(213, (-1211), (LocalVariable[]) null, constantPool0);
      LocalVariable[] localVariableArray0 = localVariableTypeTable0.getLocalVariableTypeTable();
      assertNull(localVariableArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariableTypeTable localVariableTypeTable0 = new LocalVariableTypeTable(1, (-2489), localVariableArray0, constantPool0);
      LocalVariable[] localVariableArray1 = localVariableTypeTable0.getLocalVariableTypeTable();
      assertSame(localVariableArray0, localVariableArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalVariable[] localVariableArray0 = new LocalVariable[2];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(2093, 2082, 2082, 3309, (-1747), constantPool0);
      localVariableArray0[0] = localVariable0;
      LocalVariableTypeTable localVariableTypeTable0 = new LocalVariableTypeTable(2082, 2093, localVariableArray0, constantPool0);
      LocalVariable localVariable1 = localVariableTypeTable0.getLocalVariable((-1747));
      assertEquals((-1747), localVariable1.getOrigIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalVariable[] localVariableArray0 = new LocalVariable[2];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable((-916), 2082, 2082, 3309, (-1747), constantPool0);
      localVariableArray0[0] = localVariable0;
      LocalVariable localVariable1 = new LocalVariable((-1747), 2082, (-1747), (-916), (-2987), constantPool0);
      localVariableArray0[1] = localVariable1;
      LocalVariableTypeTable localVariableTypeTable0 = new LocalVariableTypeTable(2082, (-916), localVariableArray0, constantPool0);
      LocalVariable localVariable2 = localVariableTypeTable0.getLocalVariable((-2987));
      assertNotNull(localVariable2);
      assertEquals((-916), localVariable2.getSignatureIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalVariable[] localVariableArray0 = new LocalVariable[2];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable((-1747), (-916), (-1747), 2082, (-1747), constantPool0, 2082);
      localVariableArray0[0] = localVariable0;
      LocalVariableTypeTable localVariableTypeTable0 = new LocalVariableTypeTable(2082, (-916), localVariableArray0, constantPool0);
      LocalVariable localVariable1 = localVariableTypeTable0.getLocalVariable((-1747));
      assertEquals(2082, localVariable1.getOrigIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalVariable[] localVariableArray0 = new LocalVariable[2];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable((-916), 2082, 2082, 3309, 2082, constantPool0);
      localVariableArray0[0] = localVariable0;
      LocalVariableTypeTable localVariableTypeTable0 = new LocalVariableTypeTable(2082, (-916), localVariableArray0, constantPool0);
      LocalVariable localVariable1 = localVariableTypeTable0.getLocalVariable(2082);
      assertSame(localVariable1, localVariable0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      LocalVariableTypeTable localVariableTypeTable0 = new LocalVariableTypeTable(0, (-3388), localVariableArray0, constantPool0);
      Attribute attribute0 = localVariableTypeTable0.copy(constantPool0);
      assertNotSame(attribute0, localVariableTypeTable0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      LocalVariableTypeTable localVariableTypeTable0 = new LocalVariableTypeTable(1216, 1216, localVariableArray0, (ConstantPool) null);
      localVariableTypeTable0.setLength(0);
      Attribute attribute0 = localVariableTypeTable0.copy((ConstantPool) null);
      assertNotSame(attribute0, localVariableTypeTable0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalVariable[] localVariableArray0 = new LocalVariable[2];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable((-906), 2082, 2082, 3309, (-1747), constantPool0);
      localVariableArray0[0] = localVariable0;
      LocalVariableTypeTable localVariableTypeTable0 = new LocalVariableTypeTable(2082, (-906), localVariableArray0, constantPool0);
      // Undeclared exception!
      try { 
        localVariableTypeTable0.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 2082. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalVariable[] localVariableArray0 = new LocalVariable[2];
      LocalVariableTypeTable localVariableTypeTable0 = new LocalVariableTypeTable((-2194), 59, localVariableArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        localVariableTypeTable0.getLocalVariable(5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariableTypeTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      LocalVariableTypeTable localVariableTypeTable0 = new LocalVariableTypeTable(2411, 2411, dataInputStream0, (ConstantPool) null);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        localVariableTypeTable0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalVariable[] localVariableArray0 = new LocalVariable[2];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariableTypeTable localVariableTypeTable0 = new LocalVariableTypeTable(2082, (-901), localVariableArray0, constantPool0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        localVariableTypeTable0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalVariable[] localVariableArray0 = new LocalVariable[10];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariableTypeTable localVariableTypeTable0 = new LocalVariableTypeTable(2082, (-901), localVariableArray0, constantPool0);
      // Undeclared exception!
      try { 
        localVariableTypeTable0.copy(constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariableTypeTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalVariableTypeTable localVariableTypeTable0 = null;
      try {
        localVariableTypeTable0 = new LocalVariableTypeTable((LocalVariableTypeTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariableTypeTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalVariableTypeTable localVariableTypeTable0 = null;
      try {
        localVariableTypeTable0 = new LocalVariableTypeTable(0, 0, (DataInput) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariableTypeTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-19), 214);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      LocalVariableTypeTable localVariableTypeTable0 = null;
      try {
        localVariableTypeTable0 = new LocalVariableTypeTable((-2189), (-2011), dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1134);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      LocalVariableTypeTable localVariableTypeTable0 = null;
      try {
        localVariableTypeTable0 = new LocalVariableTypeTable(0, 0, dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocalVariable[] localVariableArray0 = new LocalVariable[2];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariableTypeTable localVariableTypeTable0 = new LocalVariableTypeTable(2082, (-906), localVariableArray0, constantPool0);
      LocalVariable[] localVariableArray1 = localVariableTypeTable0.getLocalVariableTypeTable();
      assertSame(localVariableArray0, localVariableArray1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalVariableTypeTable localVariableTypeTable0 = new LocalVariableTypeTable((-1), (-1), (LocalVariable[]) null, (ConstantPool) null);
      int int0 = localVariableTypeTable0.getTableLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocalVariable[] localVariableArray0 = new LocalVariable[2];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariableTypeTable localVariableTypeTable0 = new LocalVariableTypeTable(2082, (-906), localVariableArray0, constantPool0);
      // Undeclared exception!
      try { 
        localVariableTypeTable0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariableTypeTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      LocalVariableTypeTable localVariableTypeTable0 = new LocalVariableTypeTable(1216, 1216, localVariableArray0, (ConstantPool) null);
      String string0 = localVariableTypeTable0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalVariable[] localVariableArray0 = new LocalVariable[2];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable((-906), 2082, 2082, 3309, (-1747), constantPool0);
      localVariableArray0[0] = localVariable0;
      localVariableArray0[1] = localVariable0;
      LocalVariableTypeTable localVariableTypeTable0 = new LocalVariableTypeTable(2082, (-906), localVariableArray0, constantPool0);
      LocalVariable localVariable1 = localVariableTypeTable0.getLocalVariable(72);
      assertNull(localVariable1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalVariable[] localVariableArray0 = new LocalVariable[2];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable((-906), 2082, 2082, 3309, (-1747), constantPool0);
      localVariableArray0[0] = localVariable0;
      localVariableArray0[1] = localVariable0;
      LocalVariableTypeTable localVariableTypeTable0 = new LocalVariableTypeTable(2082, (-906), localVariableArray0, constantPool0);
      File file0 = MockFile.createTempFile("iinc", "iinc");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      localVariableTypeTable0.dump(dataOutputStream0);
      assertEquals(28L, file0.length());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-60);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      LocalVariableTypeTable localVariableTypeTable0 = null;
      try {
        localVariableTypeTable0 = new LocalVariableTypeTable(2411, 2411, dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      LocalVariableTypeTable localVariableTypeTable0 = new LocalVariableTypeTable(2411, 2411, dataInputStream0, (ConstantPool) null);
      LocalVariableTypeTable localVariableTypeTable1 = new LocalVariableTypeTable(localVariableTypeTable0);
      assertEquals(0, localVariableTypeTable1.getTableLength());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      LocalVariableTypeTable localVariableTypeTable0 = new LocalVariableTypeTable(1216, 1216, localVariableArray0, (ConstantPool) null);
      localVariableTypeTable0.setLocalVariableTable(localVariableArray0);
      assertEquals(1216, localVariableTypeTable0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariableTypeTable localVariableTypeTable0 = new LocalVariableTypeTable(1, (-2489), localVariableArray0, constantPool0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      localVariableTypeTable0.accept(descendingVisitor0);
      assertEquals((byte)17, localVariableTypeTable0.getTag());
  }
}
