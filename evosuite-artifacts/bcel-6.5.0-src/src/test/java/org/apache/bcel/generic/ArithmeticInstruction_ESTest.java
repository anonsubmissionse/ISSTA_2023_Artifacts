/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 21:37:11 GMT 2022
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.DADD;
import org.apache.bcel.generic.DDIV;
import org.apache.bcel.generic.DMUL;
import org.apache.bcel.generic.DNEG;
import org.apache.bcel.generic.DSUB;
import org.apache.bcel.generic.FADD;
import org.apache.bcel.generic.FDIV;
import org.apache.bcel.generic.FMUL;
import org.apache.bcel.generic.FNEG;
import org.apache.bcel.generic.FREM;
import org.apache.bcel.generic.FSUB;
import org.apache.bcel.generic.IADD;
import org.apache.bcel.generic.IAND;
import org.apache.bcel.generic.IDIV;
import org.apache.bcel.generic.IMUL;
import org.apache.bcel.generic.INEG;
import org.apache.bcel.generic.IOR;
import org.apache.bcel.generic.IREM;
import org.apache.bcel.generic.ISHR;
import org.apache.bcel.generic.ISUB;
import org.apache.bcel.generic.IUSHR;
import org.apache.bcel.generic.IXOR;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.LADD;
import org.apache.bcel.generic.LAND;
import org.apache.bcel.generic.LDIV;
import org.apache.bcel.generic.LMUL;
import org.apache.bcel.generic.LNEG;
import org.apache.bcel.generic.LREM;
import org.apache.bcel.generic.LSHL;
import org.apache.bcel.generic.LSHR;
import org.apache.bcel.generic.LSUB;
import org.apache.bcel.generic.LUSHR;
import org.apache.bcel.generic.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArithmeticInstruction_ESTest extends ArithmeticInstruction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IUSHR iUSHR0 = (IUSHR)InstructionConstants.IUSHR;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = iUSHR0.getType(constantPoolGen0);
      assertEquals(1, type0.getSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      IAND iAND0 = new IAND();
      iAND0.setOpcode((short)131);
      Type type0 = iAND0.getType(constantPoolGen0);
      assertEquals("J", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IXOR iXOR0 = new IXOR();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = iXOR0.getType(constantPoolGen0);
      assertEquals(1, type0.getSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      IAND iAND0 = new IAND();
      iAND0.setOpcode((short)129);
      Type type0 = iAND0.getType(constantPoolGen0);
      assertEquals("J", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IOR iOR0 = new IOR();
      Type type0 = iOR0.getType((ConstantPoolGen) null);
      assertEquals(1, type0.getSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LAND lAND0 = new LAND();
      Type type0 = lAND0.getType((ConstantPoolGen) null);
      assertEquals(2, type0.getSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      IAND iAND0 = new IAND();
      Type type0 = iAND0.getType(constantPoolGen0);
      assertEquals(1, type0.getSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LUSHR lUSHR0 = new LUSHR();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lUSHR0.getType(constantPoolGen0);
      assertEquals((byte)11, type0.getType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IUSHR iUSHR0 = new IUSHR();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = iUSHR0.getType(constantPoolGen0);
      assertEquals((byte)10, type0.getType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LSHR lSHR0 = new LSHR();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lSHR0.getType(constantPoolGen0);
      assertEquals(2, type0.getSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ISHR iSHR0 = new ISHR();
      Type type0 = iSHR0.getType(constantPoolGen0);
      assertEquals("I", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LSHL lSHL0 = new LSHL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lSHL0.getType(constantPoolGen0);
      assertEquals("J", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      IAND iAND0 = new IAND();
      iAND0.setOpcode((short)120);
      Type type0 = iAND0.getType(constantPoolGen0);
      assertEquals("I", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DNEG dNEG0 = new DNEG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = dNEG0.getType(constantPoolGen0);
      assertEquals((byte)7, type0.getType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FNEG fNEG0 = new FNEG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fNEG0.getType(constantPoolGen0);
      assertEquals((byte)6, type0.getType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LNEG lNEG0 = new LNEG();
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = lNEG0.getType(constantPoolGen0);
      assertEquals(2, type0.getSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      INEG iNEG0 = new INEG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = iNEG0.getType(constantPoolGen0);
      assertEquals("I", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      IAND iAND0 = new IAND();
      iAND0.setOpcode((short)115);
      Type type0 = iAND0.getType(constantPoolGen0);
      assertEquals("D", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FREM fREM0 = new FREM();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fREM0.getType(constantPoolGen0);
      assertEquals("F", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LREM lREM0 = new LREM();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lREM0.getType(constantPoolGen0);
      assertEquals((byte)11, type0.getType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IREM iREM0 = new IREM();
      Type type0 = iREM0.getType((ConstantPoolGen) null);
      assertEquals((byte)10, type0.getType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      DDIV dDIV0 = new DDIV();
      Type type0 = dDIV0.getType(constantPoolGen0);
      assertEquals(2, type0.getSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FDIV fDIV0 = new FDIV();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fDIV0.getType(constantPoolGen0);
      assertEquals(1, type0.getSize());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LDIV lDIV0 = new LDIV();
      Type type0 = lDIV0.getType(constantPoolGen0);
      assertEquals("J", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IDIV iDIV0 = new IDIV();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = iDIV0.getType(constantPoolGen0);
      assertEquals((byte)10, type0.getType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DMUL dMUL0 = new DMUL();
      Type type0 = dMUL0.getType((ConstantPoolGen) null);
      assertEquals("D", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FMUL fMUL0 = new FMUL();
      Type type0 = fMUL0.getType(constantPoolGen0);
      assertEquals((byte)6, type0.getType());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LMUL lMUL0 = new LMUL();
      Type type0 = lMUL0.getType(constantPoolGen0);
      assertEquals("J", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DSUB dSUB0 = new DSUB();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = dSUB0.getType(constantPoolGen0);
      assertEquals(2, type0.getSize());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FSUB fSUB0 = new FSUB();
      Type type0 = fSUB0.getType((ConstantPoolGen) null);
      assertEquals(1, type0.getSize());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LSUB lSUB0 = new LSUB();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lSUB0.getType(constantPoolGen0);
      assertEquals(2, type0.getSize());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ISUB iSUB0 = new ISUB();
      Type type0 = iSUB0.getType(constantPoolGen0);
      assertEquals("I", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      DADD dADD0 = new DADD();
      Type type0 = dADD0.getType(constantPoolGen0);
      assertEquals("D", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FADD fADD0 = new FADD();
      Type type0 = fADD0.getType((ConstantPoolGen) null);
      assertEquals((byte)6, type0.getType());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LADD lADD0 = new LADD();
      Type type0 = lADD0.getType((ConstantPoolGen) null);
      assertEquals("J", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IMUL iMUL0 = new IMUL();
      Type type0 = iMUL0.getType((ConstantPoolGen) null);
      assertEquals((byte)10, type0.getType());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IADD iADD0 = new IADD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = iADD0.getType(constantPoolGen0);
      assertEquals(1, type0.getSize());
  }
}
