/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:49:00 GMT 2022
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Locale;
import java.util.UnknownFormatConversionException;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantDynamic;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantModule;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPackage;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassLoaderRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byteArray0[2] = (byte)54;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[3] = (byte)84;
      String string0 = "a?YR73IS@";
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a?YR73IS@");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)50;
      ConstantPool constantPool0 = null;
      String string1 = Utility.getSignature("a?YR73IS@");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("La?YR73IS@;", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)50, (byte)0, (byte)54, (byte)84, (byte) (-75), (byte)50}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      boolean boolean2 = byteSequence0.readBoolean();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte)50, (byte)0, (byte)54, (byte)84, (byte) (-75), (byte)50}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertTrue(boolean2);
      assertEquals(1, byteSequence0.getIndex());
      
      int int0 = byteSequence0.readUnsignedShort();
      assertArrayEquals(new byte[] {(byte)50, (byte)0, (byte)54, (byte)84, (byte) (-75), (byte)50}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(54, int0);
      assertEquals(3, byteSequence0.getIndex());
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)50, (byte)0, (byte)54, (byte)84, (byte) (-75), (byte)50}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(string2);
      assertEquals("bastore", string2);
      assertEquals(4, byteSequence0.getIndex());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)54, (-1280), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)32;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)117;
      byteArray0[7] = (byte)57;
      byteArray0[8] = (byte)76;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-126), (byte) (-99), (byte)11, (byte)0, (byte)32, (byte)91, (byte)117, (byte)57, (byte)76}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Jd#B4bV kSFU(4");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string0 = Utility.replace(",n=`~v%s", "Invalid method signature: ", ":@f-hRS&=q");
      assertNotNull(string0);
      assertEquals(",n=`~v%s", string0);
      
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":@f-hRS&=q");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string1 = Utility.encode(byteArray1, false);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertNotNull(string1);
      assertEquals("$A", string1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-126), (byte) (-99), (byte)11, (byte)0, (byte)32, (byte)91, (byte)117, (byte)57, (byte)76}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-126), (byte) (-99), (byte)11, (byte)0, (byte)32, (byte)91, (byte)117, (byte)57, (byte)76}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(string2);
      assertEquals("ixor", string2);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)76, 854, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('K');
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      byte[] byteArray0 = new byte[19];
      byte byte0 = (byte)53;
      byteArray0[8] = (byte)53;
      byte byte1 = (byte) (-85);
      byteArray0[4] = (byte) (-85);
      byteArray0[3] = (byte)53;
      byte byte2 = (byte)61;
      byteArray0[5] = (byte)61;
      byte byte3 = (byte)115;
      byte byte4 = (byte) (-49);
      byteArray0[7] = (byte) (-49);
      byte byte5 = (byte)38;
      byteArray0[8] = (byte)38;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)53, (int) (byte) (-85), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[2] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-123)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-123)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(constantPool0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-123)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(string0);
      assertEquals("i2l", string0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String[] stringArray0 = new String[1];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-58);
      byteArray0[7] = (byte) (-31);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)120, (byte)85, (byte)19, (byte) (-65), (byte)6, (byte) (-58), (byte) (-31)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[1];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)120, (byte)85, (byte)19, (byte) (-65), (byte)6, (byte) (-58), (byte) (-31)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean0);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)120, (byte)85, (byte)19, (byte) (-65), (byte)6, (byte) (-58), (byte) (-31)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(constantInvokeDynamic0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(21779, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((-28040), constantInvokeDynamic0.getClassIndex());
      assertEquals((-28040), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantArray0.length);
      assertNotNull(constantPool1);
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertArrayEquals(new byte[] {(byte) (-110), (byte)120, (byte)85, (byte)19, (byte) (-65), (byte)6, (byte) (-58), (byte) (-31)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(1, constantArray0.length);
      assertNotNull(string0);
      assertEquals("athrow", string0);
      assertEquals(1, constantPool1.getLength());
      assertEquals(5, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-31), (-1423), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 48902. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = new String[1];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-58);
      byteArray0[7] = (byte) (-31);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)120, (byte)85, (byte)19, (byte) (-118), (byte)6, (byte) (-58), (byte) (-31)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[1];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)120, (byte)85, (byte)19, (byte) (-118), (byte)6, (byte) (-58), (byte) (-31)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean0);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)120, (byte)85, (byte)19, (byte) (-118), (byte)6, (byte) (-58), (byte) (-31)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(constantInvokeDynamic0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(21779, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((-28040), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((-28040), constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantArray0.length);
      assertNotNull(constantPool1);
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertArrayEquals(new byte[] {(byte) (-110), (byte)120, (byte)85, (byte)19, (byte) (-118), (byte)6, (byte) (-58), (byte) (-31)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(1, constantArray0.length);
      assertNotNull(string0);
      assertEquals("l2d", string0);
      assertEquals(1, constantPool1.getLength());
      assertEquals(5, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-31), (-1423), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 35334. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-76);
      byteArray0[4] = (byte) (-76);
      byteArray0[6] = (byte)0;
      byteArray0[2] = (byte) (-68);
      byteArray0[0] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(12, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      assertEquals(12, byteArray0.length);
      assertNotNull(constantClass0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(42044, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      
      byteSequence0.close();
      assertEquals(12, byteArray0.length);
      assertEquals(2, byteSequence0.getIndex());
      
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertEquals(12, byteArray0.length);
      assertNotNull(constantClass1);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(42044, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals((byte)7, constantClass1.getTag());
      assertEquals(42044, constantClass1.getNameIndex());
      
      ConstantClass constantClass2 = (ConstantClass)constantClass0.clone();
      assertNotSame(constantClass2, constantClass0);
      assertNotSame(constantClass2, constantClass1);
      assertNotSame(constantClass0, constantClass2);
      assertNotSame(constantClass0, constantClass1);
      assertTrue(constantClass2.equals((Object)constantClass0));
      assertTrue(constantClass2.equals((Object)constantClass1));
      assertTrue(constantClass0.equals((Object)constantClass1));
      assertEquals(12, byteArray0.length);
      assertNotNull(constantClass2);
      assertEquals(42044, constantClass2.getNameIndex());
      assertEquals((byte)7, constantClass2.getTag());
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(42044, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      
      String string0 = constantClass1.toString();
      assertNotSame(constantClass0, constantClass2);
      assertNotSame(constantClass0, constantClass1);
      assertNotSame(constantClass1, constantClass2);
      assertNotSame(constantClass1, constantClass0);
      assertTrue(constantClass0.equals((Object)constantClass1));
      assertTrue(constantClass0.equals((Object)constantClass2));
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertTrue(constantClass1.equals((Object)constantClass2));
      assertEquals(12, byteArray0.length);
      assertNotNull(string0);
      assertEquals("CONSTANT_Class[7](nameIndex = 42044)", string0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(42044, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals((byte)7, constantClass1.getTag());
      assertEquals(42044, constantClass1.getNameIndex());
      
      constantArray0[0] = (Constant) constantClass1;
      ConstantClass constantClass3 = (ConstantClass)constantArray0[0].copy();
      assertNotSame(constantClass3, constantClass0);
      assertNotSame(constantClass3, constantClass2);
      assertNotSame(constantClass3, constantClass1);
      assertTrue(constantClass3.equals((Object)constantClass2));
      assertTrue(constantClass3.equals((Object)constantClass1));
      assertTrue(constantClass3.equals((Object)constantClass0));
      assertEquals(2, constantArray0.length);
      assertNotNull(constantClass3);
      assertEquals(42044, constantClass3.getNameIndex());
      assertEquals((byte)7, constantClass3.getTag());
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 95
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)24;
      byteArray0[2] = (byte)54;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[2] = (byte)84;
      String string0 = "a?YR73IS@";
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a?YR73IS@");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)24;
      ConstantPool constantPool0 = null;
      String string1 = Utility.getSignature("a?YR73IS@");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("La?YR73IS@;", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)24, (byte)0, (byte)84, (byte)0, (byte) (-75), (byte)24}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)24, (byte)0, (byte)84, (byte)0, (byte) (-75), (byte)24}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(string2);
      assertEquals("dload\t\t%0", string2);
      assertEquals(2, byteSequence0.getIndex());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)84, (-1280), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = new String[1];
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-110);
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)19;
      byteArray0[6] = (byte) (-58);
      byte byte1 = (byte) (-31);
      byteArray0[7] = (byte) (-31);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)120, (byte)85, (byte)19, (byte)19, (byte)0, (byte) (-58), (byte) (-31)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[1];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)120, (byte)85, (byte)19, (byte)19, (byte)0, (byte) (-58), (byte) (-31)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean0);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)120, (byte)85, (byte)19, (byte)19, (byte)0, (byte) (-58), (byte) (-31)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(constantInvokeDynamic0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((-28040), constantInvokeDynamic0.getClassIndex());
      assertEquals(21779, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((-28040), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantArray0.length);
      assertNotNull(constantPool1);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 198. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "new";
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      short short0 = Utility.searchOpcode("new");
      assertEquals((short)187, short0);
      
      String string1 = Utility.getSignature("new");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Lnew;", string1);
      
      String string2 = "*~?E='4U-?@8|<p b";
      short short1 = Utility.searchOpcode("*~?E='4U-?@8|<p b");
      assertFalse(short1 == short0);
      assertEquals((short) (-1), short1);
      
      try { 
        Utility.typeOfSignature("*~?E='4U-?@8|<p b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ~?E='4U-?@8|<p b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = Utility.compactClassName("]`", "]`", true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)94;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte) (-55);
      String string1 = Utility.compactClassName(".+> T", "", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(".+> T", string1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)44, (int) (byte)70, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object2));
      assertNotNull(object4);
      
      objectArray0[4] = object1;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object4));
      assertNotNull(object5);
      
      objectArray0[5] = object3;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object1));
      assertNotNull(object6);
      
      objectArray0[6] = object6;
      Object object7 = new Object();
      assertFalse(object7.equals((Object)object3));
      assertFalse(object7.equals((Object)object4));
      assertFalse(object7.equals((Object)object5));
      assertFalse(object7.equals((Object)object0));
      assertFalse(object7.equals((Object)object2));
      assertFalse(object7.equals((Object)object1));
      assertFalse(object7.equals((Object)object6));
      assertNotNull(object7);
      
      Object object8 = new Object();
      assertFalse(object8.equals((Object)object6));
      assertFalse(object8.equals((Object)object3));
      assertFalse(object8.equals((Object)object0));
      assertFalse(object8.equals((Object)object4));
      assertFalse(object8.equals((Object)object5));
      assertFalse(object8.equals((Object)object2));
      assertFalse(object8.equals((Object)object7));
      assertFalse(object8.equals((Object)object1));
      assertNotNull(object8);
      
      objectArray0[8] = object8;
      String string0 = Utility.printArray(objectArray0);
      assertEquals(9, objectArray0.length);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-98);
      objectArray0[0] = (Object) (byte)0;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte) (-28);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (-2131));
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-98), (byte)0, (byte) (-70), (byte)0, (byte)92, (byte)65, (byte) (-28)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(string1);
      assertEquals("0:    ifle\t\t#186\n3:    nop\n4:    dup2\n5:    lstore_2\n6:    <illegal opcode>\n", string1);
      assertEquals(0, constantPool0.getLength());
      
      String string2 = Utility.getSignature("0:    ifle\t\t#186\n3:    nop\n4:    dup2\n5:    lstore_2\n6:    <illegal opcode>\n");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("L0:;", string2);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)60;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(12, byteArray0.length);
      assertFalse(boolean0);
      
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-68);
      byteArray0[8] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(12, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      assertEquals(12, byteArray0.length);
      assertNotNull(constantClass0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(61500, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      
      byteSequence0.close();
      assertEquals(12, byteArray0.length);
      assertEquals(2, byteSequence0.getIndex());
      
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertEquals(12, byteArray0.length);
      assertNotNull(constantClass1);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(61500, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(61500, constantClass1.getNameIndex());
      assertEquals((byte)7, constantClass1.getTag());
      
      ConstantClass constantClass2 = (ConstantClass)constantClass0.clone();
      assertNotSame(constantClass2, constantClass1);
      assertNotSame(constantClass2, constantClass0);
      assertNotSame(constantClass0, constantClass2);
      assertNotSame(constantClass0, constantClass1);
      assertTrue(constantClass2.equals((Object)constantClass0));
      assertTrue(constantClass2.equals((Object)constantClass1));
      assertTrue(constantClass0.equals((Object)constantClass1));
      assertEquals(12, byteArray0.length);
      assertNotNull(constantClass2);
      assertEquals(61500, constantClass2.getNameIndex());
      assertEquals((byte)7, constantClass2.getTag());
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(61500, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      
      String string0 = constantClass1.toString();
      assertNotSame(constantClass0, constantClass2);
      assertNotSame(constantClass0, constantClass1);
      assertNotSame(constantClass1, constantClass0);
      assertNotSame(constantClass1, constantClass2);
      assertTrue(constantClass0.equals((Object)constantClass2));
      assertTrue(constantClass0.equals((Object)constantClass1));
      assertTrue(constantClass1.equals((Object)constantClass2));
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertEquals(12, byteArray0.length);
      assertNotNull(string0);
      assertEquals("CONSTANT_Class[7](nameIndex = 61500)", string0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(61500, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(61500, constantClass1.getNameIndex());
      assertEquals((byte)7, constantClass1.getTag());
      
      constantArray0[0] = (Constant) constantClass1;
      ConstantClass constantClass3 = (ConstantClass)constantArray0[0].copy();
      assertNotSame(constantClass3, constantClass2);
      assertNotSame(constantClass3, constantClass1);
      assertNotSame(constantClass3, constantClass0);
      assertTrue(constantClass3.equals((Object)constantClass0));
      assertTrue(constantClass3.equals((Object)constantClass1));
      assertTrue(constantClass3.equals((Object)constantClass2));
      assertEquals(2, constantArray0.length);
      assertNotNull(constantClass3);
      assertEquals((byte)7, constantClass3.getTag());
      assertEquals(61500, constantClass3.getNameIndex());
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
      assertEquals(12, byteArray0.length);
      assertEquals(2, constantArray0.length);
      assertNotNull(string1);
      assertEquals("istore_1", string1);
      assertEquals(2, constantPool0.getLength());
      assertEquals(3, byteSequence0.getIndex());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = 990;
      try { 
        Utility.typeOfMethodSignature("L[qEeGg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L[qEeGg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = Utility.setBit(170, 0);
      assertEquals(171, int0);
      
      String string0 = "V(<O/rqw0OZSia0df";
      String string1 = Utility.compactClassName("xf_icmpge");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("xf_icmpge", string1);
      
      try { 
        Utility.typeOfSignature("H}bt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H}bt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String[] stringArray0 = new String[0];
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)61, (byte)42, (byte) (-60), (byte)61, (byte)50}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertArrayEquals(new byte[] {(byte)61, (byte)42, (byte) (-60), (byte)61, (byte)50}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(string1);
      assertEquals("istore_2", string1);
      assertEquals(1, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)54;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)50, (byte)83, (byte)54, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[3] = (byte)84;
      String string0 = "a?YR73IS@";
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a?YR73IS@");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)50;
      ConstantPool constantPool0 = null;
      int int0 = (-1478);
      String string1 = Utility.getSignature("a?YR73IS@");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("La?YR73IS@;", string1);
      
      boolean boolean3 = true;
      int int1 = (-1280);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)50, (byte)83, (byte)54, (byte)84, (byte) (-75), (byte)50}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      float float0 = byteSequence0.readFloat();
      assertArrayEquals(new byte[] {(byte)50, (byte)83, (byte)54, (byte)84, (byte) (-75), (byte)50}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(1.2294169E-8F, float0, 0.01F);
      assertEquals(4, byteSequence0.getIndex());
      
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String[] stringArray0 = new String[1];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)85;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-58);
      byteArray0[7] = (byte) (-31);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)120, (byte)85, (byte)19, (byte)120, (byte)6, (byte) (-58), (byte) (-31)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[1];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)120, (byte)85, (byte)19, (byte)120, (byte)6, (byte) (-58), (byte) (-31)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean0);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)120, (byte)85, (byte)19, (byte)120, (byte)6, (byte) (-58), (byte) (-31)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(constantInvokeDynamic0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(21779, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((-28040), constantInvokeDynamic0.getClassIndex());
      assertEquals((-28040), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)120, (byte)85, (byte)19, (byte)120, (byte)6, (byte) (-58), (byte) (-31)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(1, constantArray0.length);
      assertNotNull(string0);
      assertEquals("ishl", string0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(5, byteSequence0.getIndex());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-31), (-1423), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 30726. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-68);
      byteArray0[8] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(12, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      assertEquals(12, byteArray0.length);
      assertNotNull(constantClass0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(61500, constantClass0.getNameIndex());
      
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertEquals(12, byteArray0.length);
      assertNotNull(constantClass1);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(61500, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass1.getTag());
      assertEquals(61500, constantClass1.getNameIndex());
      
      String string0 = constantClass1.toString();
      assertNotSame(constantClass0, constantClass1);
      assertNotSame(constantClass1, constantClass0);
      assertTrue(constantClass0.equals((Object)constantClass1));
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertEquals(12, byteArray0.length);
      assertNotNull(string0);
      assertEquals("CONSTANT_Class[7](nameIndex = 61500)", string0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(61500, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass1.getTag());
      assertEquals(61500, constantClass1.getNameIndex());
      
      constantArray0[0] = (Constant) constantClass0;
      ConstantClass constantClass2 = new ConstantClass(constantClass0);
      assertTrue(constantClass2.equals((Object)constantClass0));
      assertTrue(constantClass2.equals((Object)constantClass1));
      assertTrue(constantClass0.equals((Object)constantClass1));
      assertEquals(12, byteArray0.length);
      assertNotNull(constantClass2);
      assertEquals(61500, constantClass2.getNameIndex());
      assertEquals((byte)7, constantClass2.getTag());
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(61500, constantClass0.getNameIndex());
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
      assertEquals(12, byteArray0.length);
      assertEquals(2, constantArray0.length);
      assertNotNull(string1);
      assertEquals("fstore_0", string1);
      assertEquals(2, constantPool0.getLength());
      assertEquals(3, byteSequence0.getIndex());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)54;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)50, (byte)83, (byte)54, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[3] = (byte)84;
      String string0 = "a?YR73IS@";
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a?YR73IS@");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)50;
      ConstantPool constantPool0 = null;
      int int0 = (-1478);
      String string1 = Utility.getSignature("a?YR73IS@");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("La?YR73IS@;", string1);
      
      boolean boolean3 = true;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)50, (byte)83, (byte)54, (byte)84, (byte) (-75), (byte)50}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      int int1 = byteSequence0.readUnsignedByte();
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)50, (byte)83, (byte)54, (byte)84, (byte) (-75), (byte)50}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(50, int1);
      assertEquals(1, byteSequence0.getIndex());
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)50, (byte)83, (byte)54, (byte)84, (byte) (-75), (byte)50}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(string2);
      assertEquals("aastore", string2);
      assertEquals(2, byteSequence0.getIndex());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)54, (-1280), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "u&}Hx[DVT5^5<*";
      stringArray0[1] = "u&}Hx[DVT5^5<*";
      stringArray0[1] = "u&}Hx[DVT5^5<*";
      String string0 = Utility.replace("u&}Hx[DVT5^5<*", "u&}Hx[DVT5^5<*", "u&}Hx[DVT5^5<*");
      assertNotNull(string0);
      assertEquals("u&}Hx[DVT5^5<*", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)121, (byte) (-16), (byte)13, (byte) (-79), (byte)3, (byte)1, (byte)36}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)121, (byte) (-16), (byte)13, (byte) (-79), (byte)3, (byte)1, (byte)36}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(string1);
      assertEquals("lshl", string1);
      assertEquals(1, byteSequence0.getIndex());
      
      String string2 = Utility.format(5, 5, true, ']');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("5]]]]", string2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)89, (byte) (-117), (byte)34}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertArrayEquals(new byte[] {(byte)89, (byte) (-117), (byte)34}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(string1);
      assertEquals("dup", string1);
      assertEquals(1, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)93;
      byte byte0 = (byte)108;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-125);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 20, (int) (byte)108, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = Utility.accessToString((-2986));
      assertNotNull(string0);
      assertEquals("private protected final volatile abstract synthetic annotation enum module", string0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = "pop";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)92, (byte) (-69), (byte) (-83)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)92, (byte) (-69), (byte) (-83)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(string2);
      assertEquals("dup2", string2);
      assertEquals(1, byteSequence0.getIndex());
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Lz`;z_\"7(R?ZGE6{", "Lz`;z_\"7(R?ZGE6{", "pop", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R?ZGE6{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "`TcSt";
      stringArray0[1] = "`TcSt";
      stringArray0[2] = "`TcSt";
      stringArray0[3] = "`TcSt";
      stringArray0[4] = "`TcSt";
      stringArray0[5] = "`TcSt";
      stringArray0[6] = "`TcSt";
      stringArray0[7] = "`TcSt";
      stringArray0[8] = "`TcSt";
      String string0 = Utility.methodTypeToSignature("`TcSt", stringArray0);
      assertEquals(9, stringArray0.length);
      assertNotNull(string0);
      assertEquals("(L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;)L`TcSt;", string0);
      
      String string1 = Utility.methodSignatureToString("(L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;)L`TcSt;", "`TcSt", "`TcSt");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("`TcSt `TcSt `TcSt(`TcSt arg1, `TcSt arg2, `TcSt arg3, `TcSt arg4, `TcSt arg5, `TcSt arg6, `TcSt arg7, `TcSt arg8, `TcSt arg9)", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte) (-22);
      byteArray0[6] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-112), (byte)9, (byte)101, (byte) (-22), (byte) (-22), (byte)0, (byte)10}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte) (-112), (byte)9, (byte)101, (byte) (-22), (byte) (-22), (byte)0, (byte)10}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(string2);
      assertEquals("d2f", string2);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      
      String string3 = Utility.convertString("(");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("(", string3);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[5] = (byte)42;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (-3560));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)42}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    aload_0\n", string0);
      
      String string1 = null;
      try { 
        Utility.typeOfSignature("NO\"}svu|Ao@:(uKv8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NO\"}svu|Ao@:(uKv8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = Utility.fillup(" ;EyuQj", 32, false, 'S');
      assertNotNull(string0);
      assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSS ;EyuQj", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)25;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte)26;
      try { 
        Utility.typeOfSignature("NF_yMiu8'^VY.'mn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NF_yMiu8'^VY.'mn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "`TcSt";
      stringArray0[1] = "`TcSt";
      stringArray0[2] = "`TcSt";
      stringArray0[3] = "`TcSt";
      stringArray0[4] = "`TcSt";
      stringArray0[5] = "`TcSt";
      stringArray0[6] = "`TcSt";
      stringArray0[7] = "`TcSt";
      stringArray0[8] = "`TcSt";
      String string0 = Utility.methodTypeToSignature("`TcSt", stringArray0);
      assertEquals(9, stringArray0.length);
      assertNotNull(string0);
      assertEquals("(L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;)L`TcSt;", string0);
      
      String string1 = Utility.methodSignatureToString("(L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;)L`TcSt;", "`TcSt", "`TcSt");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("`TcSt `TcSt `TcSt(`TcSt arg1, `TcSt arg2, `TcSt arg3, `TcSt arg4, `TcSt arg5, `TcSt arg6, `TcSt arg7, `TcSt arg8, `TcSt arg9)", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte) (-22);
      byteArray0[6] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-121), (byte)9, (byte)101, (byte) (-22), (byte) (-22), (byte)0, (byte)10}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      short short0 = byteSequence0.readShort();
      assertArrayEquals(new byte[] {(byte) (-121), (byte)9, (byte)101, (byte) (-22), (byte) (-22), (byte)0, (byte)10}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((short) (-30967), short0);
      assertEquals(2, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-121), (byte)9, (byte)101, (byte) (-22), (byte) (-22), (byte)0, (byte)10}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(string2);
      assertEquals("lsub", string2);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      
      String string3 = Utility.convertString("(");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("(", string3);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(">vW", "\"", "`TcSt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >vW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-94);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[1] = (byte) (-17);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte)123;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-94), (byte) (-17), (byte)0, (byte) (-85), (byte) (-17), (byte)123}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[Ja`&5wVuXw}ULb");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string0 = Utility.typeSignatureToString("[Ja`&5wVuXw}ULb", false);
      assertNotNull(string0);
      assertEquals("long[]", string0);
      
      byte[] byteArray1 = Utility.decode("0^kHHq~Cu`Y;hZ", false);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(14, byteArray1.length);
      assertNotNull(byteArray1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(14, byteArray1.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string1 = "tableswitch";
      String[] stringArray0 = new String[5];
      stringArray0[0] = "long[]";
      stringArray0[1] = "tableswitch";
      stringArray0[2] = "[Ja`&5wVuXw}ULb";
      stringArray0[3] = "0^kHHq~Cu`Y;hZ";
      stringArray0[4] = "tableswitch";
      try { 
        Utility.typeOfSignature(")FK[gjMy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )FK[gjMy
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = Utility.compactClassName("if_icmpge");
      assertNotNull(string0);
      assertEquals("if_icmpge", string0);
      
      try { 
        Utility.typeOfSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)34;
      byteArray0[1] = (byte) (-60);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-60), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean0);
      
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)61;
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-60), (-3560));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-60), (byte)34, (byte) (-116), (byte)61, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    wide\t(wide)\n2:    fload_0\n3:    f2l\n4:    istore_2\n5:    nop\n", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature("0:    nop\n1:    wide\t(wide)\n2:    fload_0\n3:    f2l\n4:    istore_2\n5:    nop\n", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      assertNotNull(string1);
      assertEquals("()L0:;", string1);
      
      String string2 = Utility.printArray((Object[]) null);
      assertNull(string2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 59, (int) (byte)42, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-68);
      byteArray0[8] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(12, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      assertEquals(12, byteArray0.length);
      assertNotNull(constantClass0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(61500, constantClass0.getNameIndex());
      
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertEquals(12, byteArray0.length);
      assertNotNull(constantClass1);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(61500, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass1.getTag());
      assertEquals(61500, constantClass1.getNameIndex());
      
      String string0 = constantClass1.toString();
      assertNotSame(constantClass0, constantClass1);
      assertNotSame(constantClass1, constantClass0);
      assertTrue(constantClass0.equals((Object)constantClass1));
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertEquals(12, byteArray0.length);
      assertNotNull(string0);
      assertEquals("CONSTANT_Class[7](nameIndex = 61500)", string0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(61500, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass1.getTag());
      assertEquals(61500, constantClass1.getNameIndex());
      
      constantArray0[0] = (Constant) constantClass0;
      ConstantClass constantClass2 = (ConstantClass)constantArray0[0].copy();
      assertNotSame(constantClass2, constantClass0);
      assertNotSame(constantClass2, constantClass1);
      assertTrue(constantClass2.equals((Object)constantClass1));
      assertTrue(constantClass2.equals((Object)constantClass0));
      assertEquals(2, constantArray0.length);
      assertNotNull(constantClass2);
      assertEquals(61500, constantClass2.getNameIndex());
      assertEquals((byte)7, constantClass2.getTag());
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
      assertEquals(12, byteArray0.length);
      assertEquals(2, constantArray0.length);
      assertNotNull(string1);
      assertEquals("astore_3", string1);
      assertEquals(2, constantPool0.getLength());
      assertEquals(3, byteSequence0.getIndex());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.getSignature("athrouw");
      assertNotNull(string0);
      assertEquals("Lathrouw;", string0);
      
      String string1 = Utility.compactClassName("Lathrouw;", "Lathrouw;", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "idiv");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = Utility.accessToString((-3132), false);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("protected volatile transient native interface synthetic annotation enum module", string2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      byte byte0 = (byte)9;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte) (-121);
      int int0 = 10;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 10, (int) (byte) (-121));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      short short0 = Utility.searchOpcode("new");
      assertEquals((short)187, short0);
      
      String string0 = Utility.accessToString((int) (short)187);
      assertNotNull(string0);
      assertEquals("public private static final synchronized transient", string0);
      
      String string1 = "&%Jg";
      short short1 = Utility.searchOpcode("&%Jg");
      assertFalse(short1 == short0);
      assertEquals((short) (-1), short1);
      
      try { 
        Utility.typeOfSignature("&%Jg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &%Jg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      assertFalse(boolean0);
      
      String string0 = Utility.methodTypeToSignature(" ", (String[]) null);
      assertNotNull(string0);
      assertEquals("()L;", string0);
      
      String string1 = Utility.methodTypeToSignature(" ", (String[]) null);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("()L;", string1);
      
      String string2 = Utility.methodSignatureReturnType("()L;", false);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      try { 
        Utility.typeOfMethodSignature("Invalid signature: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = ".debug";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".debug");
      assertFalse(boolean0);
      
      String string1 = Utility.accessToString(80);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("final volatile", string1);
      
      String string2 = Utility.classOrInterface(80);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("class", string2);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('_');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[3] = (Object) "final volatile";
      short short0 = Utility.searchOpcode("final volatile");
      assertEquals((short) (-1), short0);
      
      int int0 = 2141;
      String string3 = Utility.format(390, 2141, true, '_');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = Utility.compactClassName("class");
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("class", string4);
      
      String string5 = Utility.getSignature("java.lang.");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("Ljava/lang/;", string5);
      
      int int1 = 3;
      boolean boolean2 = Utility.isSet(80, 3);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string6 = Utility.signatureToString("Ljava/lang/;", true);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = Utility.format(390, (short) (-1), false, '_');
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals("390", string7);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-71)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-71)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(constantPool0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", low = ");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "indt");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Utility.methodTypeToSignature("indt", (String[]) null);
      assertNotNull(string0);
      assertEquals("()Lindt;", string0);
      
      String string1 = Utility.methodTypeToSignature("indt", (String[]) null);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("()Lindt;", string1);
      
      String string2 = Utility.methodSignatureReturnType("()Lindt;", false);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("indt", string2);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte) (-78);
      byteArray0[7] = (byte) (-78);
      byteArray0[8] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-78), (byte) (-78), (byte) (-78), (byte) (-78), (byte) (-78), (byte) (-78), (byte) (-78), (byte) (-78), (byte)16}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[9];
      ConstantLong constantLong0 = new ConstantLong((byte) (-78));
      assertNotNull(constantLong0);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-78L), constantLong0.getBytes());
      
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertNotNull(constantLong1);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-78L), constantLong0.getBytes());
      assertEquals((-78L), constantLong1.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      
      constantArray0[0] = (Constant) constantLong1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-311), 251);
      assertNotNull(constantInterfaceMethodref0);
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(251, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((-311), constantInterfaceMethodref0.getClassIndex());
      
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      assertTrue(constantInterfaceMethodref1.equals((Object)constantInterfaceMethodref0));
      assertNotNull(constantInterfaceMethodref1);
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(251, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((-311), constantInterfaceMethodref0.getClassIndex());
      assertEquals((-311), constantInterfaceMethodref1.getClassIndex());
      assertEquals(251, constantInterfaceMethodref1.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref1.getTag());
      
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantFloat constantFloat0 = new ConstantFloat(0.75F);
      assertNotNull(constantFloat0);
      assertEquals(0.75F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      constantArray0[2] = (Constant) constantFloat0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(62, (-539));
      assertNotNull(constantFieldref0);
      assertEquals((-539), constantFieldref0.getNameAndTypeIndex());
      assertEquals(62, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      assertTrue(constantFieldref1.equals((Object)constantFieldref0));
      assertNotNull(constantFieldref1);
      assertEquals((-539), constantFieldref0.getNameAndTypeIndex());
      assertEquals(62, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((byte)9, constantFieldref1.getTag());
      assertEquals((-539), constantFieldref1.getNameAndTypeIndex());
      assertEquals(62, constantFieldref1.getClassIndex());
      
      constantArray0[3] = (Constant) constantFieldref1;
      ConstantFieldref constantFieldref2 = (ConstantFieldref)constantFieldref1.copy();
      assertNotSame(constantFieldref0, constantFieldref2);
      assertNotSame(constantFieldref0, constantFieldref1);
      assertNotSame(constantFieldref1, constantFieldref2);
      assertNotSame(constantFieldref1, constantFieldref0);
      assertNotSame(constantFieldref2, constantFieldref1);
      assertNotSame(constantFieldref2, constantFieldref0);
      assertTrue(constantFieldref0.equals((Object)constantFieldref1));
      assertTrue(constantFieldref1.equals((Object)constantFieldref0));
      assertTrue(constantFieldref2.equals((Object)constantFieldref0));
      assertTrue(constantFieldref2.equals((Object)constantFieldref1));
      assertNotNull(constantFieldref2);
      assertEquals((-539), constantFieldref0.getNameAndTypeIndex());
      assertEquals(62, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((byte)9, constantFieldref1.getTag());
      assertEquals((-539), constantFieldref1.getNameAndTypeIndex());
      assertEquals(62, constantFieldref1.getClassIndex());
      assertEquals((byte)9, constantFieldref2.getTag());
      assertEquals(62, constantFieldref2.getClassIndex());
      assertEquals((-539), constantFieldref2.getNameAndTypeIndex());
      
      constantArray0[4] = (Constant) constantFieldref2;
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-78), (byte) (-78), (byte) (-78), (byte) (-78), (byte) (-78), (byte) (-78), (byte) (-78), (byte) (-78), (byte)16}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(constantInteger0);
      assertEquals((-1296911694), constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(4, byteSequence0.getIndex());
      
      constantArray0[5] = (Constant) constantInteger0;
      ConstantClass constantClass0 = new ConstantClass(66);
      assertNotNull(constantClass0);
      assertEquals(66, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      
      constantArray0[6] = (Constant) constantClass0;
      ConstantInterfaceMethodref constantInterfaceMethodref2 = new ConstantInterfaceMethodref((byte)16, (byte) (-78));
      assertFalse(constantInterfaceMethodref2.equals((Object)constantInterfaceMethodref0));
      assertFalse(constantInterfaceMethodref2.equals((Object)constantInterfaceMethodref1));
      assertNotNull(constantInterfaceMethodref2);
      assertEquals(16, constantInterfaceMethodref2.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref2.getTag());
      assertEquals((-78), constantInterfaceMethodref2.getNameAndTypeIndex());
      
      constantArray0[7] = (Constant) constantInterfaceMethodref2;
      ConstantClass constantClass1 = new ConstantClass((byte) (-78));
      assertFalse(constantClass1.equals((Object)constantClass0));
      assertNotNull(constantClass1);
      assertEquals((byte)7, constantClass1.getTag());
      assertEquals((-78), constantClass1.getNameIndex());
      
      constantArray0[8] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(9, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(9, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 45746. Constant pool size is: 9
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = Utility.clearBit(187, 187);
      assertEquals(187, int0);
      
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)93;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte) (-124);
      Constant[] constantArray0 = new Constant[0];
      String string0 = Utility.printArray((Object[]) constantArray0, false, false);
      assertEquals(0, constantArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 190, (int) (byte) (-114), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("Fex`e>ns ", false);
      assertArrayEquals(new byte[] {(byte)70, (byte)101, (byte)120, (byte)96, (byte)101, (byte)62, (byte)110, (byte)115, (byte)32}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string0 = Utility.typeSignatureToString("Fex`e>ns ", false);
      assertNotNull(string0);
      assertEquals("float", string0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      int int0 = Utility.setBit(5425, 5425);
      assertEquals(136497, int0);
      
      boolean boolean1 = false;
      byte[] byteArray1 = Utility.decode("float", false);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)102, (byte)108, (byte)111, (byte)97, (byte)116}, byteArray1);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      
      String string1 = "if_icmplt";
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)102, (byte)108, (byte)111, (byte)97, (byte)116}, byteArray1);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[3];
      ConstantDynamic constantDynamic0 = new ConstantDynamic(byteSequence0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)102, (byte)108, (byte)111, (byte)97, (byte)116}, byteArray1);
      assertEquals(5, byteArray1.length);
      assertNotNull(constantDynamic0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((byte)17, constantDynamic0.getTag());
      assertEquals(28513, constantDynamic0.getNameAndTypeIndex());
      assertEquals(26220, constantDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(26220, constantDynamic0.getClassIndex());
      
      constantArray0[0] = (Constant) constantDynamic0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("if_icmplt");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("if_icmplt", constantUtf8_0.getBytes());
      
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getCachedInstance("b`w;@]X");
      assertNotSame(constantUtf8_1, constantUtf8_0);
      assertFalse(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("b`w;@]X", constantUtf8_1.getBytes());
      
      constantArray0[2] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)102, (byte)108, (byte)111, (byte)97, (byte)116}, byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(3, constantArray0.length);
      assertNotNull(string2);
      assertEquals("ineg", string2);
      assertEquals(3, constantPool0.getLength());
      assertEquals(5, byteSequence0.getIndex());
      
      try { 
        Utility.methodSignatureArgumentTypes("if_icmplt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmplt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = Utility.clearBit(187, 187);
      assertEquals(187, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)93;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte)82;
      byteArray0[7] = (byte) (-124);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 190, (int) (byte) (-113), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = Utility.clearBit(187, 187);
      assertEquals(187, int0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.printArray((Object[]) constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)87}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)87}, byteArray0);
      assertEquals(0, constantArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotNull(string1);
      assertEquals("pop", string1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      
      String string2 = Utility.classOrInterface((byte) (-58));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("interface", string2);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = new String[1];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-58);
      byteArray0[6] = (byte) (-31);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)120, (byte)85, (byte)19, (byte) (-101), (byte)0, (byte) (-31), (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[1];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)120, (byte)85, (byte)19, (byte) (-101), (byte)0, (byte) (-31), (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean0);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)120, (byte)85, (byte)19, (byte) (-101), (byte)0, (byte) (-31), (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(constantInvokeDynamic0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(21779, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((-28040), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((-28040), constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantArray0.length);
      assertNotNull(constantPool1);
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertArrayEquals(new byte[] {(byte) (-110), (byte)120, (byte)85, (byte)19, (byte) (-101), (byte)0, (byte) (-31), (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(1, constantArray0.length);
      assertNotNull(string0);
      assertEquals("iflt\t\t#229", string0);
      assertEquals(1, constantPool1.getLength());
      assertEquals(7, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-31), (-1423), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 39680. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "Ch@`Ya,O[[G4TV";
      String string1 = Utility.replace("Ch@`Ya,O[[G4TV", "Ch@`Ya,O[[G4TV", "Ch@`Ya,O[[G4TV");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Ch@`Ya,O[[G4TV", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)102, (byte)65, (byte)79, (byte) (-7), (byte)77, (byte) (-96), (byte)6, (byte)1, (byte) (-102)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)102, (byte)65, (byte)79, (byte) (-7), (byte)77, (byte) (-96), (byte)6, (byte)1, (byte) (-102)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(string2);
      assertEquals("fsub", string2);
      assertEquals(1, byteSequence0.getIndex());
      
      int int0 = 256;
      String string3 = Utility.accessToString(256);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("native", string3);
      
      boolean boolean0 = true;
      try { 
        Utility.decode("FTxA-la42wY_", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = Utility.accessToString((-151));
      assertNotNull(string0);
      assertEquals("public static synchronized volatile native interface abstract strictfp synthetic annotation enum module", string0);
      
      byte byte0 = Utility.typeOfSignature("SQ");
      assertEquals((byte)9, byte0);
      
      short short0 = Utility.searchOpcode("public static synchronized volatile native interface abstract strictfp synthetic annotation enum module");
      assertEquals((short) (-1), short0);
      
      int int0 = Utility.setBit(3434, (-151));
      assertEquals(3946, int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      String string1 = Utility.toHexString(byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)9, (byte)9, (byte)9, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(string1);
      assertEquals("09 09 09 00", string1);
      
      try { 
        Utility.methodSignatureToString("public static synchronized volatile native interface abstract strictfp synthetic annotation enum module", "Byte code error: ", "public static synchronized volatile native interface abstract strictfp synthetic annotation enum module", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public static synchronized volatile native interface abstract strictfp synthetic annotation enum module
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Constant pool at index ");
      assertFalse(boolean0);
      
      String string0 = Utility.printArray(objectArray0, false, false);
      assertEquals(1, objectArray0.length);
      assertNotNull(string0);
      assertEquals("null", string0);
      
      boolean boolean1 = false;
      byte byte0 = Utility.typeOfSignature("Constant pool at index ");
      assertEquals((byte)5, byte0);
      
      try { 
        Utility.typeOfMethodSignature(">|KXxWteFbkT|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >|KXxWteFbkT|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = Utility.compactClassName("%[0):As0B", "mD@a][N", false);
      assertNotNull(string0);
      assertEquals("%[0):As0B", string0);
      
      String string1 = Utility.getSignature("95s");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("L95s;", string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)9;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)9, (int) (byte) (-45), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)54;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)50, (byte)83, (byte)54, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[3] = (byte)84;
      String string0 = "a?YR73IS@";
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a?YR73IS@");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)50;
      ConstantPool constantPool0 = null;
      int int0 = (-1478);
      String string1 = Utility.getSignature("a?YR73IS@");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("La?YR73IS@;", string1);
      
      boolean boolean3 = true;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)50, (byte)83, (byte)54, (byte)84, (byte) (-75), (byte)50}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)50, (byte)83, (byte)54, (byte)84, (byte) (-75), (byte)50}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(string2);
      assertEquals("aaload", string2);
      assertEquals(1, byteSequence0.getIndex());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)54, (-1280), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "G@`7~";
      try { 
        Utility.typeOfSignature("G@`7~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G@`7~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      
      String string0 = "G5";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = true;
      try { 
        Utility.typeOfSignature("G5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)54;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)57, (byte)83, (byte)54, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[3] = (byte)84;
      String string0 = "a?YR73IS@";
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a?YR73IS@");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)57;
      ConstantPool constantPool0 = null;
      int int0 = (-1478);
      String string1 = Utility.getSignature("a?YR73IS@");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("La?YR73IS@;", string1);
      
      boolean boolean3 = true;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)57, (byte)83, (byte)54, (byte)84, (byte) (-75), (byte)57}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      char char0 = byteSequence0.readChar();
      assertArrayEquals(new byte[] {(byte)57, (byte)83, (byte)54, (byte)84, (byte) (-75), (byte)57}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals('\u3953', char0);
      assertEquals(2, byteSequence0.getIndex());
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)57, (byte)83, (byte)54, (byte)84, (byte) (-75), (byte)57}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(string2);
      assertEquals("istore\t\t%84", string2);
      assertEquals(4, byteSequence0.getIndex());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)54, (-1280), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.typeSignatureToString("L;V", true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      byteArray0[0] = (byte) (-110);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-110)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      short short0 = Utility.searchOpcode("F8NLot<k#6#kpxO5");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)112;
      byteArray0[3] = (byte)35;
      byteArray0[5] = (byte) (-103);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)118, (-2326), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)95;
      byteArray0[5] = (byte)64;
      byteArray0[7] = (byte) (-68);
      byteArray0[8] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(12, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      assertEquals(12, byteArray0.length);
      assertNotNull(constantClass0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(59881, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertEquals(12, byteArray0.length);
      assertNotNull(constantClass1);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(59881, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals((byte)7, constantClass1.getTag());
      assertEquals(59881, constantClass1.getNameIndex());
      
      String string0 = constantClass1.toString();
      assertNotSame(constantClass0, constantClass1);
      assertNotSame(constantClass1, constantClass0);
      assertTrue(constantClass0.equals((Object)constantClass1));
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertEquals(12, byteArray0.length);
      assertNotNull(string0);
      assertEquals("CONSTANT_Class[7](nameIndex = 59881)", string0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(59881, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals((byte)7, constantClass1.getTag());
      assertEquals(59881, constantClass1.getNameIndex());
      
      constantArray0[0] = (Constant) constantClass1;
      ConstantClass constantClass2 = (ConstantClass)constantArray0[0].copy();
      assertNotSame(constantClass2, constantClass0);
      assertNotSame(constantClass2, constantClass1);
      assertTrue(constantClass2.equals((Object)constantClass0));
      assertTrue(constantClass2.equals((Object)constantClass1));
      assertEquals(2, constantArray0.length);
      assertNotNull(constantClass2);
      assertEquals(59881, constantClass2.getNameIndex());
      assertEquals((byte)7, constantClass2.getTag());
      
      constantArray0[1] = (Constant) constantClass2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
      assertEquals(12, byteArray0.length);
      assertEquals(2, constantArray0.length);
      assertNotNull(string1);
      assertEquals("astore_0", string1);
      assertEquals(2, constantPool0.getLength());
      assertEquals(3, byteSequence0.getIndex());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",Uk+&:_)UU{Y");
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfMethodSignature("U}*6-y6PN8NwR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U}*6-y6PN8NwR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = Utility.classOrInterface(176);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      String string1 = Utility.compactClassName("class", true);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("class", string1);
      
      boolean boolean0 = Utility.isSet((-20), (-20));
      assertTrue(boolean0);
      
      String string2 = "X&?=";
      try { 
        Utility.typeSignatureToString("X&?=", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X&?='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = new String[1];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-58);
      byteArray0[7] = (byte) (-31);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)120, (byte)85, (byte)19, (byte)85, (byte)6, (byte) (-58), (byte) (-31)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[1];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)120, (byte)85, (byte)19, (byte)85, (byte)6, (byte) (-58), (byte) (-31)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean0);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)120, (byte)85, (byte)19, (byte)85, (byte)6, (byte) (-58), (byte) (-31)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(constantInvokeDynamic0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(21779, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((-28040), constantInvokeDynamic0.getClassIndex());
      assertEquals((-28040), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantArray0.length);
      assertNotNull(constantPool1);
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertArrayEquals(new byte[] {(byte) (-110), (byte)120, (byte)85, (byte)19, (byte)85, (byte)6, (byte) (-58), (byte) (-31)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(1, constantArray0.length);
      assertNotNull(string0);
      assertEquals("castore", string0);
      assertEquals(1, constantPool1.getLength());
      assertEquals(5, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-31), (-1423), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 21766. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("#Gi<q~Bh", (String) null, (String) null, true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)63;
      boolean boolean0 = false;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals(13, byteArray0.length);
      assertNotNull(string0);
      assertEquals("$N$3f$A$A$A$A$A$A$A$A$A$A$A", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)13, 296, false);
      assertFalse(string1.equals((Object)string0));
      assertEquals(13, byteArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      try { 
        Utility.methodSignatureArgumentTypes("3Nro(1:", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `1:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)54;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)57, (byte)83, (byte)54, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[3] = (byte)84;
      String string0 = "a?YR73IS@";
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a?YR73IS@");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)57;
      ConstantPool constantPool0 = null;
      int int0 = (-1478);
      String string1 = Utility.getSignature("a?YR73IS@");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("La?YR73IS@;", string1);
      
      boolean boolean3 = true;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)57, (byte)83, (byte)54, (byte)84, (byte) (-75), (byte)57}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)57, (byte)83, (byte)54, (byte)84, (byte) (-75), (byte)57}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(string2);
      assertEquals("dstore\t\t%83", string2);
      assertEquals(2, byteSequence0.getIndex());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)54, (-1280), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-105), (byte) (-36), (byte)63, (byte) (-79), (byte)60, (byte)97, (byte)95, (byte)58}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      short short0 = byteSequence0.readShort();
      assertArrayEquals(new byte[] {(byte) (-105), (byte) (-36), (byte)63, (byte) (-79), (byte)60, (byte)97, (byte)95, (byte)58}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals((short) (-26660), short0);
      assertEquals(2, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertArrayEquals(new byte[] {(byte) (-105), (byte) (-36), (byte)63, (byte) (-79), (byte)60, (byte)97, (byte)95, (byte)58}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertNotNull(string0);
      assertEquals("lstore_0", string0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "athrouw";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string1 = Utility.getSignature("athrouw");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Lathrouw;", string1);
      
      String string2 = Utility.compactClassName("Lathrouw;", "Lathrouw;", true);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "idiv");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean2 = false;
      boolean boolean3 = false;
      String string3 = Utility.accessToString((-3132), false);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("protected volatile transient native interface synthetic annotation enum module", string3);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte) (-121);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 10, (-1997));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = Utility.clearBit(187, 187);
      assertEquals(187, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte) (-71);
      byteArray0[7] = (byte) (-126);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      int int1 = 190;
      String string0 = "T(S20gBsPjU";
      String string1 = "jsr";
      try { 
        Utility.methodSignatureToString("T(S20gBsPjU", "jsr", "\tdefault = ", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `20gBsPjU'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = Utility.convertString(", ");
      assertNotNull(string0);
      assertEquals(", ", string0);
      
      int int0 = Utility.setBit((-3030), (-3030));
      assertEquals((-3030), int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte) (-128);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)87, (int) (byte) (-128));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)54;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)40, (byte)83, (byte)54, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[3] = (byte)84;
      String string0 = "a?YR73IS@";
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a?YR73IS@");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)40;
      ConstantPool constantPool0 = null;
      int int0 = (-1478);
      String string1 = Utility.getSignature("a?YR73IS@");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("La?YR73IS@;", string1);
      
      boolean boolean3 = true;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)40, (byte)83, (byte)54, (byte)84, (byte) (-75), (byte)40}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)40, (byte)83, (byte)54, (byte)84, (byte) (-75), (byte)40}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(string2);
      assertEquals("dload_2", string2);
      assertEquals(1, byteSequence0.getIndex());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)54, (-1280), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = Utility.compactClassName("px-7U_jdrqIM=@L9OR", false);
      assertNotNull(string0);
      assertEquals("px-7U_jdrqIM=@L9OR", string0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      try { 
        Utility.decode("/6d$5", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = Utility.compactClassName("", "boolean", false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-115), (byte) (-82), (byte)70, (byte) (-61), (byte)7, (byte)74}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-115), (byte) (-82), (byte)70, (byte) (-61), (byte)7, (byte)74}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(string1);
      assertEquals("f2d", string1);
      assertEquals(1, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = "Lif_icmplt;V";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string1 = Utility.getSignature("Lif_icmplt;V");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("LLif_icmplt;V;", string1);
      
      String string2 = Utility.signatureToString("Lif_icmplt;V", true);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(" extends if_icmplt implements void", string2);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " extends if_icmplt implements void");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      try { 
        Utility.typeOfSignature(" extends if_icmplt implements void");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  extends if_icmplt implements void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "`TcSt";
      stringArray0[1] = "`TcSt";
      stringArray0[2] = "`TcSt";
      stringArray0[3] = "`TcSt";
      stringArray0[4] = "`TcSt";
      stringArray0[5] = "`TcSt";
      stringArray0[6] = "`TcSt";
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      stringArray0[7] = "`TcSt";
      stringArray0[8] = "`TcSt";
      String string0 = Utility.methodTypeToSignature("`TcSt", stringArray0);
      assertEquals(9, stringArray0.length);
      assertNotNull(string0);
      assertEquals("(L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;)L`TcSt;", string0);
      
      String string1 = Utility.methodSignatureToString("(L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;)L`TcSt;", "`TcSt", "`TcSt");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("`TcSt `TcSt `TcSt(`TcSt arg1, `TcSt arg2, `TcSt arg3, `TcSt arg4, `TcSt arg5, `TcSt arg6, `TcSt arg7, `TcSt arg8, `TcSt arg9)", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte) (-22);
      byteArray0[6] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)119, (byte)9, (byte)101, (byte) (-22), (byte) (-22), (byte)0, (byte)10}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)119, (byte)9, (byte)101, (byte) (-22), (byte) (-22), (byte)0, (byte)10}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(string2);
      assertEquals("dneg", string2);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      
      String string3 = Utility.convertString("(");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("(", string3);
      
      String string4 = Utility.accessToString(233, false);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("public static synchronized volatile transient", string4);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = new String[1];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-58);
      byteArray0[7] = (byte) (-31);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)120, (byte)85, (byte)19, (byte) (-82), (byte)6, (byte) (-58), (byte) (-31)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[1];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)120, (byte)85, (byte)19, (byte) (-82), (byte)6, (byte) (-58), (byte) (-31)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean0);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)120, (byte)85, (byte)19, (byte) (-82), (byte)6, (byte) (-58), (byte) (-31)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(constantInvokeDynamic0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((-28040), constantInvokeDynamic0.getClassIndex());
      assertEquals(21779, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals((-28040), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantArray0.length);
      assertNotNull(constantPool1);
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertArrayEquals(new byte[] {(byte) (-110), (byte)120, (byte)85, (byte)19, (byte) (-82), (byte)6, (byte) (-58), (byte) (-31)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(1, constantArray0.length);
      assertNotNull(string0);
      assertEquals("freturn", string0);
      assertEquals(1, constantPool1.getLength());
      assertEquals(5, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-31), (-1423), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 44550. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-102);
      byteArray0[5] = (byte)42;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)31, (-3560));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-105), (byte) (-36), (byte)63, (byte) (-79), (byte)60, (byte)97, (byte)95, (byte)58}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertArrayEquals(new byte[] {(byte) (-105), (byte) (-36), (byte)63, (byte) (-79), (byte)60, (byte)97, (byte)95, (byte)58}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertNotNull(string0);
      assertEquals("dcmpl", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = Utility.accessToString((-153));
      assertNotNull(string0);
      assertEquals("public private protected synchronized volatile native interface abstract strictfp synthetic annotation enum module", string0);
      
      byte byte0 = Utility.typeOfSignature("SQ");
      assertEquals((byte)9, byte0);
      
      short short0 = Utility.searchOpcode("public private protected synchronized volatile native interface abstract strictfp synthetic annotation enum module");
      assertEquals((short) (-1), short0);
      
      int int0 = Utility.setBit(3434, (-153));
      assertEquals(3562, int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)9;
      String string1 = Utility.toHexString(byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)9, (byte)9, (byte)9, (byte)9}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(string1);
      assertEquals("09 09 09 09", string1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
      
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, objectArray0.length);
      assertNotNull(string1);
      
      String string2 = Utility.compactClassName("{\"java.lang.Object@2bb65938\", \"java.lang.Object@225733a3\"}", false);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Utility.printArray(objectArray0, false, false);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(2, objectArray0.length);
      assertNotNull(string3);
      
      String string4 = Utility.classOrInterface(3020);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("interface", string4);
      
      String string5 = Utility.compactClassName("java.lang.Object@2bb65938, java.lang.Object@225733a3");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-80), (byte)105}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 105
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte)14;
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)3, (byte)42, (byte) (-69), (byte)67, (byte) (-121), (byte)14}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(string0);
      assertEquals("$D$w$bbC$87$O", string0);
      
      String string1 = Utility.compactClassName("a.^!Lv}H\">Ai#]e)::<");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("a.^!Lv}H\">Ai#]e)::<", string1);
      
      String string2 = Utility.typeSignatureToString("C%l?)>LN^?", true);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("char", string2);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "a.^!Lv}H\">Ai#]e)::<";
      objectArray0[1] = (Object) "a.^!Lv}H\">Ai#]e)::<";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "char";
      objectArray0[4] = (Object) (byte)42;
      String string3 = Utility.printArray(objectArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(5, objectArray0.length);
      assertNotNull(string3);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "a.^!Lv}H\">Ai#]e)::<";
      String string4 = Utility.methodTypeToSignature("C%l?)>LN^?", stringArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals(1, stringArray0.length);
      assertNotNull(string4);
      assertEquals("(La/^!Lv}H\">Ai#]e)::<;)LC%l?)>LN^?;", string4);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(La/^!Lv}H\">Ai#]e)::<;)LC%l?)>LN^?;", "a.^!Lv}H\">Ai#]e)::<", "G6ES", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `;)LC%l?)>LN^?;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte) (-55);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)13, (-1570), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      short short0 = Utility.searchOpcode("2CZG`+I");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.accessToString((int) (short) (-1), true);
      assertNotNull(string0);
      assertEquals("public private protected static final volatile transient native abstract strictfp synthetic annotation enum module", string0);
      
      short short1 = Utility.searchOpcode("public private protected static final volatile transient native abstract strictfp synthetic annotation enum module");
      assertTrue(short1 == short0);
      assertEquals((short) (-1), short1);
      
      String string1 = Utility.accessToString((-3389));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("public private volatile transient interface synthetic annotation enum module", string1);
      
      try { 
        Utility.typeOfSignature(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)47;
      Constant[] constantArray0 = new Constant[3];
      ConstantDynamic constantDynamic0 = new ConstantDynamic((-2786), (-442));
      assertNotNull(constantDynamic0);
      assertEquals((-2786), constantDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((-2786), constantDynamic0.getClassIndex());
      assertEquals((-442), constantDynamic0.getNameAndTypeIndex());
      assertEquals((byte)17, constantDynamic0.getTag());
      
      constantArray0[0] = (Constant) constantDynamic0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("class");
      assertNotNull(constantUtf8_0);
      assertEquals("class", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-92));
      assertNotNull(constantMethodType0);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals((-92), constantMethodType0.getDescriptorIndex());
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertNotNull(constantMethodType1);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals((-92), constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals((-92), constantMethodType1.getDescriptorIndex());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotNull(javaClass0);
      assertTrue(javaClass0.isFinal());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isProtected());
      assertEquals(94, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals("java.lang.Integer", javaClass0.getClassName());
      assertEquals("java.lang.Integer", javaClass0.getFileName());
      assertFalse(javaClass0.isVolatile());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isInterface());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertEquals("java.lang.Number", javaClass0.getSuperclassName());
      
      JavaClass javaClass1 = javaClass0.getSuperClass();
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertFalse(javaClass1.equals((Object)javaClass0));
      assertNotNull(javaClass1);
      assertTrue(javaClass0.isFinal());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isProtected());
      assertEquals(94, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals("java.lang.Integer", javaClass0.getClassName());
      assertEquals("java.lang.Integer", javaClass0.getFileName());
      assertFalse(javaClass0.isVolatile());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isInterface());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertEquals("java.lang.Number", javaClass0.getSuperclassName());
      assertFalse(javaClass1.isStatic());
      assertFalse(javaClass1.isAnnotation());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertTrue(javaClass1.isPublic());
      assertFalse(javaClass1.isTransient());
      assertEquals("java.lang", javaClass1.getPackageName());
      assertFalse(javaClass1.isVolatile());
      assertEquals("java.lang.Number", javaClass1.getFileName());
      assertTrue(javaClass1.isAbstract());
      assertEquals((byte)2, javaClass1.getSource());
      assertEquals("java.lang.Number", javaClass1.getClassName());
      assertFalse(javaClass1.isSynthetic());
      assertFalse(javaClass1.isEnum());
      assertEquals(0, javaClass1.getMinor());
      assertEquals(1057, javaClass1.getAccessFlags());
      assertFalse(javaClass1.isPrivate());
      assertTrue(javaClass1.isClass());
      assertEquals("Number.java", javaClass1.getSourceFileName());
      assertFalse(javaClass1.isFinal());
      assertEquals(1057, javaClass1.getModifiers());
      assertFalse(javaClass1.isProtected());
      assertEquals(3, javaClass1.getClassNameIndex());
      assertFalse(javaClass1.isInterface());
      assertFalse(javaClass1.isNative());
      assertFalse(javaClass1.isVarArgs());
      assertTrue(javaClass1.isSynchronized());
      assertEquals(52, javaClass1.getMajor());
      assertEquals(4, javaClass1.getSuperclassNameIndex());
      assertTrue(javaClass1.isSuper());
      assertFalse(javaClass1.isStrictfp());
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass1, emptyVisitor0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertFalse(javaClass0.equals((Object)javaClass1));
      assertFalse(javaClass1.equals((Object)javaClass0));
      assertNotNull(descendingVisitor0);
      assertTrue(javaClass0.isFinal());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isProtected());
      assertEquals(94, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals("java.lang.Integer", javaClass0.getClassName());
      assertEquals("java.lang.Integer", javaClass0.getFileName());
      assertFalse(javaClass0.isVolatile());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isInterface());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertEquals("java.lang.Number", javaClass0.getSuperclassName());
      assertFalse(javaClass1.isStatic());
      assertFalse(javaClass1.isAnnotation());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertTrue(javaClass1.isPublic());
      assertFalse(javaClass1.isTransient());
      assertEquals("java.lang", javaClass1.getPackageName());
      assertFalse(javaClass1.isVolatile());
      assertEquals("java.lang.Number", javaClass1.getFileName());
      assertTrue(javaClass1.isAbstract());
      assertEquals((byte)2, javaClass1.getSource());
      assertEquals("java.lang.Number", javaClass1.getClassName());
      assertFalse(javaClass1.isSynthetic());
      assertFalse(javaClass1.isEnum());
      assertEquals(0, javaClass1.getMinor());
      assertEquals(1057, javaClass1.getAccessFlags());
      assertFalse(javaClass1.isPrivate());
      assertTrue(javaClass1.isClass());
      assertEquals("Number.java", javaClass1.getSourceFileName());
      assertFalse(javaClass1.isFinal());
      assertEquals(1057, javaClass1.getModifiers());
      assertFalse(javaClass1.isProtected());
      assertEquals(3, javaClass1.getClassNameIndex());
      assertFalse(javaClass1.isInterface());
      assertFalse(javaClass1.isNative());
      assertFalse(javaClass1.isVarArgs());
      assertTrue(javaClass1.isSynchronized());
      assertEquals(52, javaClass1.getMajor());
      assertEquals(4, javaClass1.getSuperclassNameIndex());
      assertTrue(javaClass1.isSuper());
      assertFalse(javaClass1.isStrictfp());
      
      constantMethodType1.accept(descendingVisitor0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertNotSame(constantMethodType0, constantMethodType1);
      assertNotSame(constantMethodType1, constantMethodType0);
      assertFalse(javaClass0.equals((Object)javaClass1));
      assertFalse(javaClass1.equals((Object)javaClass0));
      assertTrue(constantMethodType0.equals((Object)constantMethodType1));
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertTrue(javaClass0.isFinal());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isProtected());
      assertEquals(94, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals("java.lang.Integer", javaClass0.getClassName());
      assertEquals("java.lang.Integer", javaClass0.getFileName());
      assertFalse(javaClass0.isVolatile());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isInterface());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertEquals("java.lang.Number", javaClass0.getSuperclassName());
      assertFalse(javaClass1.isStatic());
      assertFalse(javaClass1.isAnnotation());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertTrue(javaClass1.isPublic());
      assertFalse(javaClass1.isTransient());
      assertEquals("java.lang", javaClass1.getPackageName());
      assertFalse(javaClass1.isVolatile());
      assertEquals("java.lang.Number", javaClass1.getFileName());
      assertTrue(javaClass1.isAbstract());
      assertEquals((byte)2, javaClass1.getSource());
      assertEquals("java.lang.Number", javaClass1.getClassName());
      assertFalse(javaClass1.isSynthetic());
      assertFalse(javaClass1.isEnum());
      assertEquals(0, javaClass1.getMinor());
      assertEquals(1057, javaClass1.getAccessFlags());
      assertFalse(javaClass1.isPrivate());
      assertTrue(javaClass1.isClass());
      assertEquals("Number.java", javaClass1.getSourceFileName());
      assertFalse(javaClass1.isFinal());
      assertEquals(1057, javaClass1.getModifiers());
      assertFalse(javaClass1.isProtected());
      assertEquals(3, javaClass1.getClassNameIndex());
      assertFalse(javaClass1.isInterface());
      assertFalse(javaClass1.isNative());
      assertFalse(javaClass1.isVarArgs());
      assertTrue(javaClass1.isSynchronized());
      assertEquals(52, javaClass1.getMajor());
      assertEquals(4, javaClass1.getSuperclassNameIndex());
      assertTrue(javaClass1.isSuper());
      assertFalse(javaClass1.isStrictfp());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals((-92), constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals((-92), constantMethodType1.getDescriptorIndex());
      
      constantArray0[2] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1043), (int) (byte) (-92), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lsub
         // 1:    lushr
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      short short0 = Utility.searchOpcode("F8NLot<k#6#kpxO5");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)112;
      byteArray0[3] = (byte)42;
      byteArray0[5] = (byte) (-86);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)118, (-2326), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Xp8!xQ9$`4lcxD%!Q");
      assertFalse(boolean0);
      
      String string0 = Utility.printArray(objectArray0, false, false);
      assertEquals(1, objectArray0.length);
      assertNotNull(string0);
      assertEquals("null", string0);
      
      boolean boolean1 = false;
      try { 
        Utility.typeOfSignature("Xp8!xQ9$`4lcxD%!Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Xp8!xQ9$`4lcxD%!Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "Bg5";
      String string1 = "eNfZ[!<$Tj@(";
      boolean boolean0 = true;
      try { 
        Utility.typeSignatureToString("L~lO:!kB[8Kuf", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L~lO:!kB[8Kuf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = (-153);
      String string0 = Utility.accessToString((-153));
      assertNotNull(string0);
      assertEquals("public private protected synchronized volatile native interface abstract strictfp synthetic annotation enum module", string0);
      
      try { 
        Utility.typeOfSignature("Em_Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Em_Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("T`i");
      assertEquals((byte)14, byte0);
      
      boolean boolean0 = false;
      String string0 = Utility.accessToString((int) (byte)14, false);
      assertNotNull(string0);
      assertEquals("private protected static", string0);
      
      try { 
        Utility.methodSignatureArgumentTypes("T`i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: T`i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = Utility.classOrInterface(176);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      String string1 = Utility.compactClassName("class", false);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("class", string1);
      
      boolean boolean0 = Utility.isSet((-20), (-20));
      assertTrue(boolean0);
      
      try { 
        Utility.typeSignatureToString("PT(0P&!\"q;YXq", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PT(0P&!\"q;YXq'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('K');
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      byte[] byteArray0 = new byte[26];
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-85);
      byteArray0[5] = (byte)61;
      byteArray0[7] = (byte) (-49);
      byteArray0[8] = (byte) (-49);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), (int) (byte) (-85), true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("void", stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      assertEquals("()V", string0);
      
      String string1 = Utility.signatureToString("()V");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("()void", string1);
      
      String string2 = " arg";
      String string3 = ">";
      boolean boolean1 = true;
      int int0 = 16;
      LocalVariable[] localVariableArray0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 199, 199);
      assertArrayEquals(new byte[] {(byte) (-78), (byte) (-78)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-197), byteArrayInputStream0.available());
      
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteArrayInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "06WZNCN$I73)fihA3)I";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "06WZNCN$I73)fihA3)I");
      assertFalse(boolean0);
      
      String string1 = Utility.methodTypeToSignature("06WZNCN$I73)fihA3)I", (String[]) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("()L06WZNCN$I73)fihA3)I;", string1);
      
      String[] stringArray0 = Utility.methodSignatureArgumentTypes("()L06WZNCN$I73)fihA3)I;");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      Object[] objectArray0 = new Object[0];
      String string2 = Utility.printArray(objectArray0, false, false);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, objectArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      
      short short0 = Utility.searchOpcode("06WZNCN$I73)fihA3)I");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)33;
      byte byte0 = (byte)59;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-70);
      String string3 = Utility.encode(byteArray0, true);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)33, (byte)59, (byte) (-70)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(string3);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string3);
      
      String string4 = Utility.accessToString((int) (byte) (-70));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("private static final synchronized transient native interface abstract strictfp synthetic annotation enum module", string4);
      
      boolean boolean1 = false;
      int int0 = (-866);
      int int1 = (-1951);
      LocalVariable[] localVariableArray0 = new LocalVariable[6];
      DataInput dataInput0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "int");
      assertFalse(boolean0);
      
      String string0 = Utility.methodTypeToSignature("*,hZDkQ*%Av", (String[]) null);
      assertNotNull(string0);
      assertEquals("()L*,hZDkQ*%Av;", string0);
      
      String string1 = Utility.methodTypeToSignature("int", (String[]) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("()I", string1);
      
      String string2 = Utility.methodSignatureReturnType("()I", false);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("int", string2);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-78);
      byteArray0[0] = (byte) (-78);
      String string3 = Utility.toHexString(byteArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-78)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(string3);
      assertEquals("b2", string3);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)49;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 79, 6286, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-104);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)69, (byte)0, (byte)0, (byte) (-104)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[5];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)0, (byte)69);
      assertNotNull(constantInterfaceMethodref0);
      assertEquals(0, constantInterfaceMethodref0.getClassIndex());
      assertEquals(69, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      assertTrue(constantInterfaceMethodref1.equals((Object)constantInterfaceMethodref0));
      assertNotNull(constantInterfaceMethodref1);
      assertEquals(0, constantInterfaceMethodref0.getClassIndex());
      assertEquals(69, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals((byte)11, constantInterfaceMethodref1.getTag());
      assertEquals(69, constantInterfaceMethodref1.getNameAndTypeIndex());
      assertEquals(0, constantInterfaceMethodref1.getClassIndex());
      
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)69, (byte)0, (byte)0, (byte) (-104)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(constantUtf8_0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("", constantUtf8_0.getBytes());
      
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(63, (-1486));
      assertNotNull(constantFieldref0);
      assertEquals((-1486), constantFieldref0.getNameAndTypeIndex());
      assertEquals(63, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      
      constantArray0[2] = (Constant) constantFieldref0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)0);
      assertNotNull(constantFloat0);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(0.0F, constantFloat0.getBytes(), 0.01F);
      
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertNotNull(constantFloat1);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(0.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat1.getTag());
      assertEquals(0.0F, constantFloat1.getBytes(), 0.01F);
      
      constantArray0[3] = (Constant) constantFloat1;
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      assertTrue(constantFieldref1.equals((Object)constantFieldref0));
      assertNotNull(constantFieldref1);
      assertEquals((-1486), constantFieldref1.getNameAndTypeIndex());
      assertEquals(63, constantFieldref1.getClassIndex());
      assertEquals((byte)9, constantFieldref1.getTag());
      assertEquals((-1486), constantFieldref0.getNameAndTypeIndex());
      assertEquals(63, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      
      constantArray0[4] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(5, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(5, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)69, (byte)0, (byte)0, (byte) (-104)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(5, constantArray0.length);
      assertNotNull(string0);
      assertEquals("fstore_2", string0);
      assertEquals(5, constantPool0.getLength());
      assertEquals(3, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-127), (byte)103}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[2];
      ConstantDynamic constantDynamic0 = new ConstantDynamic(677, (-1414));
      assertNotNull(constantDynamic0);
      assertEquals(677, constantDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(677, constantDynamic0.getClassIndex());
      assertEquals((byte)17, constantDynamic0.getTag());
      assertEquals((-1414), constantDynamic0.getNameAndTypeIndex());
      
      constantArray0[0] = (Constant) constantDynamic0;
      ConstantDynamic constantDynamic1 = new ConstantDynamic((-659), (byte)103);
      assertFalse(constantDynamic1.equals((Object)constantDynamic0));
      assertNotNull(constantDynamic1);
      assertEquals((-659), constantDynamic1.getBootstrapMethodAttrIndex());
      assertEquals((byte)17, constantDynamic1.getTag());
      assertEquals((-659), constantDynamic1.getClassIndex());
      assertEquals(103, constantDynamic1.getNameAndTypeIndex());
      
      ConstantDynamic constantDynamic2 = new ConstantDynamic(677, (-1414));
      assertFalse(constantDynamic2.equals((Object)constantDynamic1));
      assertTrue(constantDynamic2.equals((Object)constantDynamic0));
      assertNotNull(constantDynamic2);
      assertEquals(677, constantDynamic2.getBootstrapMethodAttrIndex());
      assertEquals((byte)17, constantDynamic2.getTag());
      assertEquals(677, constantDynamic2.getClassIndex());
      assertEquals((-1414), constantDynamic2.getNameAndTypeIndex());
      
      constantArray0[1] = (Constant) constantDynamic0;
      String string0 = constantDynamic0.toString();
      assertNotSame(constantDynamic0, constantDynamic1);
      assertNotSame(constantDynamic0, constantDynamic2);
      assertTrue(constantDynamic0.equals((Object)constantDynamic2));
      assertFalse(constantDynamic0.equals((Object)constantDynamic1));
      assertNotNull(string0);
      assertEquals("CONSTANT_Dynamic[17](bootstrap_method_attr_index = 677, name_and_type_index = -1414)", string0);
      assertEquals(677, constantDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(677, constantDynamic0.getClassIndex());
      assertEquals((byte)17, constantDynamic0.getTag());
      assertEquals((-1414), constantDynamic0.getNameAndTypeIndex());
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      boolean boolean0 = byteSequence0.readBoolean();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-127), (byte)103}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean0);
      assertEquals(1, byteSequence0.getIndex());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(2, constantArray0.length);
      assertNotNull(constantPool1);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertNotSame(constantPool0, constantPool1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-127), (byte)103}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(2, constantArray0.length);
      assertNotNull(string1);
      assertEquals("lor", string1);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(2, constantPool0.getLength());
      
      String string2 = null;
      String string3 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-127), 248);
      assertNotSame(constantPool0, constantPool1);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-127), (byte)103}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(2, constantArray0.length);
      assertNotNull(string3);
      assertEquals("0:    nop\n1:    lor\n2:    dsub\n", string3);
      assertEquals(2, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Only element values of type array can be built with this ctor - type specified: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Only element values of type array can be built with this ctor - type specified: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = Utility.setBit(170, 0);
      assertEquals(171, int0);
      
      String string0 = Utility.compactClassName("if_icmpge");
      assertNotNull(string0);
      assertEquals("if_icmpge", string0);
      
      try { 
        Utility.typeOfSignature("O\"!89!tswG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O\"!89!tswG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "char");
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = false;
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string0 = Utility.format(9, 9, false, ';');
      assertNotNull(string0);
      assertEquals(";;;;;;;;9", string0);
      
      try { 
        Utility.typeOfSignature(";;;;;;;;9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;;;;;;;;9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = false;
      try { 
        Utility.typeOfSignature(";F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9[hO~Jn-v@#i");
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName("9[hO~Jn-v@#i", ":w zA/Z6'Iz%1,ARu", false);
      assertNotNull(string0);
      assertEquals("9[hO~Jn-v@#i", string0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("/(\"", "checkcast", "astore_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Utility.format(243, 213, true, '-');
      assertNotNull(string0);
      assertEquals("243------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------", string0);
      
      boolean boolean2 = false;
      String string1 = Utility.format(213, 155, false, '-');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("--------------------------------------------------------------------------------------------------------------------------------------------------------213", string1);
      
      try { 
        Utility.typeOfSignature("'l(vHHXUHj=ef]V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'l(vHHXUHj=ef]V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = Utility.setBit(170, 0);
      assertEquals(171, int0);
      
      String string0 = "V(<O/rqw0OZSia0df";
      String string1 = Utility.compactClassName("if_icmpge");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("if_icmpge", string1);
      
      try { 
        Utility.typeOfSignature("'*$!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '*$!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      short short0 = Utility.searchOpcode("F8NLot<k#6#kpxO5");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)42;
      byteArray0[5] = (byte)118;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)118, (-2326), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "dmul");
      assertFalse(boolean0);
      
      String string0 = "<";
      EvoSuiteFile evoSuiteFile0 = null;
      try { 
        Utility.typeOfSignature(":c/t/,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :c/t/,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      try { 
        Utility.typeOfSignature(":H*Rnlv}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :H*Rnlv}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[1];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-58);
      byteArray0[7] = (byte) (-31);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)0, (byte)85, (byte)19, (byte) (-97), (byte)6, (byte) (-58), (byte) (-31)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[1];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)0, (byte)85, (byte)19, (byte) (-97), (byte)6, (byte) (-58), (byte) (-31)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean0);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)0, (byte)85, (byte)19, (byte) (-97), (byte)6, (byte) (-58), (byte) (-31)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(constantInvokeDynamic0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals((-28160), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(21779, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((-28160), constantInvokeDynamic0.getClassIndex());
      
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantArray0.length);
      assertNotNull(constantPool1);
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertArrayEquals(new byte[] {(byte) (-110), (byte)0, (byte)85, (byte)19, (byte) (-97), (byte)6, (byte) (-58), (byte) (-31)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(1, constantArray0.length);
      assertNotNull(string0);
      assertEquals("if_icmpeq\t\t#1738", string0);
      assertEquals(1, constantPool1.getLength());
      assertEquals(7, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-31), (-1423), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 40710. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.format(9, 9, false, ';');
      assertNotNull(string0);
      assertEquals(";;;;;;;;9", string0);
      
      try { 
        Utility.typeSignatureToString("Lv-O@M(<E\"32k", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lv-O@M(<E\"32k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      try { 
        Utility.typeOfSignature("P LJd0XT9vsP`.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P LJd0XT9vsP`.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("void", stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      assertEquals("()V", string0);
      
      String string1 = Utility.methodSignatureToString("()V", "void", "()V", false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("()V void void()", string1);
      
      String string2 = " arg";
      String string3 = ">";
      boolean boolean1 = true;
      int int0 = 16;
      LocalVariable[] localVariableArray0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 199, 199);
      assertArrayEquals(new byte[] {(byte) (-78), (byte) (-78)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-197), byteArrayInputStream0.available());
      
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteArrayInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "5WYpI3'";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string1 = Utility.getSignature("5WYpI3'");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("L5WYpI3';", string1);
      
      String string2 = Utility.signatureToString("L5WYpI3';");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("5WYpI3'", string2);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5WYpI3'");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      try { 
        Utility.typeOfSignature("5WYpI3'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5WYpI3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte)61;
      byte byte0 = (byte)21;
      byteArray0[5] = (byte)21;
      ConstantPool constantPool0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-60), (-3560));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fload_0
         // 1:    wide\t(wide)
         // 2:    fload_0
         // 3:    f2i
         // 4:    istore_2
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = Utility.setBit(2978, 55);
      assertEquals(8391586, int0);
      
      byte[] byteArray0 = new byte[15];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-24);
      Constant[] constantArray0 = new Constant[2];
      ConstantPackage constantPackage0 = new ConstantPackage((byte)52);
      assertNotNull(constantPackage0);
      assertEquals(52, constantPackage0.getNameIndex());
      assertEquals((byte)20, constantPackage0.getTag());
      
      ConstantPackage constantPackage1 = new ConstantPackage(constantPackage0);
      assertTrue(constantPackage1.equals((Object)constantPackage0));
      assertNotNull(constantPackage1);
      assertEquals(52, constantPackage0.getNameIndex());
      assertEquals((byte)20, constantPackage0.getTag());
      assertEquals(52, constantPackage1.getNameIndex());
      assertEquals((byte)20, constantPackage1.getTag());
      
      constantArray0[0] = (Constant) constantPackage1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(429, 4711);
      assertNotNull(constantInterfaceMethodref0);
      assertEquals(4711, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(429, constantInterfaceMethodref0.getClassIndex());
      
      constantInterfaceMethodref0.setClassIndex(1228);
      assertEquals(1228, constantInterfaceMethodref0.getClassIndex());
      assertEquals(4711, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      assertTrue(constantInterfaceMethodref1.equals((Object)constantInterfaceMethodref0));
      assertNotNull(constantInterfaceMethodref1);
      assertEquals(1228, constantInterfaceMethodref0.getClassIndex());
      assertEquals(4711, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals((byte)11, constantInterfaceMethodref1.getTag());
      assertEquals(1228, constantInterfaceMethodref1.getClassIndex());
      assertEquals(4711, constantInterfaceMethodref1.getNameAndTypeIndex());
      
      String string0 = constantInterfaceMethodref0.toString();
      assertNotSame(constantInterfaceMethodref0, constantInterfaceMethodref1);
      assertTrue(constantInterfaceMethodref0.equals((Object)constantInterfaceMethodref1));
      assertNotNull(string0);
      assertEquals("CONSTANT_InterfaceMethodref[11](class_index = 1228, name_and_type_index = 4711)", string0);
      assertEquals(1228, constantInterfaceMethodref0.getClassIndex());
      assertEquals(4711, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      
      constantInterfaceMethodref0.setClassIndex((byte)67);
      assertNotSame(constantInterfaceMethodref0, constantInterfaceMethodref1);
      assertFalse(constantInterfaceMethodref0.equals((Object)constantInterfaceMethodref1));
      assertEquals(4711, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(67, constantInterfaceMethodref0.getClassIndex());
      
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-24), (int) (byte)67);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 59392. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("if_icmpge", false);
      assertArrayEquals(new byte[] {(byte)105, (byte)102, (byte)95, (byte)105, (byte)99, (byte)109, (byte)112, (byte)103, (byte)101}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArray0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "o|tBo$$i%[`Sj\"EBg");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = Utility.setBit(170, 18);
      assertEquals(262314, int0);
      
      boolean boolean2 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte)105, (byte)102, (byte)95, (byte)105, (byte)99, (byte)109, (byte)112, (byte)103, (byte)101}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean2);
      
      String string0 = Utility.convertString("V(<O/rqw0OZSia0df");
      assertNotNull(string0);
      assertEquals("V(<O/rqw0OZSia0df", string0);
      
      try { 
        Utility.typeOfSignature("@#Z-H^/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @#Z-H^/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = Utility.convertString("V(<O/rqw0OZSia0df");
      assertNotNull(string0);
      assertEquals("V(<O/rqw0OZSia0df", string0);
      
      try { 
        Utility.typeOfSignature("@#Z-H^/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @#Z-H^/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "java.lang.$:4g";
      short short0 = Utility.searchOpcode("java.lang.$:4g");
      assertEquals((short) (-1), short0);
      
      int int0 = Utility.setBit((short) (-1), (short) (-1));
      assertEquals((-1), int0);
      
      try { 
        Utility.typeOfSignature("!6O14@'rb~}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6O14@'rb~}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = Utility.setBit(2978, 55);
      assertEquals(8391586, int0);
      
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte) (-65);
      byteArray0[3] = (byte) (-59);
      byteArray0[5] = (byte) (-24);
      Constant[] constantArray0 = new Constant[2];
      ConstantPackage constantPackage0 = new ConstantPackage((byte)52);
      assertNotNull(constantPackage0);
      assertEquals(52, constantPackage0.getNameIndex());
      assertEquals((byte)20, constantPackage0.getTag());
      
      ConstantPackage constantPackage1 = new ConstantPackage(constantPackage0);
      assertTrue(constantPackage1.equals((Object)constantPackage0));
      assertNotNull(constantPackage1);
      assertEquals(52, constantPackage0.getNameIndex());
      assertEquals((byte)20, constantPackage0.getTag());
      assertEquals(52, constantPackage1.getNameIndex());
      assertEquals((byte)20, constantPackage1.getTag());
      
      constantArray0[0] = (Constant) constantPackage1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(429, 4711);
      assertNotNull(constantInterfaceMethodref0);
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(4711, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals(429, constantInterfaceMethodref0.getClassIndex());
      
      constantInterfaceMethodref0.setClassIndex(1228);
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(4711, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals(1228, constantInterfaceMethodref0.getClassIndex());
      
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      assertTrue(constantInterfaceMethodref1.equals((Object)constantInterfaceMethodref0));
      assertNotNull(constantInterfaceMethodref1);
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(4711, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals(1228, constantInterfaceMethodref0.getClassIndex());
      assertEquals(1228, constantInterfaceMethodref1.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref1.getTag());
      assertEquals(4711, constantInterfaceMethodref1.getNameAndTypeIndex());
      
      String string0 = constantInterfaceMethodref0.toString();
      assertNotSame(constantInterfaceMethodref0, constantInterfaceMethodref1);
      assertTrue(constantInterfaceMethodref0.equals((Object)constantInterfaceMethodref1));
      assertNotNull(string0);
      assertEquals("CONSTANT_InterfaceMethodref[11](class_index = 1228, name_and_type_index = 4711)", string0);
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(4711, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals(1228, constantInterfaceMethodref0.getClassIndex());
      
      constantInterfaceMethodref0.setClassIndex((byte)63);
      assertNotSame(constantInterfaceMethodref0, constantInterfaceMethodref1);
      assertFalse(constantInterfaceMethodref0.equals((Object)constantInterfaceMethodref1));
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(4711, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals(63, constantInterfaceMethodref0.getClassIndex());
      
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-24), (int) (byte)63);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    caload
         // 1:    lstore_0
         // 2:    lload_0
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = new String[1];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-58);
      byte byte0 = (byte) (-31);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)0, (byte)85, (byte)19, (byte) (-85), (byte)6, (byte) (-58), (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[1];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)0, (byte)85, (byte)19, (byte) (-85), (byte)6, (byte) (-58), (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean0);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)0, (byte)85, (byte)19, (byte) (-85), (byte)6, (byte) (-58), (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(constantInvokeDynamic0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals((-28160), constantInvokeDynamic0.getClassIndex());
      assertEquals((-28160), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(21779, constantInvokeDynamic0.getNameAndTypeIndex());
      
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantArray0.length);
      assertNotNull(constantPool1);
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantPool0.getLength());
      
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = Utility.clearBit(187, 187);
      assertEquals(187, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-122);
      byteArray0[2] = (byte) (-2);
      byteArray0[5] = (byte)87;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte) (-81);
      byteArray0[7] = (byte) (-126);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 190, (int) (byte)0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "Q%gW_8JLvlReq\\c";
      boolean boolean0 = false;
      try { 
        Utility.typeSignatureToString("Q%gW_8JLvlReqc", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q%gW_8JLvlReqc'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "`TcSt";
      stringArray0[1] = "`TcSt";
      stringArray0[2] = "`TcSt";
      stringArray0[3] = "`TcSt";
      stringArray0[4] = "`TcSt";
      stringArray0[5] = "`TcSt";
      stringArray0[6] = "`TcSt";
      stringArray0[7] = "`TcSt";
      stringArray0[8] = "`TcSt";
      String string0 = Utility.methodTypeToSignature("`TcSt", stringArray0);
      assertEquals(9, stringArray0.length);
      assertNotNull(string0);
      assertEquals("(L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;)L`TcSt;", string0);
      
      String string1 = Utility.methodSignatureToString("(L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;)L`TcSt;", "`TcSt", "`TcSt");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("`TcSt `TcSt `TcSt(`TcSt arg1, `TcSt arg2, `TcSt arg3, `TcSt arg4, `TcSt arg5, `TcSt arg6, `TcSt arg7, `TcSt arg8, `TcSt arg9)", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)103, (byte)9, (byte)101, (byte) (-22), (byte) (-22), (byte)40, (byte)10}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)103, (byte)9, (byte)101, (byte) (-22), (byte) (-22), (byte)40, (byte)10}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(string2);
      assertEquals("dsub", string2);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      
      String string3 = Utility.convertString("(");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("(", string3);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9).IBlCC~");
      assertFalse(boolean0);
      
      boolean boolean1 = false;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertEquals(1, objectArray0.length);
      assertNotNull(string0);
      assertEquals("null", string0);
      
      boolean boolean2 = false;
      boolean boolean3 = true;
      try { 
        Utility.typeOfSignature("9).IBlCC~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9).IBlCC~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9).IBlCC~");
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("9).IBlCC~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9).IBlCC~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      try { 
        Utility.typeOfSignature("1[lD??!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1[lD??!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = (-153);
      String string0 = Utility.accessToString((-153));
      assertNotNull(string0);
      assertEquals("public private protected synchronized volatile native interface abstract strictfp synthetic annotation enum module", string0);
      
      try { 
        Utility.typeOfSignature("1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = "DgxyhS<P$@zji|h";
      String string1 = Utility.typeSignatureToString("DgxyhS<P$@zji|h", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("double", string1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      try { 
        Utility.methodSignatureArgumentTypes("C!)Mq.HSs1'", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: C!)Mq.HSs1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)84;
      String string0 = "a?YR73IS@";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a?YR73IS@");
      assertFalse(boolean0);
      
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)28;
      ConstantPool constantPool0 = null;
      int int0 = (-1478);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1478), (int) (byte) (-75), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iload_2
         // 1:    bastore
         // 2:    istore\t\t%84
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)49, (byte)90, (byte) (-126), (byte)80, (byte) (-89), (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertArrayEquals(new byte[] {(byte)49, (byte)90, (byte) (-126), (byte)80, (byte) (-89), (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(string0);
      assertEquals("daload", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)5;
      String string0 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-7), (byte) (-95), (byte) (-99), (byte)36, (byte)79, (byte)5}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(string0);
      assertEquals("f9 a1 9d 24 4f 05", string0);
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2048, (int) (byte)79, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = "Lif_icmplt;V";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string1 = Utility.signatureToString("Lif_icmplt;V");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" extends if_icmplt implements void", string1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString(" extends if_icmplt implements void");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` extends if_icmplt implements void'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.EnumElementValue";
      byte[] byteArray0 = null;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      short short0 = Utility.searchOpcode("org.apache.bcel.classfile.EnumElementValue");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.convertString("org.apache.bcel.classfile.EnumElementValue");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.apache.bcel.classfile.EnumElementValue", string1);
      
      String string2 = "Mrn3|Md#{.lAdX-\" ^";
      try { 
        Utility.typeSignatureToString("Mrn3|Md#{.lAdX-\" ^", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Mrn3|Md#{.lAdX-\" ^'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = "[]";
      byte byte0 = Utility.typeOfSignature("[]");
      assertEquals((byte)13, byte0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("<", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type parameter signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)0;
      String string0 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte)49, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(string0);
      assertEquals("31 00 00", string0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)49, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-44);
      byteArray1[1] = (byte) (-44);
      byteArray1[2] = (byte)49;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[6] = (byte)49;
      byteArray1[7] = (byte)49;
      String string1 = Utility.encode(byteArray1, true);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-44), (byte) (-44), (byte)49, (byte)0, (byte)0, (byte)0, (byte)49, (byte)49}, byteArray1);
      assertEquals(8, byteArray1.length);
      assertNotNull(string1);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      Constant[] constantArray0 = new Constant[0];
      int int0 = Utility.setBit(0, (-989));
      assertEquals(8, int0);
      
      String string2 = Utility.convertString("int");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("int", string2);
      
      String string3 = Utility.classOrInterface((byte)0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("class", string3);
      
      String string4 = "[qiY";
      // Undeclared exception!
      try { 
        Utility.getSignature("[qiY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal type: [qiY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "`TcSt";
      stringArray0[1] = "`TcSt";
      stringArray0[2] = "`TcSt";
      stringArray0[3] = "`TcSt";
      stringArray0[4] = "`TcSt";
      stringArray0[5] = "`TcSt";
      stringArray0[6] = "`TcSt";
      stringArray0[7] = "`TcSt";
      stringArray0[8] = "`TcSt";
      String string0 = Utility.methodTypeToSignature("`TcSt", stringArray0);
      assertEquals(9, stringArray0.length);
      assertNotNull(string0);
      assertEquals("(L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;)L`TcSt;", string0);
      
      String string1 = Utility.methodSignatureToString("(L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;)L`TcSt;", "`TcSt", "`TcSt");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("`TcSt `TcSt `TcSt(`TcSt arg1, `TcSt arg2, `TcSt arg3, `TcSt arg4, `TcSt arg5, `TcSt arg6, `TcSt arg7, `TcSt arg8, `TcSt arg9)", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)81, (byte)9, (byte)101, (byte) (-22), (byte) (-22), (byte)40, (byte)10}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)81, (byte)9, (byte)101, (byte) (-22), (byte) (-22), (byte)40, (byte)10}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(string2);
      assertEquals("fastore", string2);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      
      String string3 = Utility.convertString("(");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("(", string3);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = "<";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      try { 
        Utility.typeOfSignature("#}b0+N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #}b0+N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      try { 
        Utility.typeOfSignature("#}b0+N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #}b0+N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)114;
      byteArray1[1] = (byte)59;
      boolean boolean1 = Utility.equals(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)114, (byte)59}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(boolean1);
      
      String string0 = Utility.replace("\t\t#", "\t\t#", "iushr");
      assertNotNull(string0);
      assertEquals("iushr", string0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("I~_H(JJOv^.2K!gj[I2", "iushr", "iushr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ov^.2K!gj[I2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)20;
      byte byte0 = (byte) (-90);
      byteArray0[3] = (byte) (-90);
      byteArray0[5] = (byte)42;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)20, (-3560));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      short short0 = Utility.searchOpcode("new");
      assertEquals((short)187, short0);
      
      String string0 = Utility.accessToString((int) (short)187);
      assertNotNull(string0);
      assertEquals("public private static final synchronized transient", string0);
      
      String string1 = "%DJhg";
      short short1 = Utility.searchOpcode("%DJhg");
      assertFalse(short1 == short0);
      assertEquals((short) (-1), short1);
      
      try { 
        Utility.typeOfSignature("%DJhg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %DJhg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-97);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 20, (int) (byte)108, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = false;
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "multianewarray");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Utility.typeSignatureToString("B}3&2TzIANt3Cm", false);
      assertNotNull(string0);
      assertEquals("byte", string0);
      
      boolean boolean2 = true;
      String string1 = Utility.typeSignatureToString("SJZ,zo4yP[L<>HOTc", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("short", string1);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("short", "short", "boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: short
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "jsr_w";
      String string1 = Utility.getSignature("\tdefault = ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Ldefault;", string1);
      
      try { 
        Utility.methodSignatureReturnType("jsr_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: jsr_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = Utility.getSignature("class");
      assertNotNull(string0);
      assertEquals("Lclass;", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)91;
      byte byte0 = (byte)9;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte) (-125);
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte) (-70);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-58), (byte)91, (byte)9, (byte)90, (byte) (-4), (byte) (-125), (byte) (-67), (byte) (-70)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean0);
      
      String string1 = Utility.accessToString((int) (byte)9, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("public static", string1);
      
      String string2 = Utility.encode(byteArray0, true);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-58), (byte)91, (byte)9, (byte)90, (byte) (-4), (byte) (-125), (byte) (-67), (byte) (-70)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(string2);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
      
      byte[] byteArray1 = Utility.decode("Lclass;", false);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)76, (byte)99, (byte)108, (byte)97, (byte)115, (byte)115, (byte)59}, byteArray1);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      
      try { 
        Utility.typeSignatureToString("Y3w 'xq|UB<", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y3w 'xq|UB<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "`TcSt";
      stringArray0[1] = "`TcSt";
      stringArray0[2] = "`TcSt";
      stringArray0[3] = "`TcSt";
      stringArray0[4] = "`TcSt";
      stringArray0[5] = "`TcSt";
      stringArray0[6] = "`TcSt";
      stringArray0[7] = "`TcSt";
      stringArray0[8] = "`TcSt";
      String string0 = Utility.methodTypeToSignature("`TcSt", stringArray0);
      assertEquals(9, stringArray0.length);
      assertNotNull(string0);
      assertEquals("(L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;)L`TcSt;", string0);
      
      String string1 = Utility.methodSignatureToString("(L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;)L`TcSt;", "`TcSt", "`TcSt");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("`TcSt `TcSt `TcSt(`TcSt arg1, `TcSt arg2, `TcSt arg3, `TcSt arg4, `TcSt arg5, `TcSt arg6, `TcSt arg7, `TcSt arg8, `TcSt arg9)", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-7), (byte)9, (byte)101, (byte) (-22), (byte) (-22), (byte)40, (byte)10}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-7), (byte)9, (byte)101, (byte) (-22), (byte) (-22), (byte)40, (byte)10}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(string2);
      assertEquals("<illegal opcode>", string2);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      
      String string3 = Utility.convertString("(");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("(", string3);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("if_icmpge", stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      assertEquals("()Lif_icmpge;", string0);
      
      int int0 = 16384;
      boolean boolean0 = true;
      char char0 = '{';
      // Undeclared exception!
      Utility.format(16384, 16384, true, '{');
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String[] stringArray0 = new String[1];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-58);
      byteArray0[7] = (byte) (-31);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)25, (byte)85, (byte)15, (byte) (-103), (byte)6, (byte) (-58), (byte) (-31)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantArray0.length);
      assertNotNull(constantPool1);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertArrayEquals(new byte[] {(byte) (-110), (byte)25, (byte)85, (byte)15, (byte) (-103), (byte)6, (byte) (-58), (byte) (-31)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(1, constantArray0.length);
      assertNotNull(string0);
      assertEquals("i2c", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('K');
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-85);
      byteArray0[5] = (byte)61;
      byteArray0[7] = (byte) (-49);
      byteArray0[8] = (byte)38;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), (int) (byte) (-85), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    dload\t\t%171
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "freturn");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";B.8}L^g%~bJ");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string0 = ".";
      try { 
        Utility.typeOfSignature(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".*LH~ *1");
      assertFalse(boolean0);
      
      String string0 = Utility.printArray(objectArray0, false, false);
      assertEquals(1, objectArray0.length);
      assertNotNull(string0);
      assertEquals("null", string0);
      
      boolean boolean1 = false;
      try { 
        Utility.typeOfSignature(".*LH~ *1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .*LH~ *1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)49;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 79, 97, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)114;
      byteArray1[1] = (byte)59;
      boolean boolean1 = Utility.equals(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)114, (byte)59}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(boolean1);
      
      String string0 = Utility.replace("\t\t#", "\t\t#", "iushr");
      assertNotNull(string0);
      assertEquals("iushr", string0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Vv*vDr$IOK?(Xk:==N", "iushr", "\t\t#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Xk:==N'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "mc5";
      stringArray0[1] = "$:4g SHO1$r!VNm{J~";
      stringArray0[2] = "$:4g SHO1$r!VNm{J~";
      String string0 = Utility.methodTypeToSignature("$:4g SHO1$r!VNm{J~", stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string0);
      assertEquals("(Lmc5;L$:4g;L$:4g;)L$:4g;", string0);
      
      String string1 = Utility.classOrInterface(2837);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("interface", string1);
      
      boolean boolean0 = true;
      String string2 = Utility.compactClassName("$:4g SHO1$r!VNm{J~", "$:4g SHO1$r!VNm{J~", true);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = Utility.printArray((Object[]) stringArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(3, stringArray0.length);
      assertNotNull(string3);
      assertEquals("{mc5, $:4g SHO1$r!VNm{J~, $:4g SHO1$r!VNm{J~}", string3);
      
      int int0 = Utility.setBit(332, 65);
      assertEquals(334, int0);
      
      String string4 = Utility.compactClassName("{mc5, $:4g SHO1$r!VNm{J~, $:4g SHO1$r!VNm{J~}", "", false);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("{mc5, $:4g SHO1$r!VNm{J~, $:4g SHO1$r!VNm{J~}", string4);
      
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("(Lmc5;L$:4g;L$:4g;)L$:4g;", true);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      try { 
        Utility.methodSignatureArgumentTypes("mc5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: mc5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('K');
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)74;
      byteArray0[5] = (byte)61;
      byteArray0[8] = (byte)38;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)74, (int) (byte)74, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\tdefault = ";
      stringArray0[1] = "\tdefault = ";
      stringArray0[2] = "\tdefault = ";
      String string0 = Utility.methodTypeToSignature("\tdefault = ", stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string0);
      assertEquals("(Ldefault;Ldefault;Ldefault;)Ldefault;", string0);
      
      String string1 = Utility.signatureToString("(Ldefault;Ldefault;Ldefault;)Ldefault;", false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("(default, default, default)default", string1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)76;
      byteArray0[2] = (byte) (-25);
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte)67;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)67, (-1866));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-3);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-103), (byte)16, (byte) (-106), (byte)20, (byte) (-3)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertArrayEquals(new byte[] {(byte) (-103), (byte)16, (byte) (-106), (byte)20, (byte) (-3)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(string0);
      assertEquals("ifeq\t\t#4246", string0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      try { 
        Utility.typeOfSignature("6K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = "6";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      try { 
        Utility.typeOfSignature("6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\tdefault = ";
      stringArray0[1] = "\tdefault = ";
      stringArray0[2] = "\tdefault = ";
      String string0 = Utility.methodTypeToSignature("\tdefault = ", stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string0);
      assertEquals("(Ldefault;Ldefault;Ldefault;)Ldefault;", string0);
      
      String string1 = Utility.methodSignatureReturnType("(Ldefault;Ldefault;Ldefault;)Ldefault;");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("default", string1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = new Integer(5425);
      assertEquals(5425, int0);
      
      int int1 = Utility.setBit(144, 5425);
      assertFalse(int1 == int0);
      assertEquals(131216, int1);
      
      String string0 = Utility.getSignature("fload_1");
      assertNotNull(string0);
      assertEquals("Lfload_1;", string0);
      
      byte[] byteArray0 = new byte[8];
      String string1 = Utility.compactClassName("oG{-", false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("oG{-", string1);
      
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte) (-16);
      byteArray0[7] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)66, (byte)82, (byte)5, (byte)6, (byte) (-125), (byte)106, (byte) (-16), (byte)93}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)66, (byte)82, (byte)5, (byte)6, (byte) (-125), (byte)106, (byte) (-16), (byte)93}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertNotNull(string2);
      assertEquals("lstore_3", string2);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Z CAq.XDF#($Fm,");
      assertEquals((byte)4, byte0);
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)49;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 79, 92, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)114;
      byteArray1[1] = (byte)114;
      boolean boolean0 = Utility.equals(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)114, (byte)114}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)114, (byte)114}, byteArray1);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)114, (byte)114}, byteArray1);
      assertEquals(2, byteArray1.length);
      assertNotNull(string0);
      assertEquals("frem", string0);
      assertEquals(1, byteSequence0.getIndex());
      
      String string1 = Utility.getSignature("frem");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Lfrem;", string1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = Utility.replace("Dont call getValueChar() on a non CHAR ElementValue", ">\t", ">\t");
      assertNotNull(string0);
      assertEquals("Dont call getValueChar() on a non CHAR ElementValue", string0);
      
      String string1 = Utility.compactClassName("Tj!:V*::v");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Tj!:V*::v", string1);
      
      String string2 = Utility.replace("Tj!:V*::v", "Dont call getValueChar() on a non CHAR ElementValue", "Tj!:V*::v");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Tj!:V*::v", string2);
      
      String string3 = Utility.accessToString(45, false);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("public protected static synchronized", string3);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte) (-39);
      byteArray0[8] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-30), (int) (byte) (-74));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\t(wide)");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = "3b@P";
      byte[] byteArray0 = Utility.decode("3b@P", false);
      assertArrayEquals(new byte[] {(byte)51, (byte)98, (byte)64, (byte)80}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string1 = Utility.getSignature("3b@P");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("L3b@P;", string1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string2 = Utility.getSignature("_V[2CqNZKU9+|jo]");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("[L_V;", string2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "[L_V;";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("3b@P", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal type: [L_V;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-94);
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)123;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-94), (byte) (-17), (byte) (-69), (byte) (-85), (byte) (-63), (byte)123}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean1);
      
      String string0 = Utility.typeSignatureToString("[Ja`&5wVuXw}ULb", false);
      assertNotNull(string0);
      assertEquals("long[]", string0);
      
      byte[] byteArray1 = Utility.decode("0^kHHq~Cu`Y;hZ", false);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(14, byteArray1.length);
      assertNotNull(byteArray1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(14, byteArray1.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      short short0 = Utility.searchOpcode("org.apache.bcel.classfile.StackMap");
      assertEquals((short) (-1), short0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "long[]";
      stringArray0[1] = "byte";
      stringArray0[2] = "[Ja`&5wVuXw}ULb";
      stringArray0[3] = "0^kHHq~Cu`Y;hZ";
      stringArray0[4] = "byte";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("byte", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal type: [Ja`&5wVuXw}ULb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.format((-1859), (-1859), false, '~');
      assertNotNull(string0);
      assertEquals("-1859", string0);
      
      try { 
        Utility.typeOfSignature("-1859");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -1859
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-f;7JO;D$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -f;7JO;D$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("DAj{&]*9hnt!sUc");
      assertEquals((byte)7, byte0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("<", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type parameter signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = ".debug";
      String string1 = Utility.replace(".debug", ".debug", ".debug");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(".debug", string1);
      
      int int0 = 80;
      String string2 = Utility.accessToString(80);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("final volatile", string2);
      
      String string3 = Utility.classOrInterface(80);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("class", string3);
      
      char char0 = '_';
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) ".debug";
      objectArray0[2] = (Object) ".debug";
      objectArray0[3] = (Object) "final volatile";
      short short0 = Utility.searchOpcode("final volatile");
      assertEquals((short) (-1), short0);
      
      try { 
        Utility.decode(".debug", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 72, 3719);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)37;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte) (-74);
      ConstantPool constantPool0 = null;
      int int0 = (-1478);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)52, (-1280), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte) (-66);
      byte byte0 = (byte)42;
      byteArray0[5] = (byte)46;
      byteArray0[7] = (byte) (-96);
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)96, (byte) (-99), (byte)106, (byte) (-66), (byte)0, (byte)46, (byte)0, (byte) (-96)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(string0);
      assertEquals("$60$9dj$be$A$$$A$a0", string0);
      
      short short0 = Utility.searchOpcode("$60$9dj$be$A$$$A$a0");
      assertEquals((short) (-1), short0);
      
      boolean boolean1 = true;
      try { 
        Utility.decode("$60$9dj$be$A$$$A$a0", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = "CONSTANT_Dynamic";
      // Undeclared exception!
      try { 
        Utility.signatureToString("CONSTANT_Dynamic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ONSTANT_Dynamic'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = Utility.compactClassName("4", "4", false);
      assertNotNull(string0);
      assertEquals("4", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-110);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-110)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4";
      stringArray0[1] = "void";
      stringArray0[2] = "4";
      stringArray0[3] = "4";
      try { 
        Utility.methodTypeToSignature("4", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = Utility.format(876, 876, false, 'a');
      assertNotNull(string0);
      assertEquals("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa876", string0);
      
      Utility.fillup("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa876", 876, true, 'a');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)109;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)109, (-1866));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("V6K");
      assertEquals((byte)12, byte0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      Constant[] constantArray0 = new Constant[2];
      int int0 = 91;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(5251, 91);
      assertNotNull(constantInterfaceMethodref0);
      assertEquals(5251, constantInterfaceMethodref0.getClassIndex());
      assertEquals(91, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      
      ConstantInterfaceMethodref constantInterfaceMethodref1 = (ConstantInterfaceMethodref)constantInterfaceMethodref0.copy();
      assertNotSame(constantInterfaceMethodref0, constantInterfaceMethodref1);
      assertNotSame(constantInterfaceMethodref1, constantInterfaceMethodref0);
      assertTrue(constantInterfaceMethodref1.equals((Object)constantInterfaceMethodref0));
      assertNotNull(constantInterfaceMethodref1);
      assertEquals(5251, constantInterfaceMethodref0.getClassIndex());
      assertEquals(91, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(5251, constantInterfaceMethodref1.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref1.getTag());
      assertEquals(91, constantInterfaceMethodref1.getNameAndTypeIndex());
      
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(304, (byte)12);
      assertNotNull(constantNameAndType0);
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(304, constantNameAndType0.getNameIndex());
      assertEquals(12, constantNameAndType0.getSignatureIndex());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      int int1 = 30;
      try { 
        Utility.typeOfSignature("<Any exception>(0)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <Any exception>(0)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      byte byte0 = (byte)16;
      byteArray0[3] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte)0, (byte)16}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte)0, (byte)16}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertNotNull(string0);
      assertEquals("astore_1", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean0 = false;
      File file0 = MockFile.createTempFile("y+YB.*z", "y+YB.*z", (File) null);
      assertNotNull(file0);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("y+YB.*z0y+YB.*z", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/y+YB.*z0y+YB.*z", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(file0, "y+YB.*z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"y+YB.*z\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(" Cxtends9", false);
      assertArrayEquals(new byte[] {(byte)32, (byte)67, (byte)120, (byte)116, (byte)101, (byte)110, (byte)100, (byte)115, (byte)57}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)32, (byte)67, (byte)120, (byte)116, (byte)101, (byte)110, (byte)100, (byte)115, (byte)57}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(string0);
      assertEquals("$mCxtends9", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = Utility.setBit(5425, 5425);
      assertEquals(136497, int0);
      
      try { 
        Utility.decode("$mCxtends9", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = ",Uk+&:_)\\UU{Y";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)47;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[4] = (byte) (-63);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-68);
      byteArray0[8] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)65, (byte)47, (byte)0, (byte) (-63), (byte)0, (byte)0, (byte) (-68), (byte) (-92)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)65, (byte)47, (byte)0, (byte) (-63), (byte)0, (byte)0, (byte) (-68), (byte) (-92)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(constantClass0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(59713, constantClass0.getNameIndex());
      
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertArrayEquals(new byte[] {(byte) (-23), (byte)65, (byte)47, (byte)0, (byte) (-63), (byte)0, (byte)0, (byte) (-68), (byte) (-92)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(constantClass1);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(59713, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass1.getTag());
      assertEquals(59713, constantClass1.getNameIndex());
      
      constantArray0[0] = (Constant) constantClass1;
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)65;
      byteArray1[1] = (byte) (-92);
      byteArray1[2] = (byte) (-68);
      byteArray1[3] = (byte) (-23);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      int int0 = byteSequence0.read(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)47, (byte)0, (byte) (-63), (byte)0, (byte)0, (byte) (-68)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)65, (byte)47, (byte)0, (byte) (-63), (byte)0, (byte)0, (byte) (-68), (byte) (-92)}, byteArray0);
      assertEquals(6, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertEquals(6, int0);
      assertEquals(8, byteSequence0.getIndex());
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Dont call getValueDouble() on a non DOUBLE ElementValue");
      assertFalse(boolean0);
      
      String string0 = Utility.methodTypeToSignature("boolean", (String[]) null);
      assertNotNull(string0);
      assertEquals("()Z", string0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = Utility.methodSignatureArgumentTypes("()Z", true);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('K');
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[13];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0, true, false);
      assertEquals(13, objectArray0.length);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-85);
      byteArray0[0] = (byte) (-85);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte)115;
      byteArray0[7] = (byte) (-49);
      byteArray0[8] = (byte)38;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)3, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("V6K");
      assertEquals((byte)12, byte0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      Constant[] constantArray0 = new Constant[2];
      int int0 = 91;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(5251, 91);
      assertNotNull(constantInterfaceMethodref0);
      assertEquals(5251, constantInterfaceMethodref0.getClassIndex());
      assertEquals(91, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(304, (byte)12);
      assertNotNull(constantNameAndType0);
      assertEquals(12, constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(304, constantNameAndType0.getNameIndex());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 30, (int) (byte)12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte) (-66);
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte) (-110);
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)96, (byte) (-99), (byte)106, (byte) (-66), (byte)0, (byte)46, (byte)124, (byte) (-110)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(string0);
      assertEquals("$60$9dj$be$A$$$7c$92", string0);
      
      short short0 = Utility.searchOpcode("$60$9dj$be$A$$$7c$92");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray1 = Utility.decode("$60$9dj$be$A$$$7c$92", false);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)96, (byte) (-99), (byte)106, (byte) (-66), (byte)0, (byte)46, (byte)124, (byte) (-110)}, byteArray1);
      assertEquals(8, byteArray1.length);
      assertNotNull(byteArray1);
      
      String string1 = Utility.accessToString((int) (byte)42, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("private static", string1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("$60$9dj$be$A$$$7c$92", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$60$9dj$be$A$$$7c$92'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = Utility.fillup("", (-500), true, 'q');
      assertNotNull(string0);
      assertEquals("", string0);
      
      try { 
        Utility.methodSignatureReturnType("EUCMj#'Rv2KlP%", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EUCMj#'Rv2KlP%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = "(%(aR&@=!ydONQZH?EG";
      // Undeclared exception!
      try { 
        Utility.signatureToString("(%(aR&@=!ydONQZH?EG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `%(aR&@=!ydONQZH?EG'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"");
      assertFalse(boolean0);
      
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0);
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
      
      byte byte0 = Utility.typeOfSignature("I,24m;%#\"Ies");
      assertEquals((byte)10, byte0);
      
      String string1 = Utility.printArray(objectArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(2, objectArray0.length);
      assertNotNull(string1);
      
      String string2 = Utility.accessToString((int) (byte)10);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("private static", string2);
      
      short short0 = Utility.searchOpcode("{java.lang.Object@7fa61c69, java.lang.Object@1c7a29df}");
      assertEquals((short) (-1), short0);
      
      String string3 = Utility.convertString(", stack items={");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(", stack items={", string3);
      
      String string4 = "a";
      try { 
        Utility.typeSignatureToString("a", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `a'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "W7RjV`&}][[KLoA=z";
      stringArray0[1] = "W7RjV`&}][[KLoA=z";
      stringArray0[2] = "W7RjV`&}][[KLoA=z";
      stringArray0[3] = "W7RjV`&}][[KLoA=z";
      stringArray0[4] = "W7RjV`&}][[KLoA=z";
      stringArray0[5] = "W7RjV`&}][[KLoA=z";
      stringArray0[6] = "W7RjV`&}][[KLoA=z";
      stringArray0[7] = "W7RjV`&}][[KLoA=z";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("W7RjV`&}][[KLoA=z", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegally nested brackets:[[KLoA=z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-125);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)111, (byte)2, (byte)112, (byte)60, (byte) (-125)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertArrayEquals(new byte[] {(byte)111, (byte)2, (byte)112, (byte)60, (byte) (-125)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertNotNull(string0);
      assertEquals("ddiv", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int int0 = Utility.setBit((-4187), (-4187));
      assertEquals((-4187), int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "77r:/<5z";
      stringArray0[1] = "77r:/<5z";
      stringArray0[2] = "77r:/<5z";
      stringArray0[3] = "77r:/<5z";
      String string0 = Utility.methodTypeToSignature("77r:/<5z", stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string0);
      assertEquals("(L77r:/<5z;L77r:/<5z;L77r:/<5z;L77r:/<5z;)L77r:/<5z;", string0);
      
      String string1 = "=";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-33);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-33), (int) (byte) (-124));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "\t\t<";
      short short0 = Utility.searchOpcode("\t\t<");
      assertEquals((short) (-1), short0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ifnonnull");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      try { 
        Utility.typeOfSignature("K(S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K(S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int int0 = (-153);
      String string0 = Utility.accessToString((-153));
      assertNotNull(string0);
      assertEquals("public private protected synchronized volatile native interface abstract strictfp synthetic annotation enum module", string0);
      
      try { 
        Utility.typeOfSignature("KSQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KSQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-18);
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-18)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(string0);
      assertEquals("$A$ee", string0);
      
      String string1 = Utility.typeSignatureToString("I']BEd+as", false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("int", string1);
      
      String string2 = Utility.fillup("$A$ee", (byte) (-18), false, '^');
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("$A$ee", string2);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-18);
      byteArray1[1] = (byte) (-10);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-18), (byte) (-10)}, byteArray1);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string3 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-18), (byte) (-10)}, byteArray1);
      assertEquals(2, byteArray1.length);
      assertNotNull(string3);
      assertEquals("<illegal opcode>", string3);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)42;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-56), (-3560));
      assertArrayEquals(new byte[] {(byte)30, (byte) (-56), (byte) (-35), (byte) (-117), (byte)61, (byte)42}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(string0);
      assertEquals("0:    lload_0\n1:    goto_w\t\t#-578077397\n", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 59, (int) (byte)42, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.classOrInterface(3534);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      String string1 = "^JAgKpp0LX[$Y";
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      String string2 = Utility.compactClassName("", "^JAgKpp0LX[$Y", true);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      byte byte0 = Utility.typeOfSignature("B/rbikyV%CL|~`G");
      assertEquals((byte)8, byte0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "^JAgKpp0LX[$Y";
      objectArray0[2] = (Object) fileSystemHandling1;
      boolean boolean0 = false;
      String string3 = Utility.printArray(objectArray0, true, false);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(3, objectArray0.length);
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)8;
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-115), (byte)8}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean1);
      
      byte byte1 = Utility.typeOfSignature("B/rbikyV%CL|~`G");
      assertTrue(byte1 == byte0);
      assertEquals((byte)8, byte1);
      
      String string4 = "org.apache.bcel.classfile.ModulePackages";
      try { 
        Utility.typeSignatureToString("org.apache.bcel.classfile.ModulePackages", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.ModulePackages'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-99);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)96, (byte) (-99), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean1);
      
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte) (-110);
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)96, (byte) (-99), (byte)106, (byte) (-66), (byte)42, (byte)46, (byte)124, (byte) (-110)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(string0);
      assertEquals("$60$9dj$be$w$$$7c$92", string0);
      
      short short0 = Utility.searchOpcode("$60$9dj$be$w$$$7c$92");
      assertEquals((short) (-1), short0);
      
      boolean boolean2 = false;
      byte[] byteArray1 = Utility.decode("NestMembers(", false);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(12, byteArray1.length);
      assertNotNull(byteArray1);
      
      String string1 = Utility.accessToString((int) (byte)42, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("private static", string1);
      
      try { 
        Utility.methodSignatureArgumentTypes("NestMembers(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NestMembers(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)72;
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)126;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)126, (-1866));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      int int0 = (-33);
      boolean boolean0 = Utility.isSet((-33), (-33));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("athrow", (String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-106);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 20, (int) (byte)108, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object3));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      String string0 = Utility.printArray(objectArray0);
      assertEquals(6, objectArray0.length);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "{java.lang.Object@74c786e5, java.lang.Object@769c682f, java.lang.Object@4b92c01, java.lang.Object@45acaf58, java.lang.Object@d14e9a6, java.lang.Object@185c353b}";
      stringArray0[1] = "putfield";
      stringArray0[2] = "%wTc7ZTW/dx#";
      stringArray0[3] = "class";
      stringArray0[4] = "putfield";
      stringArray0[5] = "{java.lang.Object@74c786e5, java.lang.Object@769c682f, java.lang.Object@4b92c01, java.lang.Object@45acaf58, java.lang.Object@d14e9a6, java.lang.Object@185c353b}";
      stringArray0[6] = "ifnonnull";
      stringArray0[7] = "putfield";
      String string1 = Utility.methodTypeToSignature("putfield", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(8, stringArray0.length);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-122);
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-71);
      byteArray1[1] = (byte) (-59);
      byteArray1[2] = (byte) (-95);
      byteArray1[3] = (byte) (-122);
      byteArray1[4] = (byte)7;
      byteArray1[5] = (byte)7;
      byteArray1[6] = (byte)1;
      byteArray1[7] = (byte) (-95);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-71), (byte) (-59), (byte) (-95), (byte) (-122), (byte)7, (byte)7, (byte)1, (byte) (-95)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)7, (byte) (-59), (byte)9, (byte) (-71), (byte) (-95), (byte)9, (byte)1, (byte) (-122)}, byteArray0);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-107);
      byteArray0[5] = (byte)42;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)34, (-3560));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      int int0 = Utility.clearBit(187, 187);
      assertEquals(187, int0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int1 = Utility.clearBit((-240), 831);
      assertFalse(int1 == int0);
      assertEquals(2147483408, int1);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = ",Uk+&:_)\\UU{Y";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)47;
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-68);
      byteArray0[8] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)65, (byte)47, (byte)0, (byte) (-63), (byte)7, (byte)0, (byte) (-68), (byte) (-92)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)65, (byte)47, (byte)0, (byte) (-63), (byte)7, (byte)0, (byte) (-68), (byte) (-92)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(constantClass0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(59713, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertArrayEquals(new byte[] {(byte) (-23), (byte)65, (byte)47, (byte)0, (byte) (-63), (byte)7, (byte)0, (byte) (-68), (byte) (-92)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(constantClass1);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(59713, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(59713, constantClass1.getNameIndex());
      assertEquals((byte)7, constantClass1.getTag());
      
      char char0 = byteSequence0.readChar();
      assertArrayEquals(new byte[] {(byte) (-23), (byte)65, (byte)47, (byte)0, (byte) (-63), (byte)7, (byte)0, (byte) (-68), (byte) (-92)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals('\u2F00', char0);
      assertEquals(4, byteSequence0.getIndex());
      
      constantArray0[0] = (Constant) constantClass1;
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 1792. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PmLr6MLbP)h(f'~6[E3");
      assertNotNull(mockFileOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      assertNotNull(objectOutputStream0);
      
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte) (-41);
      byteArray0[7] = (byte)29;
      byteArray0[8] = (byte)14;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals(18, byteArray0.length);
      assertNotNull(string0);
      assertEquals("$EO$88$O$T$3a$d7$j$O$A$A$A$A$A$A$A$A$A", string0);
      
      String string1 = Utility.replace("PmLr6MLbP)h(f'~6[E3", "PmLr6MLbP)h(f'~6[E3", "PmLr6MLbP)h(f'~6[E3");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("PmLr6MLbP)h(f'~6[E3", string1);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0);
      assertNotNull(mockPrintStream0);
      
      Object[] objectArray0 = new Object[2];
      mockFileOutputStream0.release();
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      PrintStream printStream0 = mockPrintStream0.format("", objectArray0);
      assertSame(printStream0, mockPrintStream0);
      assertSame(mockPrintStream0, printStream0);
      assertEquals(2, objectArray0.length);
      assertNotNull(printStream0);
      
      Utility.printArray(printStream0, objectArray0);
      assertSame(printStream0, mockPrintStream0);
      assertSame(mockPrintStream0, printStream0);
      assertEquals(2, objectArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)19, (int) (byte)58);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 15063. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)42;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-60), (-3560));
      assertArrayEquals(new byte[] {(byte)34, (byte) (-60), (byte) (-35), (byte) (-111), (byte)61, (byte)42}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(string0);
      assertEquals("0:    fload_0\n1:    wide\t(wide)\n2:    <illegal opcode>\n3:    i2b\n4:    istore_2\n5:    aload_0\n", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 59, (int) (byte)42, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('K');
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[12];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertEquals(12, objectArray0.length);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte) (-74);
      byteArray0[8] = (byte)36;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)41, (int) (byte) (-23), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "K";
      // Undeclared exception!
      try { 
        Utility.signatureToString("K", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)23;
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)122;
      byteArray0[8] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)65, (byte)23, (byte)0, (byte) (-63), (byte)7, (byte)0, (byte)122, (byte) (-92)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)65, (byte)23, (byte)0, (byte) (-63), (byte)7, (byte)0, (byte)122, (byte) (-92)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(constantClass0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(59713, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertArrayEquals(new byte[] {(byte) (-23), (byte)65, (byte)23, (byte)0, (byte) (-63), (byte)7, (byte)0, (byte)122, (byte) (-92)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(constantClass1);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(59713, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals((byte)7, constantClass1.getTag());
      assertEquals(59713, constantClass1.getNameIndex());
      
      constantArray0[0] = (Constant) constantClass1;
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)65, (byte)23, (byte)0, (byte) (-63), (byte)7, (byte)0, (byte)122, (byte) (-92)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(2, constantArray0.length);
      assertNotNull(string0);
      assertEquals("fload\t\t%0", string0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(2, constantPool0.getLength());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",Uk+&:_)UU{Y");
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfMethodSignature("U}*6Vy@PN8NwR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U}*6Vy@PN8NwR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      assertNotNull(constantDouble0);
      assertEquals(0.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      
      constantArray0[0] = (Constant) constantDouble0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(200, 200);
      assertNotNull(constantInvokeDynamic0);
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(200, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(200, constantInvokeDynamic0.getClassIndex());
      assertEquals(200, constantInvokeDynamic0.getNameAndTypeIndex());
      
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      assertTrue(constantInvokeDynamic1.equals((Object)constantInvokeDynamic0));
      assertNotNull(constantInvokeDynamic1);
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(200, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(200, constantInvokeDynamic0.getClassIndex());
      assertEquals(200, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(200, constantInvokeDynamic1.getNameAndTypeIndex());
      assertEquals((byte)18, constantInvokeDynamic1.getTag());
      assertEquals(200, constantInvokeDynamic1.getClassIndex());
      assertEquals(200, constantInvokeDynamic1.getBootstrapMethodAttrIndex());
      
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(200, 1735);
      assertNotNull(constantNameAndType0);
      assertEquals(1735, constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(200, constantNameAndType0.getNameIndex());
      
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      assertTrue(constantNameAndType1.equals((Object)constantNameAndType0));
      assertNotNull(constantNameAndType1);
      assertEquals(1735, constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(200, constantNameAndType0.getNameIndex());
      assertEquals(200, constantNameAndType1.getNameIndex());
      assertEquals(1735, constantNameAndType1.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType1.getTag());
      
      constantArray0[2] = (Constant) constantNameAndType1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(212, 64);
      assertNotNull(constantFieldref0);
      assertEquals(212, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(64, constantFieldref0.getNameAndTypeIndex());
      
      constantArray0[3] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PmLr6MLbP)h(f'~6[E3");
      assertNotNull(mockFileOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      assertNotNull(objectOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte) (-41);
      byteArray0[7] = (byte)29;
      byteArray0[8] = (byte)19;
      String string0 = Utility.replace("PmLr6MLbP)h(f'~6[E3", "PmLr6MLbP)h(f'~6[E3", "PmLr6MLbP)h(f'~6[E3");
      assertNotNull(string0);
      assertEquals("PmLr6MLbP)h(f'~6[E3", string0);
      
      String string1 = Utility.replace("PmLr6MLbP)h(f'~6[E3", "PmLr6MLbP)h(f'~6[E3", "PmLr6MLbP)h(f'~6[E3");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("PmLr6MLbP)h(f'~6[E3", string1);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0);
      assertNotNull(mockPrintStream0);
      
      Object[] objectArray0 = new Object[2];
      mockFileOutputStream0.release();
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      PrintStream printStream0 = mockPrintStream0.format("", objectArray0);
      assertSame(printStream0, mockPrintStream0);
      assertSame(mockPrintStream0, printStream0);
      assertEquals(2, objectArray0.length);
      assertNotNull(printStream0);
      
      Utility.printArray(printStream0, objectArray0);
      assertSame(printStream0, mockPrintStream0);
      assertSame(mockPrintStream0, printStream0);
      assertEquals(2, objectArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)48, (int) (byte)58);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('K');
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)115;
      byteArray0[7] = (byte) (-49);
      byteArray0[8] = (byte)38;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), (int) (byte)3, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    istore_2
         // 1:    fload_2
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)42;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-60), (-3560));
      assertArrayEquals(new byte[] {(byte)34, (byte) (-60), (byte) (-35), (byte) (-117), (byte)61, (byte)42}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(string0);
      assertEquals("0:    fload_0\n1:    wide\t(wide)\n2:    <illegal opcode>\n3:    f2i\n4:    istore_2\n5:    aload_0\n", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 59, (int) (byte)42, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-104), (byte) (-115)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertArrayEquals(new byte[] {(byte) (-104), (byte) (-115)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(string0);
      assertEquals("dcmpg", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = "\"wx";
      String string1 = Utility.replace("\"3g0$  h[a{d>*", "\"wx", "\"3g0$  h[a{d>*");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\"3g0$  h[a{d>*", string1);
      
      try { 
        Utility.typeOfSignature("AelJ%Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AelJ%Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PmLr6MLbP)h(f'~6[E3");
      assertNotNull(mockFileOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      assertNotNull(objectOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte) (-41);
      byteArray0[7] = (byte)29;
      byteArray0[8] = (byte)39;
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)4, (byte)79, (byte) (-67), (byte)14, (byte)48, (byte)58, (byte) (-41), (byte)29, (byte)39}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(string0);
      assertEquals("$EO$bd$O0$3a$d7$j$t", string0);
      
      String string1 = Utility.replace("PmLr6MLbP)h(f'~6[E3", "PmLr6MLbP)h(f'~6[E3", "PmLr6MLbP)h(f'~6[E3");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("PmLr6MLbP)h(f'~6[E3", string1);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("PmLr6MLbP)h(f'~6[E3");
      assertNotNull(mockPrintStream0);
      
      Object[] objectArray0 = new Object[2];
      mockFileOutputStream0.release();
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      PrintStream printStream0 = mockPrintStream0.format("", objectArray0);
      assertSame(printStream0, mockPrintStream0);
      assertSame(mockPrintStream0, printStream0);
      assertEquals(2, objectArray0.length);
      assertNotNull(printStream0);
      
      Utility.printArray(printStream0, objectArray0);
      assertSame(printStream0, mockPrintStream0);
      assertSame(mockPrintStream0, printStream0);
      assertEquals(2, objectArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)48, (int) (byte)58);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 3632. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PmLr6MLbP)h(f'~6[E3");
      assertNotNull(mockFileOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      assertNotNull(objectOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)79;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte) (-41);
      byteArray0[7] = (byte)29;
      byteArray0[8] = (byte)56;
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)4, (byte)79, (byte)0, (byte)14, (byte)48, (byte)58, (byte) (-41), (byte)29, (byte)56}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(string0);
      assertEquals("$EO$A$O0$3a$d7$j8", string0);
      
      String string1 = Utility.replace("PmLr6MLbP)h(f'~6[E3", "PmLr6MLbP)h(f'~6[E3", "PmLr6MLbP)h(f'~6[E3");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("PmLr6MLbP)h(f'~6[E3", string1);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0);
      assertNotNull(mockPrintStream0);
      
      Object[] objectArray0 = new Object[2];
      mockFileOutputStream0.release();
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      PrintStream printStream0 = mockPrintStream0.format("{", objectArray0);
      assertSame(printStream0, mockPrintStream0);
      assertSame(mockPrintStream0, printStream0);
      assertEquals(2, objectArray0.length);
      assertNotNull(printStream0);
      
      Utility.printArray(printStream0, objectArray0);
      assertSame(printStream0, mockPrintStream0);
      assertSame(mockPrintStream0, printStream0);
      assertEquals(2, objectArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)48, (int) (byte)58);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte)67;
      byteArray0[8] = (byte)0;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)122, (byte)126, (byte) (-35), (byte)86, (byte) (-39), (byte) (-62), (byte)45, (byte)67, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      
      String string0 = Utility.classOrInterface((-107));
      assertNotNull(string0);
      assertEquals("interface", string0);
      
      byte byte0 = Utility.typeOfMethodSignature("()Bq");
      assertEquals((byte)8, byte0);
      
      int int0 = Utility.setBit(3434, (-107));
      assertEquals(2100586, int0);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)8;
      byteArray1[1] = (byte)8;
      byteArray1[2] = (byte)8;
      byteArray1[3] = (byte)8;
      String string1 = Utility.toHexString(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)8, (byte)8, (byte)8, (byte)8}, byteArray1);
      assertEquals(4, byteArray1.length);
      assertNotNull(string1);
      assertEquals("08 08 08 08", string1);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte) (-110);
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)96, (byte) (-99), (byte)106, (byte) (-66), (byte)42, (byte)46, (byte)124, (byte) (-110)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(string0);
      assertEquals("$60$9dj$be$w$$$7c$92", string0);
      
      short short0 = Utility.searchOpcode("$60$9dj$be$w$$$7c$92");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray1 = Utility.decode("$60$9dj$be$w$$$7c$92", false);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)96, (byte) (-99), (byte)106, (byte) (-66), (byte)42, (byte)46, (byte)124, (byte) (-110)}, byteArray1);
      assertEquals(8, byteArray1.length);
      assertNotNull(byteArray1);
      
      boolean boolean1 = true;
      String string1 = Utility.accessToString((int) (byte)42, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("private static", string1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("$60$9dj$be$w$$$7c$92", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$60$9dj$be$w$$$7c$92'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)84;
      byteArray0[0] = (byte) (-71);
      byteArray0[3] = (byte)0;
      String string0 = "a?YR73IS@";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a?YR73IS@");
      assertFalse(boolean0);
      
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte) (-75);
      ConstantPool constantPool0 = null;
      int int0 = (-1478);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1478), (int) (byte) (-75), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = Utility.compactClassName("\"s~n_kE:\"k", "5gp{i p7ubeQU", true);
      assertNotNull(string0);
      assertEquals("\"s~n_kE:\"k", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('b');
      assertTrue(boolean0);
      
      String string1 = Utility.replace("\"s~n_kE:\"k", "? super ", "8!UV'F[");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\"s~n_kE:\"k", string1);
      
      boolean boolean1 = Utility.isSet(59, 59);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      try { 
        Utility.typeOfSignature("\"s~n_kE:\"k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"s~n_kE:\"k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = ",Uk+&:_)\\UU{Y";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)47;
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-68);
      byteArray0[8] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)65, (byte)47, (byte)0, (byte) (-63), (byte)7, (byte)0, (byte) (-68), (byte) (-92)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)65, (byte)47, (byte)0, (byte) (-63), (byte)7, (byte)0, (byte) (-68), (byte) (-92)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(constantClass0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(59713, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertArrayEquals(new byte[] {(byte) (-23), (byte)65, (byte)47, (byte)0, (byte) (-63), (byte)7, (byte)0, (byte) (-68), (byte) (-92)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(constantClass1);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(59713, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals((byte)7, constantClass1.getTag());
      assertEquals(59713, constantClass1.getNameIndex());
      
      constantArray0[0] = (Constant) constantClass1;
      int int0 = byteSequence0.skipBytes((byte)7);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)65, (byte)47, (byte)0, (byte) (-63), (byte)7, (byte)0, (byte) (-68), (byte) (-92)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(7, int0);
      assertEquals(9, byteSequence0.getIndex());
      
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)84;
      String string0 = "a?YR73IS@";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a?YR73IS@");
      assertFalse(boolean0);
      
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte) (-80);
      ConstantPool constantPool0 = null;
      int int0 = (-1478);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1478), (int) (byte) (-80), false);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)40, (byte)84, (byte)84, (byte)84, (byte) (-80), (byte) (-80)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(string1);
      assertEquals("0:    dload_2\n1:    bastore\n2:    bastore\n3:    bastore\n4:    areturn\n5:    areturn\n", string1);
      
      String string2 = Utility.convertString("0:    dload_2\n1:    bastore\n2:    bastore\n3:    bastore\n4:    areturn\n5:    areturn\n");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("0:    dload_2\\n1:    bastore\\n2:    bastore\\n3:    bastore\\n4:    areturn\\n5:    areturn\\n", string2);
      
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)84, (-1280), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = "RI0;j<7]";
      String string1 = Utility.fillup("RI0;j<7]", 2425, false, 'd');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "double";
      stringArray0[1] = string1;
      stringArray0[2] = "double";
      stringArray0[3] = "org.apache.bcel.classfile.Annotations";
      stringArray0[4] = "double";
      stringArray0[5] = "double";
      stringArray0[6] = "double";
      String string2 = Utility.methodTypeToSignature("double", stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(7, stringArray0.length);
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)81;
      String string3 = Utility.encode(byteArray0, false);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-43), (byte)1, (byte)81}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(string3);
      assertEquals("$d5$BQ", string3);
      
      try { 
        Utility.typeOfSignature("2VnY6Bh8:8A;<njniu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2VnY6Bh8:8A;<njniu
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.convertString("c*ewXp)!E^>kOrJG6u");
      assertNotNull(string0);
      assertEquals("c*ewXp)!E^>kOrJG6u", string0);
      
      String string1 = Utility.accessToString((-1154));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("private protected static final synchronized volatile native interface strictfp synthetic annotation enum module", string1);
      
      String string2 = Utility.compactClassName("2Xpc^:mG", false);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("2Xpc^:mG", string2);
      
      try { 
        Utility.typeOfSignature("2Xpc^:mG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2Xpc^:mG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("Fex`e>ns ", false);
      assertArrayEquals(new byte[] {(byte)70, (byte)101, (byte)120, (byte)96, (byte)101, (byte)62, (byte)110, (byte)115, (byte)32}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string0 = Utility.typeSignatureToString("Fex`e>ns ", false);
      assertNotNull(string0);
      assertEquals("float", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = Utility.setBit(5425, 5425);
      assertEquals(136497, int0);
      
      boolean boolean0 = false;
      byte[] byteArray1 = Utility.decode("float", false);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)102, (byte)108, (byte)111, (byte)97, (byte)116}, byteArray1);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      
      try { 
        Utility.methodSignatureArgumentTypes("if_icmplt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmplt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = ", signatureIndex = ";
      try { 
        Utility.typeOfSignature(", signatureIndex = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , signatureIndex = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      int int0 = Utility.clearBit((-2757), 26);
      assertEquals((-67111621), int0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('!');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte) (-27);
      byteArray0[7] = (byte)75;
      byteArray0[8] = (byte) (-69);
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)84, (byte) (-46), (byte)79, (byte)8, (byte) (-96), (byte) (-91), (byte) (-27), (byte)75, (byte) (-69)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean1);
      
      String string0 = Utility.accessToString(2666, false);
      assertNotNull(string0);
      assertEquals("private static synchronized volatile interface strictfp", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "private static synchronized volatile interface strictfp";
      stringArray0[1] = "private static synchronized volatile interface strictfp";
      String string1 = Utility.methodTypeToSignature("private static synchronized volatile interface strictfp", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, stringArray0.length);
      assertNotNull(string1);
      assertEquals("(Lprivate;Lprivate;)Lprivate;", string1);
      
      String string2 = Utility.compactClassName("void");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("void", string2);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 199, (int) (byte) (-69));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-69);
      byte byte0 = (byte) (-85);
      byteArray0[3] = (byte) (-85);
      byte byte1 = (byte) (-63);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)123;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-94), (byte) (-17), (byte) (-69), (byte) (-85), (byte) (-63), (byte)123}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean0);
      
      String string0 = "[Ja`&5wVuXw}ULb";
      boolean boolean1 = false;
      String string1 = Utility.typeSignatureToString("[Ja`&5wVuXw}ULb", false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("long[]", string1);
      
      String string2 = "0^kHHq~Cu`Y;hZ";
      byte[] byteArray1 = Utility.decode("0^kHHq~Cu`Y;hZ", false);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(14, byteArray1.length);
      assertNotNull(byteArray1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(14, byteArray1.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 107
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-99);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)46;
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte) (-110);
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)96, (byte) (-99), (byte)0, (byte) (-66), (byte)42, (byte)46, (byte)124, (byte) (-110)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(string0);
      assertEquals("$60$9d$A$be$w$$$7c$92", string0);
      
      short short0 = Utility.searchOpcode("$60$9d$A$be$w$$$7c$92");
      assertEquals((short) (-1), short0);
      
      boolean boolean3 = false;
      byte[] byteArray1 = Utility.decode("NestMembers(", false);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(12, byteArray1.length);
      assertNotNull(byteArray1);
      
      String string1 = Utility.accessToString((int) (byte)42, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("private static", string1);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("NestMembers(", "NestMembers(", "org.apache.bcel.classfile.ConstantFieldref", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NestMembers(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)65;
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-68);
      byteArray0[8] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)65, (byte)0, (byte) (-63), (byte)7, (byte)0, (byte) (-68), (byte) (-92)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)65, (byte)0, (byte) (-63), (byte)7, (byte)0, (byte) (-68), (byte) (-92)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(constantClass0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(0, constantClass0.getNameIndex());
      
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)65, (byte)0, (byte) (-63), (byte)7, (byte)0, (byte) (-68), (byte) (-92)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(constantClass1);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(0, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass1.getTag());
      assertEquals(0, constantClass1.getNameIndex());
      
      constantArray0[0] = (Constant) constantClass1;
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)65, (byte)0, (byte) (-63), (byte)7, (byte)0, (byte) (-68), (byte) (-92)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(2, constantArray0.length);
      assertNotNull(string0);
      assertEquals("lstore_2", string0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(2, constantPool0.getLength());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",Uk+&:_)UU{Y");
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfMethodSignature("U}*6Vy@PN8NwR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U}*6Vy@PN8NwR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = Utility.replace(".debug", ".debug", ".debug");
      assertNotNull(string0);
      assertEquals(".debug", string0);
      
      String string1 = Utility.accessToString(80);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("final volatile", string1);
      
      String string2 = Utility.classOrInterface(80);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("class", string2);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('a');
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) ".debug";
      objectArray0[2] = (Object) ".debug";
      objectArray0[3] = (Object) "final volatile";
      objectArray0[4] = (Object) ".debug";
      objectArray0[5] = (Object) "final volatile";
      short short0 = Utility.searchOpcode("final volatile");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = Utility.decode("i2", false);
      assertArrayEquals(new byte[] {(byte)105, (byte)50}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string3 = Utility.format(380, 2141, true, 'a');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = Utility.toHexString(byteArray0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)105, (byte)50}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(string4);
      assertEquals("69 32", string4);
      
      String string5 = Utility.getSignature("javalang");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("Ljavalang;", string5);
      
      boolean boolean1 = Utility.isSet(80, 3);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)105, (byte)50}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string6 = Utility.signatureToString("Ljavalang;", true);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("javalang", string6);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, true, false);
      assertEquals(0, objectArray0.length);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte) (-5);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)122, (byte) (-63), (byte)32, (byte) (-101), (byte) (-91), (byte) (-5)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)122, (byte) (-63), (byte)32, (byte) (-101), (byte) (-91), (byte) (-5)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(string1);
      assertEquals("ishr", string1);
      assertEquals(1, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-100), (byte) (-65), (byte) (-42), (byte) (-124)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte) (-100), (byte) (-65), (byte) (-42), (byte) (-124)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertNotNull(string0);
      assertEquals("ifge\t\t#-16426", string0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = Utility.fillup(" ;EyuQj", 32, false, 'S');
      assertNotNull(string0);
      assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSS ;EyuQj", string0);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte)25;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)26;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)91, (-691));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      int int0 = (-107);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte)67;
      byteArray0[8] = (byte)0;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)122, (byte)126, (byte) (-35), (byte)86, (byte) (-39), (byte) (-62), (byte)45, (byte)67, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      
      String string0 = Utility.classOrInterface((-107));
      assertNotNull(string0);
      assertEquals("interface", string0);
      
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = Utility.replace("Invalid type: ", "Invalid type: ", "SJe}&Lw\"R7HgWtq]iH");
      assertNotNull(string0);
      assertEquals("SJe}&Lw\"R7HgWtq]iH", string0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SJe}&Lw\"R7HgWtq]iH");
      assertFalse(boolean0);
      
      boolean boolean1 = Utility.isSet(123, (-390));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(string1);
      assertEquals("00", string1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      int int0 = Utility.clearBit(1327, (-390));
      assertEquals(1327, int0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("SJe}&Lw\"R7HgWtq]iH", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `e}&Lw\"R7HgWtq]iH'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = Utility.replace(".debug", ".debug", ".debug");
      assertNotNull(string0);
      assertEquals(".debug", string0);
      
      String string1 = Utility.accessToString(80);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("final volatile", string1);
      
      String string2 = Utility.classOrInterface(80);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("class", string2);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('a');
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) ".debug";
      objectArray0[2] = (Object) ".debug";
      objectArray0[3] = (Object) "final volatile";
      objectArray0[4] = (Object) ".debug";
      objectArray0[5] = (Object) "final volatile";
      short short0 = Utility.searchOpcode("final volatile");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = Utility.decode("i2", false);
      assertArrayEquals(new byte[] {(byte)105, (byte)50}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string3 = Utility.format(390, 2141, true, 'a');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = Utility.toHexString(byteArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertArrayEquals(new byte[] {(byte)105, (byte)50}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(string4);
      assertEquals("69 32", string4);
      
      String string5 = Utility.getSignature("java.lang.");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("Ljava/lang/;", string5);
      
      boolean boolean1 = Utility.isSet(80, 3);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)105, (byte)50}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string6 = Utility.signatureToString("Ljava/lang/;", true);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte) (-49);
      byteArray0[8] = (byte)21;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)41, (int) (byte)41, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = Utility.compactClassName("'M%]`mQjDl[8M!a");
      assertNotNull(string0);
      assertEquals("'M%]`mQjDl[8M!a", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-89);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)47, (int) (byte) (-41), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('?');
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = "d2l";
      byte[] byteArray0 = Utility.decode("d2l", false);
      assertArrayEquals(new byte[] {(byte)100, (byte)50, (byte)108}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArray0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, false, false);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, objectArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("d2l", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `d2l'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = "[]";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("[]", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = "OxQ/a7cJEAo2}?sw";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = true;
      try { 
        Utility.typeSignatureToString("OxQ/a7cJEAo2}?sw", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OxQ/a7cJEAo2}?sw'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = Utility.typeSignatureToString("Bg5", true);
      assertNotNull(string0);
      assertEquals("byte", string0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("L~lO:!kB[8Kuf", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L~lO:!kB[8Kuf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)59;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 79, 92, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('K');
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)90;
      byteArray0[1] = (byte)41;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)43;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte) (-49);
      byteArray0[8] = (byte)38;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)3, true);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)47;
      byteArray0[8] = (byte)78;
      byteArray0[3] = (byte)46;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 79, 92, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "v7");
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("iH_-$ZEW@La%Qw", false);
      assertEquals(13, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string0 = Utility.encode(byteArray0, false);
      assertEquals(13, byteArray0.length);
      assertNotNull(string0);
      assertEquals("iH_$z$ZEW$40La$rQw", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string1 = Utility.accessToString(3);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("public private", string1);
      
      String string2 = Utility.accessToString(93, true);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("public protected static final volatile", string2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 68, 8, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte) (-110);
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)96, (byte) (-99), (byte)106, (byte) (-66), (byte)42, (byte)46, (byte)124, (byte) (-110)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(string0);
      assertEquals("$60$9dj$be$w$$$7c$92", string0);
      
      short short0 = Utility.searchOpcode("$60$9dj$be$w$$$7c$92");
      assertEquals((short) (-1), short0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)96, (byte) (-99), (byte)106, (byte) (-66), (byte)42, (byte)46, (byte)124, (byte) (-110)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = false;
      byte[] byteArray1 = Utility.decode("NestMembers(", false);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(12, byteArray1.length);
      assertNotNull(byteArray1);
      
      String string1 = Utility.accessToString((int) (byte)42, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("private static", string1);
      
      try { 
        Utility.typeSignatureToString("NestMembers(", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NestMembers('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('[');
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0, false, true);
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte) (-59);
      objectArray0[1] = (Object) (byte)38;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)41, (int) (byte)3, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null, true, true);
      assertNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)98;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-43), (-35));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)95;
      byte byte0 = (byte) (-63);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-68);
      byte byte1 = (byte) (-92);
      byteArray0[8] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)65, (byte)68, (byte)95, (byte) (-63), (byte)7, (byte)0, (byte) (-68), (byte) (-92)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)65, (byte)68, (byte)95, (byte) (-63), (byte)7, (byte)0, (byte) (-68), (byte) (-92)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(constantClass0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(59713, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertArrayEquals(new byte[] {(byte) (-23), (byte)65, (byte)68, (byte)95, (byte) (-63), (byte)7, (byte)0, (byte) (-68), (byte) (-92)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(constantClass1);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(59713, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals((byte)7, constantClass1.getTag());
      assertEquals(59713, constantClass1.getNameIndex());
      
      constantArray0[0] = (Constant) constantClass1;
      ConstantClass constantClass2 = (ConstantClass)constantArray0[0].copy();
      assertNotSame(constantClass2, constantClass1);
      assertNotSame(constantClass2, constantClass0);
      assertTrue(constantClass2.equals((Object)constantClass0));
      assertTrue(constantClass2.equals((Object)constantClass1));
      assertEquals(2, constantArray0.length);
      assertNotNull(constantClass2);
      assertEquals(59713, constantClass2.getNameIndex());
      assertEquals((byte)7, constantClass2.getTag());
      
      constantArray0[1] = (Constant) constantClass2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)65, (byte)68, (byte)95, (byte) (-63), (byte)7, (byte)0, (byte) (-68), (byte) (-92)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(2, constantArray0.length);
      assertNotNull(string0);
      assertEquals("fstore_1", string0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(3, byteSequence0.getIndex());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",Uk+&:_)UU{Y");
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfMethodSignature("U}*6Vy@PN8NwR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U}*6Vy@PN8NwR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)61;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-60), (-3560));
      assertArrayEquals(new byte[] {(byte)34, (byte) (-60), (byte) (-35), (byte) (-119), (byte)61, (byte)61}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(string0);
      assertEquals("0:    fload_0\n1:    wide\t(wide)\n2:    <illegal opcode>\n3:    l2f\n4:    istore_2\n5:    istore_2\n", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 59, (int) (byte) (-60), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-68);
      byteArray0[8] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)65, (byte)47, (byte)95, (byte) (-23), (byte)7, (byte)0, (byte) (-68), (byte) (-92)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)65, (byte)47, (byte)95, (byte) (-23), (byte)7, (byte)0, (byte) (-68), (byte) (-92)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(constantClass0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(59713, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      
      byte byte0 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte) (-23), (byte)65, (byte)47, (byte)95, (byte) (-23), (byte)7, (byte)0, (byte) (-68), (byte) (-92)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals((byte)47, byte0);
      assertEquals(3, byteSequence0.getIndex());
      
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertArrayEquals(new byte[] {(byte) (-23), (byte)65, (byte)47, (byte)95, (byte) (-23), (byte)7, (byte)0, (byte) (-68), (byte) (-92)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(constantClass1);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(59713, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals((byte)7, constantClass1.getTag());
      assertEquals(59713, constantClass1.getNameIndex());
      
      constantArray0[0] = (Constant) constantClass1;
      ConstantClass constantClass2 = (ConstantClass)constantArray0[0].copy();
      assertNotSame(constantClass2, constantClass0);
      assertNotSame(constantClass2, constantClass1);
      assertTrue(constantClass2.equals((Object)constantClass1));
      assertTrue(constantClass2.equals((Object)constantClass0));
      assertEquals(2, constantArray0.length);
      assertNotNull(constantClass2);
      assertEquals((byte)7, constantClass2.getTag());
      assertEquals(59713, constantClass2.getNameIndex());
      
      constantArray0[1] = (Constant) constantClass2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)65, (byte)47, (byte)95, (byte) (-23), (byte)7, (byte)0, (byte) (-68), (byte) (-92)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(2, constantArray0.length);
      assertNotNull(string0);
      assertEquals("swap", string0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(4, byteSequence0.getIndex());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",Uk+&:_)UU{Y");
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfMethodSignature("U}*6Vy@PN8NwR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U}*6Vy@PN8NwR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = "StackMap";
      // Undeclared exception!
      try { 
        Utility.signatureToString("StackMap", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `tackMap'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      int int0 = (-153);
      String string0 = Utility.accessToString((-153));
      assertNotNull(string0);
      assertEquals("public private protected synchronized volatile native interface abstract strictfp synthetic annotation enum module", string0);
      
      try { 
        Utility.typeOfSignature("Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.accessToString((-1172));
      assertNotNull(string0);
      assertEquals("protected static synchronized volatile native interface strictfp synthetic annotation enum module", string0);
      
      String string1 = Utility.compactClassName("Q*ewp)!E^>kOa>G6u", false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Q*ewp)!E^>kOa>G6u", string1);
      
      try { 
        Utility.typeOfSignature("Q*ewp)!E^>kOa>G6u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q*ewp)!E^>kOa>G6u
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte)61;
      byte byte0 = (byte)42;
      byteArray0[5] = (byte)42;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-77), (-3560));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-97);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 20, (int) (byte)108, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = Utility.classOrInterface(257);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      try { 
        Utility.typeOfSignature("?-1,~:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?-1,~:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = "athrow";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string1 = Utility.getSignature("athrow");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Lathrow;", string1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      byte byte0 = Utility.typeOfSignature("Lathrow;");
      assertEquals((byte)14, byte0);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string2 = "Invalid frame type found while parsing stack map table: ";
      String[] stringArray0 = new String[0];
      String string3 = Utility.methodTypeToSignature("athrow", stringArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      assertNotNull(string3);
      assertEquals("()Lathrow;", string3);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("Invalid frame type found while parsing stack map table: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `nvalid frame type found while parsing stack map table: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)84;
      String string0 = "a?YR73IS@";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a?YR73IS@");
      assertFalse(boolean0);
      
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte)84;
      ConstantPool constantPool0 = null;
      int int0 = (-1478);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1478), (int) (byte) (-68), false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)36;
      byteArray0[5] = (byte)61;
      byteArray0[7] = (byte) (-49);
      byteArray0[8] = (byte)38;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)36, (int) (byte)36, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      short short0 = Utility.searchOpcode("boolean");
      assertEquals((short) (-1), short0);
      
      String string0 = "jsr_w";
      String string1 = Utility.convertString("jsr_w");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("jsr_w", string1);
      
      String string2 = Utility.getSignature("double");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("D", string2);
      
      try { 
        Utility.methodSignatureReturnType("jsr_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: jsr_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = Utility.format((-1715), (-1715), false, '!');
      assertNotNull(string0);
      assertEquals("-1715", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      int int0 = Utility.clearBit((-2757), 26);
      assertEquals((-67111621), int0);
      
      boolean boolean0 = Utility.isSet((-67111621), '!');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte) (-27);
      byteArray0[7] = (byte)60;
      byteArray0[8] = (byte)71;
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)84, (byte) (-46), (byte)79, (byte)16, (byte) (-96), (byte) (-91), (byte) (-27), (byte)60, (byte)71}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean1);
      
      String string0 = Utility.accessToString(2666, false);
      assertNotNull(string0);
      assertEquals("private static synchronized volatile interface strictfp", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "private static synchronized volatile interface strictfp";
      stringArray0[1] = "private static synchronized volatile interface strictfp";
      String string1 = Utility.methodTypeToSignature("private static synchronized volatile interface strictfp", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, stringArray0.length);
      assertNotNull(string1);
      assertEquals("(Lprivate;Lprivate;)Lprivate;", string1);
      
      String string2 = Utility.compactClassName("v7");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("v7", string2);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 199, (int) (byte)71);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "invokedynamic");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(startPc = ");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string0 = Utility.compactClassName("sastore", "I3H$eA8?/h=<q[{", false);
      assertNotNull(string0);
      assertEquals("sastore", string0);
      
      String string1 = Utility.getSignature("sastore");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Lsastore;", string1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string2 = Utility.replace("boolean", "I3H$eA8?/h=<q[{", "(startPc = ");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("boolean", string2);
      
      boolean boolean3 = Utility.isSet((-1690), (-1690));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      try { 
        Utility.typeSignatureToString("E,e|RO&s:=Mo$gZA6", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E,e|RO&s:=Mo$gZA6'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-68);
      byteArray0[8] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)65, (byte)47, (byte)95, (byte) (-63), (byte)7, (byte)0, (byte) (-68), (byte) (-92)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)65, (byte)47, (byte)95, (byte) (-63), (byte)7, (byte)0, (byte) (-68), (byte) (-92)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(constantClass0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(59713, constantClass0.getNameIndex());
      
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertArrayEquals(new byte[] {(byte) (-23), (byte)65, (byte)47, (byte)95, (byte) (-63), (byte)7, (byte)0, (byte) (-68), (byte) (-92)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(constantClass1);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(59713, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass1.getTag());
      assertEquals(59713, constantClass1.getNameIndex());
      
      constantArray0[0] = (Constant) constantClass1;
      ConstantClass constantClass2 = (ConstantClass)constantArray0[0].copy();
      assertNotSame(constantClass2, constantClass0);
      assertNotSame(constantClass2, constantClass1);
      assertTrue(constantClass2.equals((Object)constantClass1));
      assertTrue(constantClass2.equals((Object)constantClass0));
      assertEquals(2, constantArray0.length);
      assertNotNull(constantClass2);
      assertEquals(59713, constantClass2.getNameIndex());
      assertEquals((byte)7, constantClass2.getTag());
      
      constantArray0[1] = (Constant) constantClass2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)65, (byte)47, (byte)95, (byte) (-63), (byte)7, (byte)0, (byte) (-68), (byte) (-92)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(2, constantArray0.length);
      assertNotNull(string0);
      assertEquals("laload", string0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(3, byteSequence0.getIndex());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",Uk+&:_)UU{Y");
      assertFalse(boolean0);
      
      String string1 = "U}*6Vy@PN8\\NwR";
      try { 
        Utility.typeOfMethodSignature("U}*6Vy@PN8NwR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U}*6Vy@PN8NwR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("<", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type parameter signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)108;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 20, (int) (byte)108, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-61);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte) (-61)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Dont call getValueByte() on a non BYTE ElementValue", "O:*DFRhh'u!KJHSQm w", "Unknown constant type ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` on a non BYTE ElementValue'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('~');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = "-[hB7rNs3[";
      int int0 = 66;
      char char0 = '}';
      String string1 = Utility.fillup("-[hB7rNs3[", 66, false, '}');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}-[hB7rNs3[", string1);
      
      String string2 = "sB.OSh";
      try { 
        Utility.methodSignatureArgumentTypes("sB.OSh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: sB.OSh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = Utility.compactClassName("R,Uao", "R,Uao", false);
      assertNotNull(string0);
      assertEquals("R,Uao", string0);
      
      try { 
        Utility.typeOfSignature("R,Uao");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R,Uao
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(" extends ", false);
      assertArrayEquals(new byte[] {(byte)32, (byte)101, (byte)120, (byte)116, (byte)101, (byte)110, (byte)100, (byte)115, (byte)32}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)32, (byte)101, (byte)120, (byte)116, (byte)101, (byte)110, (byte)100, (byte)115, (byte)32}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(string0);
      assertEquals("$mextends$m", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = Utility.setBit(5425, 5425);
      assertEquals(136497, int0);
      
      boolean boolean0 = true;
      try { 
        Utility.decode("$mextends$m", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = Utility.classOrInterface(176);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      String string1 = Utility.compactClassName("class", false);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("class", string1);
      
      boolean boolean0 = Utility.isSet((-20), (-20));
      assertTrue(boolean0);
      
      try { 
        Utility.typeSignatureToString("TEi!\"qXq", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type variable signature: TEi!\"qXq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      int int0 = (-107);
      String string0 = Utility.classOrInterface((-107));
      assertNotNull(string0);
      assertEquals("interface", string0);
      
      try { 
        Utility.typeOfSignature("M8lq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M8lq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)37;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)84;
      String string0 = "a?YR73IS@";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a?YR73IS@");
      assertFalse(boolean0);
      
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte) (-75);
      ConstantPool constantPool0 = null;
      int int0 = (-1478);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1478), (int) (byte) (-75), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)84;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a?YR73IS@");
      assertFalse(boolean0);
      
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte) (-99);
      ConstantPool constantPool0 = null;
      int int0 = (-1478);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1478), (int) (byte) (-99), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dload_2
         // 1:    bastore
         // 2:    istore\t\t%84
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = "0|$&4cnL_";
      try { 
        Utility.typeOfSignature("0|$&4cnL_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0|$&4cnL_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = "U}*6Vy@PN8\\NwR:";
      String string1 = " 8g";
      try { 
        Utility.typeSignatureToString("U}*6Vy@PN8NwR:", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U}*6Vy@PN8NwR:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-295), 210);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 250, 250, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("PmLr6MLbP)h(f'~6[E3", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PmLr6MLbP)h(f'~6[E3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = "eNfZ[!<$Tj@(";
      boolean boolean0 = true;
      LocalVariableTable localVariableTable0 = null;
      // Undeclared exception!
      try { 
        Utility.signatureToString("DFN<K.\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N<K.\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = Utility.accessToString((-239));
      assertNotNull(string0);
      assertEquals("public final native interface abstract strictfp synthetic annotation enum module", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-44);
      String string1 = Utility.toHexString(byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)49, (byte)25, (byte) (-44)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(string1);
      assertEquals("31 19 d4", string1);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)49, (byte)25, (byte) (-44)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-44);
      byteArray1[1] = (byte) (-44);
      byteArray1[2] = (byte)49;
      byteArray1[3] = (byte)25;
      byteArray1[4] = (byte)25;
      byteArray1[5] = (byte)49;
      byteArray1[6] = (byte)49;
      byteArray1[7] = (byte)49;
      String string2 = Utility.encode(byteArray1, true);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-44), (byte) (-44), (byte)49, (byte)25, (byte)25, (byte)49, (byte)49, (byte)49}, byteArray1);
      assertEquals(8, byteArray1.length);
      assertNotNull(string2);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
      
      String string3 = Utility.convertString("+^*\"Q_7zY\"bihp[`2c3");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("+^*\\\"Q_7zY\\\"bihp[`2c3", string3);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string4 = constantPool0.toString();
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals(0, constantArray0.length);
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)49, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object4));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object2));
      assertNotNull(object6);
      
      objectArray0[6] = object6;
      Object object7 = new Object();
      assertFalse(object7.equals((Object)object3));
      assertFalse(object7.equals((Object)object5));
      assertFalse(object7.equals((Object)object1));
      assertFalse(object7.equals((Object)object4));
      assertFalse(object7.equals((Object)object0));
      assertFalse(object7.equals((Object)object2));
      assertFalse(object7.equals((Object)object6));
      assertNotNull(object7);
      
      objectArray0[7] = object7;
      Object object8 = new Object();
      assertFalse(object8.equals((Object)object3));
      assertFalse(object8.equals((Object)object7));
      assertFalse(object8.equals((Object)object4));
      assertFalse(object8.equals((Object)object1));
      assertFalse(object8.equals((Object)object0));
      assertFalse(object8.equals((Object)object2));
      assertFalse(object8.equals((Object)object6));
      assertFalse(object8.equals((Object)object5));
      assertNotNull(object8);
      
      objectArray0[8] = object8;
      String string0 = Utility.printArray(objectArray0);
      assertEquals(9, objectArray0.length);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte) (-28);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (-2131));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = "R,Uao";
      boolean boolean0 = false;
      try { 
        Utility.typeSignatureToString("R,Uao", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R,Uao'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = "|}*wVy@PN8\\NwR";
      String string1 = "/8Lp";
      try { 
        Utility.typeOfSignature("/8Lp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /8Lp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      int int0 = Utility.setBit(170, 21);
      assertEquals(2097322, int0);
      
      String string0 = Utility.compactClassName("if_icmpge");
      assertNotNull(string0);
      assertEquals("if_icmpge", string0);
      
      try { 
        Utility.typeOfSignature("/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = Utility.accessToString((-1201));
      assertNotNull(string0);
      assertEquals("public private protected static volatile native interface strictfp synthetic annotation enum module", string0);
      
      short short0 = Utility.searchOpcode("#CZDK/]");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[0];
      String string1 = Utility.encode(byteArray0, false);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = Utility.accessToString((-1201));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("public private protected static volatile native interface strictfp synthetic annotation enum module", string2);
      
      String string3 = Utility.convertString("public private protected static volatile native interface strictfp synthetic annotation enum module");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("public private protected static volatile native interface strictfp synthetic annotation enum module", string3);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "g\"zgL", "public private protected static volatile native interface strictfp synthetic annotation enum module", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      Utility.fillup("boolean", 65536, true, 'q');
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = "U}*6Vy@PN8\\NwR:";
      try { 
        Utility.typeOfSignature("U}*6Vy@PN8NwR:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U}*6Vy@PN8NwR:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = Utility.accessToString(167, false);
      assertNotNull(string0);
      assertEquals("public private protected synchronized transient", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte)40;
      String string1 = Utility.encode(byteArray0, false);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)66, (byte)65, (byte)61, (byte) (-33), (byte)40}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(string1);
      assertEquals("BA$3d$df$u", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('+');
      assertFalse(boolean0);
      
      int int0 = Utility.clearBit((-981), (-981));
      assertEquals((-3029), int0);
      
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 123, true, '&');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = Utility.accessToString((-239));
      assertNotNull(string0);
      assertEquals("public final native interface abstract strictfp synthetic annotation enum module", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-44);
      String string1 = Utility.toHexString(byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)49, (byte)0, (byte) (-44)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(string1);
      assertEquals("31 00 d4", string1);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)49, (byte)0, (byte) (-44)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-44);
      byteArray1[1] = (byte) (-44);
      byteArray1[2] = (byte)49;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)49;
      byteArray1[6] = (byte)49;
      byteArray1[7] = (byte)49;
      String string2 = Utility.encode(byteArray1, true);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-44), (byte) (-44), (byte)49, (byte)0, (byte)0, (byte)49, (byte)49, (byte)49}, byteArray1);
      assertEquals(8, byteArray1.length);
      assertNotNull(string2);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
      
      String string3 = Utility.convertString("+^*\"Q_7zY\"bihp[`2c3");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("+^*\\\"Q_7zY\\\"bihp[`2c3", string3);
      
      Constant[] constantArray0 = new Constant[0];
      try { 
        Utility.typeOfSignature("+^*\"Q_7zY\"bihp[`2c3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ^*\"Q_7zY\"bihp[`2c3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "UjL/?uHLEy;OF+";
      stringArray0[1] = "UjL/?uHLEy;OF+";
      stringArray0[2] = "UjL/?uHLEy;OF+";
      // Undeclared exception!
      try { 
        Utility.signatureToString("UjL/?uHLEy;OF+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UjL/?uHLEy;OF+'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("~G=i(Q.(Ku|l|.mF0&K", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q.(Ku|l|.mF0&K'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      int int0 = Utility.setBit(39, 39);
      assertEquals(167, int0);
      
      String string0 = "JY?@W#";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = Utility.typeSignatureToString("JY?@W#", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("long", string1);
      
      try { 
        Utility.methodSignatureArgumentTypes("JY?@W#", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: JY?@W#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      int int0 = (-107);
      try { 
        Utility.typeOfMethodSignature("(8lq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (8lq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      int int0 = 176;
      String string0 = Utility.classOrInterface(176);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      String string1 = Utility.compactClassName("class", false);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("class", string1);
      
      int int1 = 0;
      boolean boolean0 = Utility.isSet(0, 0);
      assertFalse(boolean0);
      
      String string2 = Utility.typeSignatureToString("T(Ei&!\"q;YXq", false);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("(Ei&!\"q", string2);
      
      String string3 = Utility.typeSignatureToString("LfKr;V", false);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("fKr", string3);
      
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = Utility.classOrInterface(176);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      String string1 = Utility.compactClassName("class", false);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("class", string1);
      
      boolean boolean0 = Utility.isSet(0, 0);
      assertFalse(boolean0);
      
      String string2 = Utility.typeSignatureToString("T(Ei&!\"q;YXq", false);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("(Ei&!\"q", string2);
      
      byte byte0 = Utility.typeOfSignature("JR0wiE-|");
      assertEquals((byte)11, byte0);
      
      String string3 = Utility.accessToString((int) (byte)11);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("public private static", string3);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("(Ei&!\"q", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ei&!\"q'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = Utility.compactClassName("8O\"OQ;|E7", true);
      assertNotNull(string0);
      assertEquals("8O\"OQ;|E7", string0);
      
      String string1 = Utility.classOrInterface(0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("class", string1);
      
      String[] stringArray0 = Constants.ATTRIBUTE_NAMES;
      assertEquals(17, stringArray0.length);
      assertNotNull(stringArray0);
      
      try { 
        Utility.typeOfSignature("8O\"OQ;|E7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8O\"OQ;|E7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = Utility.classOrInterface(176);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      String string1 = Utility.compactClassName("class", true);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("class", string1);
      
      boolean boolean0 = Utility.isSet(0, 0);
      assertFalse(boolean0);
      
      String string2 = Utility.typeSignatureToString("VT(Ei&!\"q;YXq", false);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("void", string2);
      
      String string3 = Utility.convertString("class");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("class", string3);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = true;
      String string0 = Utility.encode(byteArray0, true);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(string0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      int int0 = Utility.setBit((byte)0, 0);
      assertEquals(1, int0);
      
      String string1 = Utility.compactClassName("$l$8b$I$A$A$A$A$A$A$A");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      String string2 = Utility.toHexString(byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(string2);
      assertEquals("00 00 00 00", string2);
      
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1);
      
      String string0 = Utility.encode(byteArray0, true);
      assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(string0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      short short0 = Utility.searchOpcode("$l$8b$I$A$A$A$A$A$A$A");
      assertEquals((short) (-1), short0);
      
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = Utility.format((-2182), (-2182), false, '}');
      assertNotNull(string0);
      assertEquals("-2182", string0);
      
      String string1 = Utility.classOrInterface((-2182));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("interface", string1);
      
      String string2 = "2Iep.-i>l6i\\t5q(";
      String string3 = Utility.compactClassName("2Iep.-i>l6i\t5q(");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("2Iep.-i>l6i\t5q(", string3);
      
      String string4 = Utility.methodTypeToSignature("anewarray", (String[]) null);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("()Lanewarray;", string4);
      
      int int0 = Utility.setBit((-1615117923), (-1615117923));
      assertEquals((-1078247011), int0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Illegally nested brackets:");
      assertFalse(boolean0);
      
      String string5 = Utility.format((-220), (-1865), true, 'y');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("-220", string5);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte) (-16);
      String string6 = Utility.encode(byteArray0, false);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)48, (byte) (-93), (byte)35, (byte) (-16)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(string6);
      assertEquals("0$a3$p$f0", string6);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("anewarray", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `anewarray'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = "R,Uao";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("R,Uao", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = Utility.replace(".debug", ".debug", ".debug");
      assertNotNull(string0);
      assertEquals(".debug", string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string1 = Utility.accessToString(80);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("final volatile", string1);
      
      String string2 = Utility.classOrInterface(80);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("class", string2);
      
      char char0 = 'a';
      boolean boolean1 = Utility.isJavaIdentifierPart('a');
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "class";
      objectArray0[1] = (Object) ".debug";
      objectArray0[2] = (Object) ".debug";
      objectArray0[3] = (Object) "final volatile";
      objectArray0[4] = (Object) ".debug";
      objectArray0[5] = (Object) "final volatile";
      String string3 = Utility.printArray(objectArray0, true, true);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(6, objectArray0.length);
      assertNotNull(string3);
      assertEquals("{\"class\", \".debug\", \".debug\", \"final volatile\", \".debug\", \"final volatile\"}", string3);
      
      short short0 = Utility.searchOpcode("final volatile");
      assertEquals((short) (-1), short0);
      
      try { 
        Utility.decode("i2c", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Integer integer0 = new Integer(3434);
      assertNotNull(integer0);
      assertEquals(3434, (int)integer0);
      
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        Utility.signatureToString("ModulePackages");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ModulePackages'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.convertString("boolean");
      assertNotNull(string0);
      assertEquals("boolean", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte) (-88);
      byteArray0[7] = (byte)62;
      byteArray0[8] = (byte)62;
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString((byte) (-88));
      assertNotNull(constantString0);
      assertEquals((-88), constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      
      ConstantString constantString1 = new ConstantString(constantString0);
      assertTrue(constantString1.equals((Object)constantString0));
      assertNotNull(constantString1);
      assertEquals((-88), constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      assertEquals((-88), constantString1.getStringIndex());
      assertEquals((byte)8, constantString1.getTag());
      
      constantArray0[0] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantArray0.length);
      assertNotNull(constantPool1);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)62, 6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('K');
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)96;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-88);
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)115;
      byteArray0[7] = (byte)96;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)96, (int) (byte) (-88), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("p@v0JHosY!}99c-$", false);
      assertEquals(15, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0, true);
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)72;
      byteArray0[7] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)52, (byte)78, (byte) (-42), (byte)0, (byte)0, (byte)36, (byte)72, (byte)51}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)52, (byte)78, (byte) (-42), (byte)0, (byte)0, (byte)36, (byte)72, (byte)51}, byteArray0);
      assertEquals(0, constantArray0.length);
      assertEquals(8, byteArray0.length);
      assertNotNull(string1);
      assertEquals("caload", string1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      
      String string2 = Utility.compactClassName("zt{mSViAwBF&+,U7ZhH", "{java.lang.Object@3c3f9548, java.lang.Object@36e05df6}", false);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("zt{mSViAwBF&+,U7ZhH", string2);
      
      String string3 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new byte[] {(byte)52, (byte)78, (byte) (-42), (byte)0, (byte)0, (byte)36, (byte)72, (byte)51}, byteArray0);
      assertEquals(0, constantArray0.length);
      assertEquals(8, byteArray0.length);
      assertNotNull(string3);
      assertEquals("astore_3", string3);
      assertEquals(0, constantPool0.getLength());
      assertEquals(2, byteSequence0.getIndex());
      
      String string4 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)52, (byte)78, (byte) (-42), (byte)0, (byte)0, (byte)36, (byte)72, (byte)51}, byteArray0);
      assertEquals(0, constantArray0.length);
      assertEquals(8, byteArray0.length);
      assertNotNull(string4);
      assertEquals("<illegal opcode>", string4);
      assertEquals(0, constantPool0.getLength());
      assertEquals(3, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)25;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)65;
      byteArray0[8] = (byte)58;
      String string0 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte)103, (byte) (-2), (byte)51, (byte) (-56), (byte)82, (byte)25, (byte)3, (byte)65, (byte)58}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(string0);
      assertEquals("67 fe 33 c8 52 19 03 41 3a", string0);
      
      String string1 = "impdep1";
      short short0 = Utility.searchOpcode("impdep1");
      assertEquals((short)254, short0);
      
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)103, (byte) (-2), (byte)51, (byte) (-56), (byte)82, (byte)25, (byte)3, (byte)65, (byte)58}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean1);
      
      String string2 = Utility.replace("impdep1", "impdep1", "67 fe 33 c8 52 19 03 41 3a");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("67 fe 33 c8 52 19 03 41 3a", string2);
      
      boolean boolean2 = Utility.isJavaIdentifierPart('H');
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string3 = "private";
      try { 
        Utility.methodSignatureToString("private", "4ZH", "Q &y`QRzaG:zV[zY6~O", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: private
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      try { 
        Utility.methodSignatureArgumentTypes("anewarray", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: anewarray
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = " implements";
      String string1 = Utility.getSignature(" implements");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Limplements;", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('+');
      assertFalse(boolean0);
      
      int int0 = Utility.clearBit((-981), (-981));
      assertEquals((-3029), int0);
      
      String string2 = "";
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      int int0 = Utility.setBit((-4187), (-4187));
      assertEquals((-4187), int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "77r:/<5z";
      stringArray0[1] = "77r:/<5z";
      stringArray0[2] = "77r:/<5z";
      stringArray0[3] = "77r:/<5z";
      String string0 = Utility.methodTypeToSignature("77r:/<5z", stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string0);
      assertEquals("(L77r:/<5z;L77r:/<5z;L77r:/<5z;L77r:/<5z;)L77r:/<5z;", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-33);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-33), (int) (byte)98);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)98, (byte) (-33)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(string1);
      assertEquals("0:    fadd\n1:    <illegal opcode>\n", string1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      // Undeclared exception!
      Utility.replace("_wpC67Ed", "", "(L77r:/<5z;L77r:/<5z;L77r:/<5z;L77r:/<5z;)L77r:/<5z;");
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte) (-71);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)44, (byte)4, (byte)96, (byte)0, (byte)28, (byte)41, (byte)83, (byte) (-71)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("2UPw%L%I");
      assertNotNull(string0);
      assertEquals("2UPw%L%I", string0);
      
      String string1 = Utility.replace("G|N>mLC%8f&Kl", "G|N>mLC%8f&Kl", "2UPw%L%I");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("2UPw%L%I", string1);
      
      String string2 = Utility.getSignature("2UPw%L%I");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("L2UPw%L%I;", string2);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Object[] objectArray0 = new Object[19];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.convertString("([u!#`F vwzwH");
      assertNotNull(string0);
      assertEquals("([u!#`F vwzwH", string0);
      
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(constantPool0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantPool0.accept(emptyVisitor0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      int int0 = new Integer(0);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)24;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)24}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = Utility.isSet((-3399), 784);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      short short0 = Utility.searchOpcode("Neo!]b");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.compactClassName("Neo!]b", true);
      assertNotNull(string0);
      assertEquals("Neo!]b", string0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte)24;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) fileSystemHandling0;
      objectArray0[3] = (Object) fileSystemHandling0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "Neo!]b";
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) "Neo!]b";
      String string1 = Utility.printArray(objectArray0, false, false);
      assertFalse(string1.equals((Object)string0));
      assertEquals(8, objectArray0.length);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('\\');
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile("}");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "}";
      objectArray0[1] = (Object) "}";
      objectArray0[2] = (Object) mockPrintStream0;
      mockPrintStream0.flush();
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("}", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("}", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      
      objectArray0[3] = (Object) mockPrintStream0;
      boolean boolean1 = mockFile0.mkdirs();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("}", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("}", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      
      PrintStream printStream0 = mockPrintStream0.printf("}", objectArray0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals(4, objectArray0.length);
      assertNotNull(printStream0);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("}", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("}", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(1L, mockFile0.length());
      
      Utility.printArray(printStream0, objectArray0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals(4, objectArray0.length);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(128L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("}", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("}", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      
      String string0 = Utility.compactClassName("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      byte[] byteArray0 = Utility.decode("\nAttribute(s) = ", false);
      assertEquals(16, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string1 = Utility.signatureToString("V");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("void", string1);
      
      // Undeclared exception!
      try { 
        Utility.compactClassName("9,Q]J,[4::r", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      int int0 = 219;
      String string0 = Utility.accessToString(219, true);
      assertNotNull(string0);
      assertEquals("public private static final volatile transient", string0);
      
      String string1 = Utility.classOrInterface(219);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("class", string1);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      short short0 = Utility.searchOpcode(":");
      assertEquals((short) (-1), short0);
      
      String[] stringArray0 = new String[6];
      String string0 = "hk7";
      stringArray0[0] = "hk7";
      stringArray0[1] = ":";
      stringArray0[2] = "";
      stringArray0[3] = ":";
      stringArray0[4] = ":";
      stringArray0[5] = ":";
      String string1 = Utility.methodTypeToSignature("", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(6, stringArray0.length);
      assertNotNull(string1);
      assertEquals("(Lhk7;L:;L;L:;L:;L:;)L;", string1);
      
      byte[] byteArray0 = Utility.decode(":", false);
      assertArrayEquals(new byte[] {(byte)58}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String string0 = "7w,";
      String string1 = Utility.compactClassName("7w,", "7w,", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-30);
      byte byte0 = (byte)34;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-30);
      byteArray1[2] = (byte) (-30);
      byteArray1[3] = (byte) (-30);
      byteArray1[4] = (byte) (-30);
      byteArray1[5] = (byte) (-30);
      byteArray1[6] = (byte) (-30);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-30), (byte)34, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-30), (byte) (-30), (byte) (-30), (byte) (-30), (byte) (-30), (byte) (-30)}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(boolean0);
      
      char char0 = 'j';
      boolean boolean1 = Utility.isJavaIdentifierPart('j');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = Utility.isSet((byte) (-30), 3);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "[`%U";
      stringArray0[1] = "[`%U";
      stringArray0[2] = "[`%U";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[`%U", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal type: [`%U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      int int0 = Utility.setBit(745, 745);
      assertEquals(745, int0);
      
      String string0 = Utility.format(745, 745, true, '1');
      assertNotNull(string0);
      assertEqualsstring0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('5');
      assertTrue(boolean0);
      
      OutputStream outputStream0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
      
      byte[] byteArray0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      String string0 = Utility.accessToString((-1827), true);
      assertNotNull(string0);
      assertEquals("public protected static final volatile transient strictfp synthetic annotation enum module", string0);
      
      short short0 = Utility.searchOpcode(":");
      assertEquals((short) (-1), short0);
      
      int int0 = Utility.setBit(0, (short) (-1));
      assertEquals(Integer.MIN_VALUE, int0);
      
      String string1 = Utility.accessToString(Integer.MIN_VALUE, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = Utility.isSet(0, (-1827));
      assertFalse(boolean0);
      
      boolean boolean1 = Utility.isSet(Integer.MIN_VALUE, 0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = Utility.convertString("public protected static final volatile transient strictfp synthetic annotation enum module");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("public protected static final volatile transient strictfp synthetic annotation enum module", string2);
      
      String string3 = Utility.getSignature("public protected static final volatile transient strictfp synthetic annotation enum module");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("Lpublic;", string3);
      
      String string4 = Utility.convertString("public protected static final volatile transient strictfp synthetic annotation enum module");
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("public protected static final volatile transient strictfp synthetic annotation enum module", string4);
      
      short short1 = Utility.searchOpcode("");
      assertTrue(short1 == short0);
      assertEquals((short) (-1), short1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-102), (byte)12, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object3));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object2));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object1));
      assertNotNull(object6);
      
      objectArray0[6] = object6;
      Object object7 = new Object();
      assertFalse(object7.equals((Object)object1));
      assertFalse(object7.equals((Object)object2));
      assertFalse(object7.equals((Object)object3));
      assertFalse(object7.equals((Object)object6));
      assertFalse(object7.equals((Object)object5));
      assertFalse(object7.equals((Object)object0));
      assertFalse(object7.equals((Object)object4));
      assertNotNull(object7);
      
      objectArray0[7] = object7;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertEquals(8, objectArray0.length);
      assertNotNull(string0);
      
      short short0 = Utility.searchOpcode("java.lang.Object@fd40f93, java.lang.Object@76d23684, java.lang.Object@3ec9b57, java.lang.Object@627354ac, java.lang.Object@4df477e6, java.lang.Object@2af51eca, java.lang.Object@4d241ee0, java.lang.Object@358af5dc");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-3);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-32), (byte) (-3)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean0);
      
      String string1 = ">\t";
      String string2 = "^dT";
      String string3 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(">\t", "^dT", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object1));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object4));
      assertNotNull(object6);
      
      objectArray0[6] = object6;
      Object object7 = new Object();
      assertFalse(object7.equals((Object)object3));
      assertFalse(object7.equals((Object)object2));
      assertFalse(object7.equals((Object)object1));
      assertFalse(object7.equals((Object)object6));
      assertFalse(object7.equals((Object)object0));
      assertFalse(object7.equals((Object)object4));
      assertFalse(object7.equals((Object)object5));
      assertNotNull(object7);
      
      objectArray0[7] = object7;
      Object object8 = new Object();
      assertFalse(object8.equals((Object)object3));
      assertFalse(object8.equals((Object)object6));
      assertFalse(object8.equals((Object)object0));
      assertFalse(object8.equals((Object)object4));
      assertFalse(object8.equals((Object)object5));
      assertFalse(object8.equals((Object)object7));
      assertFalse(object8.equals((Object)object1));
      assertFalse(object8.equals((Object)object2));
      assertNotNull(object8);
      
      objectArray0[8] = object8;
      String string0 = Utility.printArray(objectArray0);
      assertEquals(9, objectArray0.length);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte) (-28);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (-2131));
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-92), (byte)0, (byte) (-70), (byte)0, (byte)92, (byte)65, (byte) (-28)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(string1);
      assertEquals("0:    if_icmple\t\t#186\n3:    nop\n4:    dup2\n5:    lstore_2\n6:    <illegal opcode>\n", string1);
      assertEquals(0, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null, true);
      assertNull(string0);
      
      try { 
        Utility.typeSignatureToString("false", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `false'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String string0 = "3=(E6PEJ4PKr=-";
      try { 
        Utility.typeOfSignature("3=(E6PEJ4PKr=-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3=(E6PEJ4PKr=-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      String string0 = "GV-R#";
      boolean boolean0 = true;
      try { 
        Utility.typeSignatureToString("GV-R#", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GV-R#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      int int0 = 0;
      String string0 = Utility.fillup("Ca;!c=g", 0, true, '3');
      assertNotNull(string0);
      assertEquals("Ca;!c=g", string0);
      
      String string1 = Utility.accessToString(0, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Grgs(s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Grgs(s'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      String string0 = Utility.accessToString(0, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      String string0 = Utility.getSignature("class");
      assertNotNull(string0);
      assertEquals("Lclass;", string0);
      
      String string1 = Utility.getSignature("");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("L;", string1);
      
      short short0 = Utility.searchOpcode("Lclass;");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)0;
      byte byte0 = (byte)111;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)46;
      String string2 = Utility.encode(byteArray0, false);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)90, (byte) (-24), (byte)0, (byte)111, (byte)46, (byte)46}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(string2);
      assertEquals("Z$e8$Ao$$$$", string2);
      
      String string3 = Utility.replace("2:ND?zY\"|dM", "Lclass;", "2:ND?zY\"|dM");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("2:ND?zY\"|dM", string3);
      
      String string4 = "";
      boolean boolean0 = true;
      int int0 = 187;
      File file0 = MockFile.createTempFile("\fAs", "class");
      assertNotNull(file0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("\fAs0class", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/\fAs0class", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(file0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      String string0 = ";~9h`<rjm~T";
      try { 
        Utility.decode(";~9h`<rjm~T", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-125);
      String string0 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte)59, (byte) (-125)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(string0);
      assertEquals("3b 83", string0);
      
      String string1 = Utility.accessToString(16384, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("enum", string1);
      
      boolean boolean0 = Utility.isSet((byte) (-125), (byte)59);
      assertTrue(boolean0);
      
      PrintStream printStream0 = null;
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0, true, false);
      assertEquals(1, objectArray0.length);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[0];
      ConstantPool constantPool0 = null;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, 0, 0);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = Utility.compactClassName("", true);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      try { 
        Utility.typeOfSignature("synchronized");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: synchronized
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object1));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object3));
      assertNotNull(object6);
      
      objectArray0[6] = object6;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertEquals(7, objectArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      int int0 = (-5431);
      String string0 = Utility.accessToString((-5431));
      assertNotNull(string0);
      assertEquals("public static volatile transient interface strictfp annotation enum module", string0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("public static volatile transient interface strictfp annotation enum module", "*yMz9o'CebAKkR", "public static volatile transient interface strictfp annotation enum module", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public static volatile transient interface strictfp annotation enum module
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-107);
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte) (-91);
      byteArray0[8] = (byte)10;
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)5;
      byteArray1[1] = (byte)37;
      byteArray1[2] = (byte)32;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)41, (byte) (-30), (byte)37, (byte) (-58), (byte)5, (byte) (-107), (byte)32, (byte) (-91), (byte)10}, byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte)37, (byte)32}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("Warning: Padding byte != 0 in ", (String[]) null);
      assertNotNull(string0);
      assertEquals("()LWarning:;", string0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(" c]xs6-8bQx<]v$).", (String) null, "a)Km6K<]y0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  c]xs6-8bQx<]v$).
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('\\');
      assertFalse(boolean0);
      
      String string0 = "";
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.typeSignatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      String string0 = Utility.accessToString(2947);
      assertNotNull(string0);
      assertEquals("public private transient native interface strictfp", string0);
      
      int int0 = 3960;
      String string1 = Utility.format(2947, 3960, true, '&');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.compactClassName("y,PL-j`w4iY");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("y,PL-j`w4iY", string2);
      
      boolean boolean0 = true;
      String string3 = Utility.accessToString(572, true);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("protected static final", string3);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "y,PL-j`w4iY";
      String string4 = Utility.printArray(objectArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals(1, objectArray0.length);
      assertNotNull(string4);
      assertEquals("{y,PL-j`w4iY}", string4);
      
      String string5 = Utility.accessToString((-2039), true);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("public static strictfp synthetic annotation enum module", string5);
      
      short short0 = Utility.searchOpcode("public static strictfp synthetic annotation enum module");
      assertEquals((short) (-1), short0);
      
      String string6 = Utility.replace("protected static final", "protected static final", "x4>+=7:P8xQ_:{(qP");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("x4>+=7:P8xQ_:{(qP", string6);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("dstore", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dstore'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      String string0 = " implements ";
      // Undeclared exception!
      try { 
        Utility.signatureToString(" implements ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` implements '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      int int0 = Utility.setBit(0, 0);
      assertEquals(1, int0);
      
      String string0 = "u[u";
      String string1 = Utility.convertString("u[u");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("u[u", string1);
      
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
      
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = Utility.accessToString(0, true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      String string0 = Utility.accessToString(0, true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)56;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)56}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
      
      String string1 = Utility.classOrInterface((byte)56);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("class", string1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("class", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('z');
      assertTrue(boolean0);
      
      String string0 = "[v|4&5";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "[v|4&5";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[v|4&5", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal type: [v|4&5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      String string0 = Utility.classOrInterface(547);
      assertNotNull(string0);
      assertEquals("interface", string0);
      
      String string1 = "l\\BV(S8J~>zy?K";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("lBV(S8J~>zy?K", "19*5 8V[V", "1k@t)P L", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `8J~>zy?K'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "@fmV1,", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Invalid Stack map table tag: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `nvalid Stack map table tag: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      String string0 = "W";
      String string1 = "";
      String string2 = "7-`r0qU tC{f#Bk";
      // Undeclared exception!
      Utility.replace("W", "", "7-`r0qU tC{f#Bk");
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-33);
      byte byte0 = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)0;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-33), (byte)81, (byte) (-86), (byte)44, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertTrue(boolean0);
      
      String string0 = "From\tTo\tHandler\tType\n";
      byte byte1 = Utility.typeOfSignature("From\tTo\tHandler\tType\n");
      assertFalse(byte1 == byte0);
      assertEquals((byte)6, byte1);
      
      boolean boolean1 = false;
      try { 
        Utility.methodSignatureArgumentTypes("From\tTo\tHandler\tType\n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: From\tTo\tHandler\tType
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      int int0 = (-107);
      String string0 = Utility.classOrInterface((-107));
      assertNotNull(string0);
      assertEquals("interface", string0);
      
      try { 
        Utility.typeOfSignature("(8lq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (8lq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null, false, true);
      assertNull(string0);
      
      int int0 = 91;
      int int1 = Utility.clearBit(91, 91);
      assertTrue(int1 == int0);
      assertEquals(91, int1);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      String string0 = Utility.format(97, 97, false, 'b');
      assertNotNull(string0);
      assertEquals("bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb97", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)95;
      String string1 = Utility.encode(byteArray0, false);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)36, (byte) (-19), (byte)95}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(string1);
      assertEquals("$q$ed_", string1);
      
      try { 
        Utility.typeSignatureToString("$q$ed_", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$q$ed_'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      String string0 = "";
      String string1 = "iDF_*2DsF()G^f4t/";
      boolean boolean0 = true;
      String string2 = Utility.compactClassName("", "iDF_*2DsF()G^f4t/", true);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      String string0 = Utility.getSignature("");
      assertNotNull(string0);
      assertEquals("L;", string0);
      
      String string1 = Utility.convertString("L;");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("L;", string1);
      
      byte[] byteArray0 = new byte[0];
      String string2 = Utility.encode(byteArray0, true);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(string2);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
      
      int int0 = Utility.setBit((-105), (-105));
      assertEquals((-105), int0);
      
      String string3 = Utility.convertString("");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String string0 = Utility.compactClassName("@/|YTX^Cz$t4@X~R/X");
      assertNotNull(string0);
      assertEquals("@.|YTX^Cz$t4@X~R.X", string0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String string0 = Utility.format(0, 0, false, 'H');
      assertNotNull(string0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      int int0 = Utility.setBit(0, 0);
      assertEquals(1, int0);
      
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object1));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertEquals(6, objectArray0.length);
      assertNotNull(string0);
      
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(6, objectArray0.length);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "{java.lang.Object@5c8b2f75, java.lang.Object@2ff08c42, java.lang.Object@5c9e85fd, java.lang.Object@49e6da00, java.lang.Object@4c93b4ce, java.lang.Object@67aab382}";
      stringArray0[1] = "{java.lang.Object@5c8b2f75, java.lang.Object@2ff08c42, java.lang.Object@5c9e85fd, java.lang.Object@49e6da00, java.lang.Object@4c93b4ce, java.lang.Object@67aab382}";
      stringArray0[2] = "r+vd0z.1l-[NPvm|0=";
      stringArray0[3] = "{java.lang.Object@5c8b2f75, java.lang.Object@2ff08c42, java.lang.Object@5c9e85fd, java.lang.Object@49e6da00, java.lang.Object@4c93b4ce, java.lang.Object@67aab382}";
      stringArray0[4] = "";
      stringArray0[5] = "java.lang.Object@5c8b2f75, java.lang.Object@2ff08c42, java.lang.Object@5c9e85fd, java.lang.Object@49e6da00, java.lang.Object@4c93b4ce, java.lang.Object@67aab382";
      stringArray0[6] = "{java.lang.Object@5c8b2f75, java.lang.Object@2ff08c42, java.lang.Object@5c9e85fd, java.lang.Object@49e6da00, java.lang.Object@4c93b4ce, java.lang.Object@67aab382}";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("{java.lang.Object@5c8b2f75, java.lang.Object@2ff08c42, java.lang.Object@5c9e85fd, java.lang.Object@49e6da00, java.lang.Object@4c93b4ce, java.lang.Object@67aab382}", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegally nested brackets:[NPvm|0=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("'[U74/E?geS'1BX{m");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegally nested brackets:[U74/E?geS'1BX{m
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) "=nCt";
      objectArray0[2] = (Object) "=nCt";
      objectArray0[3] = (Object) "=nCt";
      String string0 = Utility.printArray(objectArray0);
      assertEquals(5, objectArray0.length);
      assertNotNull(string0);
      assertEquals("{null, =nCt, =nCt, =nCt, null}", string0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      String string0 = "Kl`I9JWL~)^\"R~5eo";
      short short0 = Utility.searchOpcode("Kl`I9JWL~)^\"R~5eo");
      assertEquals((short) (-1), short0);
      
      int int0 = 2945;
      String string1 = Utility.accessToString(2945, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("public transient native strictfp", string1);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("v#,i~Sc", "Kl`I9JWL~)^\"R~5eo", "public transient native strictfp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: v#,i~Sc
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      String string0 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte)10, (byte)16, (byte) (-94), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(string0);
      assertEquals("0a 10 a2 00 00 00", string0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0a 10 a2 00 00 00");
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "0a 10 a2 00 00 00");
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      assertFalse(mockPrintWriter1.equals((Object)printWriter0));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertNotNull(mockPrintWriter1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte) (-94);
      objectArray0[1] = (Object) "0a 10 a2 00 00 00";
      objectArray0[2] = (Object) printWriter0;
      objectArray0[3] = (Object) (byte) (-94);
      objectArray0[4] = (Object) (byte) (-94);
      Utility.printArray((PrintWriter) mockPrintWriter1, objectArray0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotSame(printWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter1, printWriter0);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(printWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)printWriter0));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      assertNotNull(mockPrintWriter0);
      
      String string0 = Utility.accessToString(229);
      assertNotNull(string0);
      assertEquals("public protected synchronized volatile transient", string0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "public protected synchronized volatile transient");
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertTrue(mockFile0.canRead());
      assertEquals("foo.bar", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals("/tmp", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) "public protected synchronized volatile transient";
      Utility.printArray(printWriter0, objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(2, objectArray0.length);
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertTrue(mockFile0.canRead());
      assertEquals("foo.bar", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals("/tmp", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "public protected synchronized volatile transient";
      stringArray0[1] = "public protected synchronized volatile transient";
      stringArray0[2] = "public protected synchronized volatile transient";
      stringArray0[3] = "public protected synchronized volatile transient";
      stringArray0[4] = "public protected synchronized volatile transient";
      stringArray0[5] = "public protected synchronized volatile transient";
      stringArray0[6] = "public protected synchronized volatile transient";
      String string1 = Utility.methodTypeToSignature("public protected synchronized volatile transient", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(7, stringArray0.length);
      assertNotNull(string1);
      assertEquals("(Lpublic;Lpublic;Lpublic;Lpublic;Lpublic;Lpublic;Lpublic;)Lpublic;", string1);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('e');
      assertTrue(boolean0);
      
      String string0 = "[a?&A%7=|";
      try { 
        Utility.methodSignatureArgumentTypes("[a?&A%7=|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: [a?&A%7=|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      String string0 = "p$|.";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("p$|.", "p$|.", "p$|.", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: p$|.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String string0 = Utility.convertString("org.apache.bcel.classfile.Utility");
      assertNotNull(string0);
      assertEquals("org.apache.bcel.classfile.Utility", string0);
      
      int int0 = Utility.setBit((-1480), (-1480));
      assertEquals((-1480), int0);
      
      String string1 = Utility.fillup("org.apache.bcel.classfile.Utility", (-1480), true, '#');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.apache.bcel.classfile.Utility", string1);
      
      try { 
        Utility.methodSignatureArgumentTypes("Vg", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Vg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      String string0 = Utility.convertString("e>Qz<u");
      assertNotNull(string0);
      assertEquals("e>Qz<u", string0);
      
      byte[] byteArray0 = Utility.decode("Ym", false);
      assertArrayEquals(new byte[] {(byte)89, (byte)109}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ym");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ym'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(")j", false);
      assertArrayEquals(new byte[] {(byte)41, (byte)106}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      String string0 = Utility.fillup("$4b>(y", 280, true, 'e');
      assertNotNull(string0);
      assertEquals("$4b>(yeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", string0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      short short0 = Utility.searchOpcode("3xqsxq0%N0!@J");
      assertEquals((short) (-1), short0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.apache.bcel.classfile.MethodParameters";
      stringArray0[1] = "org.apache.bcel.classfile.MethodParameters";
      stringArray0[2] = "org.apache.bcel.classfile.MethodParameters";
      stringArray0[3] = "3xqsxq0%N0!@J";
      stringArray0[4] = "3xqsxq0%N0!@J";
      stringArray0[5] = "org.apache.bcel.classfile.MethodParameters";
      stringArray0[6] = "org.apache.bcel.classfile.MethodParameters";
      stringArray0[7] = "3xqsxq0%N0!@J";
      stringArray0[8] = "org.apache.bcel.classfile.MethodParameters";
      String string0 = Utility.methodTypeToSignature("org.apache.bcel.classfile.MethodParameters", stringArray0);
      assertEquals(9, stringArray0.length);
      assertNotNull(string0);
      assertEquals("(Lorg/apache/bcel/classfile/MethodParameters;Lorg/apache/bcel/classfile/MethodParameters;Lorg/apache/bcel/classfile/MethodParameters;L3xqsxq0%N0!@J;L3xqsxq0%N0!@J;Lorg/apache/bcel/classfile/MethodParameters;Lorg/apache/bcel/classfile/MethodParameters;L3xqsxq0%N0!@J;Lorg/apache/bcel/classfile/MethodParameters;)Lorg/apache/bcel/classfile/MethodParameters;", string0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      String string0 = "";
      String string1 = Utility.compactClassName("", false);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      try { 
        Utility.methodSignatureArgumentTypes("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      String string0 = Utility.getSignature("");
      assertNotNull(string0);
      assertEquals("L;", string0);
      
      String string1 = Utility.replace("", "oM8W", "L;");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = Utility.convertString("L;");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("L;", string2);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      assertNotNull(filterOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0, false);
      assertNotNull(mockPrintStream0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "L;";
      objectArray0[3] = (Object) byteArrayOutputStream0;
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals(4, objectArray0.length);
      assertNotNull(printStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      assertEquals(4, objectArray0.length);
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "", 256, 106);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = "Yx 9q/J";
      try { 
        Utility.typeOfSignature("Yx 9q/J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Yx 9q/J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String string0 = Utility.accessToString(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = "";
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = Utility.accessToString((-239));
      assertNotNull(string0);
      assertEquals("public final native interface abstract strictfp synthetic annotation enum module", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-44);
      String string1 = Utility.toHexString(byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)49, (byte)0, (byte) (-44)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(string1);
      assertEquals("31 00 d4", string1);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)49, (byte)0, (byte) (-44)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-44);
      byteArray1[1] = (byte) (-44);
      byteArray1[2] = (byte)49;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)49;
      byteArray1[6] = (byte)49;
      byteArray1[7] = (byte)49;
      String string2 = Utility.encode(byteArray1, true);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-44), (byte) (-44), (byte)49, (byte)0, (byte)0, (byte)49, (byte)49, (byte)49}, byteArray1);
      assertEquals(8, byteArray1.length);
      assertNotNull(string2);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
      
      String string3 = Utility.convertString("+^*\"Q_7zY\"bihp[`2c3");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("+^*\\\"Q_7zY\\\"bihp[`2c3", string3);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string4 = constantPool0.toString();
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals(0, constantArray0.length);
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)49, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      int int0 = Utility.clearBit(0, 0);
      assertEquals(0, int0);
      
      String string0 = Utility.fillup("<M$g", 0, false, ';');
      assertNotNull(string0);
      assertEquals("<M$g", string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, false);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, objectArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)11;
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(371);
      assertNotNull(constantMethodType0);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(371, constantMethodType0.getDescriptorIndex());
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertNotNull(constantMethodType1);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(371, constantMethodType0.getDescriptorIndex());
      assertEquals(371, constantMethodType1.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      assertNotNull(constantFloat0);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(0.0F, constantFloat0.getBytes(), 0.01F);
      
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(2, constantArray0.length);
      assertNotNull(constantPool1);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)18, 4261, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 97. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      String string0 = Utility.convertString("'P.$t");
      assertNotNull(string0);
      assertEquals("\\'P.$t", string0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String string0 = Utility.replace("dup_x2", "dup_x2", "?");
      assertNotNull(string0);
      assertEquals("?", string0);
      
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("short", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: short
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      try { 
        Utility.typeOfSignature(" r`5{6RM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  r`5{6RM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.classOrInterface(0);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      try { 
        Utility.methodSignatureReturnType("class", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte) (-46);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-112), (byte)31, (byte)97, (byte) (-46)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertTrue(boolean0);
      
      String string0 = Utility.encode(byteArray0, true);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-112), (byte)31, (byte)97, (byte) (-46)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(string0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String string0 = Utility.accessToString(11);
      assertNotNull(string0);
      assertEquals("public private static", string0);
      
      try { 
        Utility.typeOfMethodSignature("KlW?I ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KlW?I 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      int int0 = (-42);
      int int1 = 2549;
      int int2 = Utility.clearBit((-42), 2549);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-2097194), int2);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      String string0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.typeSignatureToString("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-33);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)3, (byte)0, (byte)2, (byte) (-33)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      String string0 = Utility.typeSignatureToString("ZE##3W;:Zz643(C", true);
      assertNotNull(string0);
      assertEquals("boolean", string0);
      
      int int0 = Utility.setBit(0, 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-1541), 559);
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfMethodSignature("#& )r/l%Jb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #& )r/l%Jb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      String string1 = Utility.printArray(objectArray0, true);
      assertEquals(2, objectArray0.length);
      assertNotNull(string1);
      assertEquals("{null, null}", string1);
      
      int int0 = Utility.clearBit(1637, 7);
      assertEquals(1637, int0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      String string0 = "";
      byte[] byteArray0 = Utility.decode("", false);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('(');
      assertFalse(boolean0);
      
      String string1 = "\t(wide)";
      boolean boolean1 = true;
      try { 
        Utility.methodSignatureReturnType("\t(wide)", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString(">'C{\"'$!", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `>'C{\"'$!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      String string0 = Utility.compactClassName("    ", "    ", false);
      assertNotNull(string0);
      assertEquals("    ", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "    ";
      stringArray0[1] = "    ";
      stringArray0[2] = "    ";
      stringArray0[3] = "    ";
      String string1 = Utility.methodTypeToSignature("    ", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, stringArray0.length);
      assertNotNull(string1);
      assertEquals("(L;L;L;L;)L;", string1);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String string0 = Utility.getSignature("r!,2p|wz");
      assertNotNull(string0);
      assertEquals("Lr!,2p|wz;", string0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String string0 = Utility.methodTypeToSignature("", stringArray0);
      assertEquals(5, stringArray0.length);
      assertNotNull(string0);
      assertEquals("(L;L;L;L;L;)L;", string0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      String string0 = Utility.compactClassName("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      String string0 = Utility.accessToString(0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = Utility.classOrInterface(0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("class", string1);
      
      String string2 = Utility.classOrInterface(45);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("class", string2);
      
      String string3 = "hElXh{9W~ 'U\\CTQ0";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("hElXh{9W~ 'UCTQ0", "float");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // float
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      boolean boolean0 = Utility.isSet(14, 14);
      //  // Unstable assertion: assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile(",|0");
      //  // Unstable assertion: assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      //  // Unstable assertion: assertNotNull(mockPrintStream0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ";1T_~#STXf~nn<yY=f";
      objectArray0[1] = (Object) ";1T_~#STXf~nn<yY=f";
      Object object0 = new Object();
      //  // Unstable assertion: assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) ";1T_~#STXf~nn<yY=f";
      objectArray0[5] = (Object) ",|0";
      PrintStream printStream0 = mockPrintStream0.format(";1T_~#STXf~nn<yY=f", objectArray0);
      //  // Unstable assertion: assertSame(mockPrintStream0, printStream0);
      //  // Unstable assertion: assertSame(printStream0, mockPrintStream0);
      //  // Unstable assertion: assertEquals(6, objectArray0.length);
      //  // Unstable assertion: assertNotNull(printStream0);
      //  // Unstable assertion: assertFalse(mockFile0.isDirectory());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals(",|0", mockFile0.toString());
      //  // Unstable assertion: assertFalse(mockFile0.isAbsolute());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertEquals(18L, mockFile0.length());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals(",|0", mockFile0.getName());
      //  // Unstable assertion: assertTrue(mockFile0.isFile());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canRead());
      
      Utility.printArray(printStream0, objectArray0);
      //  // Unstable assertion: assertSame(mockPrintStream0, printStream0);
      //  // Unstable assertion: assertSame(printStream0, mockPrintStream0);
      //  // Unstable assertion: assertEquals(6, objectArray0.length);
      //  // Unstable assertion: assertFalse(mockFile0.isDirectory());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals(",|0", mockFile0.toString());
      //  // Unstable assertion: assertFalse(mockFile0.isAbsolute());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals(",|0", mockFile0.getName());
      //  // Unstable assertion: assertTrue(mockFile0.isFile());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canRead());
      //  // Unstable assertion: assertEquals(170L, mockFile0.length());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-51), (byte) (-86), (byte) (-113), (byte) (-113), (byte) (-77)}, byteArray0);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertNotNull(byteSequence0);
      //  // Unstable assertion: assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-51), (byte) (-86), (byte) (-113), (byte) (-113), (byte) (-77)}, byteArray0);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("<illegal opcode>", string0);
      //  // Unstable assertion: assertEquals(1, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-19);
      String string0 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-19)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(string0);
      assertEquals("ed", string0);
      
      boolean boolean0 = Utility.isSet(95, 95);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte) (-19);
      String string1 = Utility.printArray(objectArray0, false);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, objectArray0.length);
      assertNotNull(string1);
      assertEquals("-19", string1);
      
      try { 
        Utility.methodSignatureArgumentTypes("-19", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -19
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("iinc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iinc
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      String string0 = Utility.accessToString(91, false);
      assertNotNull(string0);
      assertEquals("public private static final volatile", string0);
      
      String string1 = Utility.classOrInterface(91);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("class", string1);
      
      int int0 = 1044;
      String string2 = Utility.accessToString(1044);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("protected final abstract", string2);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('E');
      assertTrue(boolean0);
      
      File file0 = MockFile.createTempFile("|0HV](b!ucDzm Ai,:X", "|0HV](b!ucDzm Ai,:X");
      assertNotNull(file0);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("|0HV](b!ucDzm Ai,:X0|0HV](b!ucDzm Ai,:X", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/|0HV](b!ucDzm Ai,:X0|0HV](b!ucDzm Ai,:X", file0.toString());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      assertNotNull(mockPrintStream0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) "public private static final volatile";
      objectArray0[2] = (Object) "class";
      objectArray0[3] = (Object) "|0HV](b!ucDzm Ai,:X";
      PrintStream printStream0 = mockPrintStream0.format("public private static final volatile", objectArray0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals(4, objectArray0.length);
      assertNotNull(printStream0);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("|0HV](b!ucDzm Ai,:X0|0HV](b!ucDzm Ai,:X", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(36L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/|0HV](b!ucDzm Ai,:X0|0HV](b!ucDzm Ai,:X", file0.toString());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      assertFalse(mockPrintStream1.equals((Object)printStream0));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertEquals(4, objectArray0.length);
      assertNotNull(mockPrintStream1);
      
      Utility.printArray((PrintStream) mockPrintStream1, objectArray0);
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotSame(printStream0, mockPrintStream1);
      assertNotSame(mockPrintStream1, printStream0);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(printStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)printStream0));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertEquals(4, objectArray0.length);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("|0HV](b!ucDzm Ai,:X0|0HV](b!ucDzm Ai,:X", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(149L, file0.length());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/|0HV](b!ucDzm Ai,:X0|0HV](b!ucDzm Ai,:X", file0.toString());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      
      short short0 = Utility.searchOpcode("protected final abstract");
      assertEquals((short) (-1), short0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertNotNull(mockPrintWriter0);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try { 
        mockPrintWriter0.printf(locale0, "Px#qg2_%DI>-\u0003b]", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'D'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-2039), (-2039));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)11}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)11}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(constantPool0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)11}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(constantPool1);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      
      String string0 = Utility.codeToString(byteArray0, constantPool1, 0, 378, false);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)11}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    nop\n2:    fconst_0\n", string0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      
      String string1 = null;
      String string2 = "(!+|Qwt]v,6g$";
      boolean boolean0 = true;
      Method method0 = new Method(0, (byte)11, (byte)11, (Attribute[]) null, constantPool1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)11}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(method0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertFalse(method0.isPublic());
      assertFalse(method0.isSynchronized());
      assertFalse(method0.isInterface());
      assertFalse(method0.isVolatile());
      assertEquals(0, method0.getModifiers());
      assertFalse(method0.isStatic());
      assertFalse(method0.isFinal());
      assertFalse(method0.isAnnotation());
      assertFalse(method0.isNative());
      assertFalse(method0.isSynthetic());
      assertFalse(method0.isEnum());
      assertFalse(method0.isProtected());
      assertFalse(method0.isPrivate());
      assertFalse(method0.isStrictfp());
      assertFalse(method0.isVarArgs());
      assertEquals(11, method0.getSignatureIndex());
      assertFalse(method0.isAbstract());
      assertEquals(11, method0.getNameIndex());
      assertEquals(0, method0.getAccessFlags());
      assertFalse(method0.isTransient());
      
      // Undeclared exception!
      try { 
        method0.getLocalVariableTable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Method", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[3];
      ConstantModule constantModule0 = new ConstantModule(0);
      assertNotNull(constantModule0);
      assertEquals(0, constantModule0.getNameIndex());
      assertEquals((byte)19, constantModule0.getTag());
      
      constantArray0[0] = (Constant) constantModule0;
      ConstantLong constantLong0 = new ConstantLong(0L);
      assertNotNull(constantLong0);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(0L, constantLong0.getBytes());
      
      constantArray0[1] = (Constant) constantLong0;
      ConstantModule constantModule1 = new ConstantModule(constantModule0);
      assertTrue(constantModule1.equals((Object)constantModule0));
      assertNotNull(constantModule1);
      assertEquals(0, constantModule0.getNameIndex());
      assertEquals((byte)19, constantModule0.getTag());
      assertEquals((byte)19, constantModule1.getTag());
      assertEquals(0, constantModule1.getNameIndex());
      
      constantArray0[2] = (Constant) constantModule1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      String string0 = Utility.classOrInterface(257);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("gT;5\"E[", "", "gT;5\"E[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: gT;5\"E[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      String string0 = Utility.accessToString((-1422));
      assertNotNull(string0);
      assertEquals("private final synchronized volatile interface strictfp synthetic annotation enum module", string0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("W]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byteArray0[2] = (byte)54;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[3] = (byte)84;
      String string0 = "a?YR73IS@";
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a?YR73IS@");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)50;
      ConstantPool constantPool0 = null;
      String string1 = Utility.getSignature("a?YR73IS@");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("La?YR73IS@;", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)50, (byte)0, (byte)54, (byte)84, (byte) (-75), (byte)50}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      int int0 = byteSequence0.readUnsignedShort();
      assertArrayEquals(new byte[] {(byte)50, (byte)0, (byte)54, (byte)84, (byte) (-75), (byte)50}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(12800, int0);
      assertEquals(2, byteSequence0.getIndex());
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)50, (byte)0, (byte)54, (byte)84, (byte) (-75), (byte)50}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(string2);
      assertEquals("istore\t\t%84", string2);
      assertEquals(4, byteSequence0.getIndex());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)54, (-1280), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("PmLr6MLbP)h(f+'~6[E3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegally nested brackets:[E3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      String string0 = "Ch@`Ya,O[[G4TV";
      // Undeclared exception!
      try { 
        Utility.getSignature("Ch@`Ya,O[[G4TV");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegally nested brackets:[[G4TV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      String string0 = Utility.convertString(", high = ");
      assertNotNull(string0);
      assertEquals(", high = ", string0);
      
      short short0 = Utility.searchOpcode(", high = ");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte) (-57);
      byteArray0[7] = (byte) (-112);
      byteArray0[8] = (byte)80;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, 11, (-2186), false);
      assertFalse(string1.equals((Object)string0));
      assertEquals(24, byteArray0.length);
      assertNotNull(string1);
      assertEquals("14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n21:   nop\n22:   nop\n23:   nop\n", string1);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertEquals(24, byteArray0.length);
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature("Ul7A>#3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ul7A>#3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      String string0 = Utility.fillup(" ;EyuQj", 32, false, 'S');
      assertNotNull(string0);
      assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSS ;EyuQj", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)25;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte)26;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)91, (-691));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-90);
      byteArray0[5] = (byte)42;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)31, (-3560));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-105), (byte) (-36), (byte)63, (byte) (-79), (byte)104, (byte)97, (byte)95, (byte)58}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-889275714), (-1033));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dcmpl
         // 1:    <illegal opcode>
         // 2:    lstore_0
         // 3:    return
         // 4:    imul
         // 5:    ladd
         // 6:    swap
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Byte code error: ");
      assertEquals((byte)8, byte0);
      
      short short0 = Utility.searchOpcode("java.lang.Byte");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      String string0 = Utility.encode(byteArray0, true);
      assertArrayEquals(new byte[] {(byte)8}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(string0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      int int0 = Utility.clearBit(187, 187);
      assertEquals(187, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-56);
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)93;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte) (-71);
      byteArray0[7] = (byte)23;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 197, (int) (byte)93, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[3] = (byte)3;
      byteArray0[5] = (byte)3;
      String string0 = Utility.classOrInterface((byte) (-121));
      assertNotNull(string0);
      assertEquals("interface", string0);
      
      String string1 = Utility.compactClassName("a.^!Lv}H\">Ai#]e)::<");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("a.^!Lv}H\">Ai#]e)::<", string1);
      
      String string2 = Utility.typeSignatureToString("C%l?)>LN^?", true);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("char", string2);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "a.^!Lv}H\">Ai#]e)::<";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "char";
      String string3 = Utility.printArray(objectArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(5, objectArray0.length);
      assertNotNull(string3);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "a.^!Lv}H\">Ai#]e)::<";
      String string4 = Utility.methodTypeToSignature("C%l?)>LN^?", stringArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals(1, stringArray0.length);
      assertNotNull(string4);
      assertEquals("(La/^!Lv}H\">Ai#]e)::<;)LC%l?)>LN^?;", string4);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(La/^!Lv}H\">Ai#]e)::<;)LC%l?)>LN^?;", "a.^!Lv}H\">Ai#]e)::<", "G6ES", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `;)LC%l?)>LN^?;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)14;
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)3, (byte)42, (byte) (-69), (byte) (-69), (byte)3, (byte)14}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(string0);
      assertEquals("$D$w$bb$bb$D$O", string0);
      
      String string1 = Utility.compactClassName("Lv-O@M(<E\"32k");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Lv-O@M(<E\"32k", string1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "$D$w$bb$bb$D$O";
      objectArray0[1] = (Object) "Lv-O@M(<E\"32k";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "Lv-O@M(<E\"32k";
      objectArray0[4] = (Object) (byte)42;
      String string2 = Utility.printArray(objectArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(5, objectArray0.length);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Lv-O@M(<E\"32k";
      String string3 = Utility.methodTypeToSignature("C%l?)>LN^?", stringArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(1, stringArray0.length);
      assertNotNull(string3);
      assertEquals("(LLv-O@M(<E\"32k;)LC%l?)>LN^?;", string3);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(LLv-O@M(<E\"32k;)LC%l?)>LN^?;", "$D$w$bb$bb$D$O", "G6ES", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E\"32k;)LC%l?)>LN^?;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("Fex`e>ns ", false);
      assertArrayEquals(new byte[] {(byte)70, (byte)101, (byte)120, (byte)96, (byte)101, (byte)62, (byte)110, (byte)115, (byte)32}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string0 = Utility.typeSignatureToString("Fex`e>ns ", false);
      assertNotNull(string0);
      assertEquals("float", string0);
      
      boolean boolean0 = true;
      String string1 = "if_icmplt";
      try { 
        Utility.methodSignatureArgumentTypes("if_icmplt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmplt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      String string0 = Utility.compactClassName("if_icmpge");
      assertNotNull(string0);
      assertEquals("if_icmpge", string0);
      
      try { 
        Utility.typeOfSignature("5/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte) (-25);
      byteArray0[7] = (byte) (-101);
      byteArray0[8] = (byte)91;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 184, (int) (byte)88, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
      
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      short short0 = Utility.searchOpcode("byte");
      assertEquals((short) (-1), short0);
      
      try { 
        Utility.typeSignatureToString("Te,wm*oxNI)+6Qn4)", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type variable signature: Te,wm*oxNI)+6Qn4)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      String string0 = "4G@`7~#";
      try { 
        Utility.typeOfSignature("4G@`7~#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4G@`7~#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ind1t");
      assertFalse(boolean0);
      
      String string0 = Utility.methodTypeToSignature("ind1t", (String[]) null);
      assertNotNull(string0);
      assertEquals("()Lind1t;", string0);
      
      String string1 = Utility.methodTypeToSignature("ind1t", (String[]) null);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("()Lind1t;", string1);
      
      String string2 = Utility.methodSignatureReturnType("()Lind1t;", false);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("ind1t", string2);
      
      try { 
        Utility.typeOfMethodSignature("ind1t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ind1t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      String string0 = Utility.accessToString((-153));
      assertNotNull(string0);
      assertEquals("public private protected synchronized volatile native interface abstract strictfp synthetic annotation enum module", string0);
      
      byte byte0 = Utility.typeOfSignature("SQ");
      assertEquals((byte)9, byte0);
      
      short short0 = Utility.searchOpcode("public private protected synchronized volatile native interface abstract strictfp synthetic annotation enum module");
      assertEquals((short) (-1), short0);
      
      int int0 = Utility.setBit(3434, (-153));
      assertEquals(3562, int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      String string1 = Utility.toHexString(byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)9, (byte)9, (byte)9, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(string1);
      assertEquals("09 09 09 00", string1);
      
      String string2 = Utility.convertString("<illegal opcode>");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("<illegal opcode>", string2);
      
      String string3 = Utility.getSignature("public private protected synchronized volatile native interface abstract strictfp synthetic annotation enum module");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Lpublic;", string3);
      
      String string4 = Utility.typeSignatureToString("Lpublic;", true);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("public", string4);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      String string0 = "Lz`;z_\"7(R?ZGE6{";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Lz`;z_\"7(R?ZGE6{", "Lz`;z_\"7(R?ZGE6{", "Lz`;z_\"7(R?ZGE6{", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R?ZGE6{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('K');
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      byte[] byteArray0 = new byte[19];
      byte byte0 = (byte)53;
      byteArray0[8] = (byte)53;
      byte byte1 = (byte) (-85);
      byteArray0[4] = (byte) (-85);
      byteArray0[3] = (byte)53;
      byte byte2 = (byte)61;
      byteArray0[5] = (byte)61;
      byteArray0[7] = (byte) (-85);
      byte byte3 = (byte) (-3);
      byteArray0[8] = (byte) (-3);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)53, (int) (byte) (-85), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-99);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)117;
      byteArray0[7] = (byte)57;
      byteArray0[8] = (byte)76;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-126), (byte) (-99), (byte)0, (byte)0, (byte)32, (byte)91, (byte)117, (byte)57, (byte)76}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      
      String string0 = Utility.replace(",n=`~v%s", "Invalid method signature: ", ":@f-hRS&=q");
      assertNotNull(string0);
      assertEquals(",n=`~v%s", string0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":@f-hRS&=q");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string1 = Utility.encode(byteArray1, false);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertNotNull(string1);
      assertEquals("$A", string1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)76, 854, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.format(9, 9, false, ';');
      assertNotNull(string0);
      assertEquals(";;;;;;;;9", string0);
      
      String string1 = Utility.convertString("):");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("):", string1);
      
      try { 
        Utility.typeSignatureToString("Lv-O@M(<E\"32k", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lv-O@M(<E\"32k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Invalid method signature: ");
      assertEquals((byte)10, byte0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("newa?ray", "newa?ray", "static");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: newa?ray
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("void", stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      assertEquals("()V", string0);
      
      String string1 = Utility.methodSignatureToString("()V", "void", "()V", false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("()V void void()", string1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 189, 189);
      assertArrayEquals(new byte[] {(byte) (-78), (byte) (-78)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-187), byteArrayInputStream0.available());
      
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteArrayInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.convertString("c*ewp)!E^>kOr>G6u");
      assertNotNull(string0);
      assertEquals("c*ewp)!E^>kOr>G6u", string0);
      
      String string1 = Utility.accessToString((-1172));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("protected static synchronized volatile native interface strictfp synthetic annotation enum module", string1);
      
      String string2 = Utility.compactClassName("?2Xpyc^:mG", false);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("?2Xpyc^:mG", string2);
      
      try { 
        Utility.typeOfSignature("?2Xpyc^:mG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?2Xpyc^:mG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      short short0 = Utility.searchOpcode("F8NLot<k#6#kpxO5");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)112;
      byteArray0[3] = (byte)42;
      byteArray0[5] = (byte) (-103);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)118, (-2326), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Integer integer0 = new Integer(2978);
      assertNotNull(integer0);
      assertEquals(2978, (int)integer0);
      
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-24);
      Constant[] constantArray0 = new Constant[2];
      ConstantPackage constantPackage0 = new ConstantPackage((byte)62);
      assertNotNull(constantPackage0);
      assertEquals(62, constantPackage0.getNameIndex());
      assertEquals((byte)20, constantPackage0.getTag());
      
      ConstantPackage constantPackage1 = new ConstantPackage(constantPackage0);
      assertTrue(constantPackage1.equals((Object)constantPackage0));
      assertNotNull(constantPackage1);
      assertEquals(62, constantPackage0.getNameIndex());
      assertEquals((byte)20, constantPackage0.getTag());
      assertEquals((byte)20, constantPackage1.getTag());
      assertEquals(62, constantPackage1.getNameIndex());
      
      constantArray0[0] = (Constant) constantPackage1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(429, 4711);
      assertNotNull(constantInterfaceMethodref0);
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(4711, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals(429, constantInterfaceMethodref0.getClassIndex());
      
      constantInterfaceMethodref0.setClassIndex(1228);
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(4711, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals(1228, constantInterfaceMethodref0.getClassIndex());
      
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      assertTrue(constantInterfaceMethodref1.equals((Object)constantInterfaceMethodref0));
      assertNotNull(constantInterfaceMethodref1);
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(4711, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals(1228, constantInterfaceMethodref0.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref1.getTag());
      assertEquals(4711, constantInterfaceMethodref1.getNameAndTypeIndex());
      assertEquals(1228, constantInterfaceMethodref1.getClassIndex());
      
      String string0 = constantInterfaceMethodref0.toString();
      assertNotSame(constantInterfaceMethodref0, constantInterfaceMethodref1);
      assertTrue(constantInterfaceMethodref0.equals((Object)constantInterfaceMethodref1));
      assertNotNull(string0);
      assertEquals("CONSTANT_InterfaceMethodref[11](class_index = 1228, name_and_type_index = 4711)", string0);
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(4711, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals(1228, constantInterfaceMethodref0.getClassIndex());
      
      constantInterfaceMethodref0.setClassIndex((byte)62);
      assertNotSame(constantInterfaceMethodref0, constantInterfaceMethodref1);
      assertFalse(constantInterfaceMethodref0.equals((Object)constantInterfaceMethodref1));
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(4711, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals(62, constantInterfaceMethodref0.getClassIndex());
      
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-24), (int) (byte)62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    istore_3
         // 1:    istore_3
         // 2:    lload_0
         // 3:    athrow
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      String string0 = Utility.compactClassName("]`", "]`", true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte) (-55);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)44, (-1570), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)47;
      Constant[] constantArray0 = new Constant[3];
      ConstantDynamic constantDynamic0 = new ConstantDynamic((byte)101, (-442));
      assertNotNull(constantDynamic0);
      assertEquals((byte)17, constantDynamic0.getTag());
      assertEquals(101, constantDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((-442), constantDynamic0.getNameAndTypeIndex());
      assertEquals(101, constantDynamic0.getClassIndex());
      
      constantArray0[0] = (Constant) constantDynamic0;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      ConstantUtf8.printStats();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1043), (int) (byte)125, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 15919. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-76);
      byteArray0[4] = (byte) (-76);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-68);
      byteArray0[0] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(12, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      assertEquals(12, byteArray0.length);
      assertNotNull(constantClass0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(42044, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      
      byteSequence0.close();
      assertEquals(12, byteArray0.length);
      assertEquals(2, byteSequence0.getIndex());
      
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertEquals(12, byteArray0.length);
      assertNotNull(constantClass1);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(42044, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(42044, constantClass1.getNameIndex());
      assertEquals((byte)7, constantClass1.getTag());
      
      ConstantClass constantClass2 = (ConstantClass)constantClass0.clone();
      assertNotSame(constantClass0, constantClass2);
      assertNotSame(constantClass0, constantClass1);
      assertNotSame(constantClass2, constantClass0);
      assertNotSame(constantClass2, constantClass1);
      assertTrue(constantClass0.equals((Object)constantClass1));
      assertTrue(constantClass2.equals((Object)constantClass1));
      assertTrue(constantClass2.equals((Object)constantClass0));
      assertEquals(12, byteArray0.length);
      assertNotNull(constantClass2);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(42044, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(42044, constantClass2.getNameIndex());
      assertEquals((byte)7, constantClass2.getTag());
      
      String string0 = constantClass1.toString();
      assertNotSame(constantClass0, constantClass2);
      assertNotSame(constantClass0, constantClass1);
      assertNotSame(constantClass1, constantClass2);
      assertNotSame(constantClass1, constantClass0);
      assertTrue(constantClass0.equals((Object)constantClass1));
      assertTrue(constantClass0.equals((Object)constantClass2));
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertTrue(constantClass1.equals((Object)constantClass2));
      assertEquals(12, byteArray0.length);
      assertNotNull(string0);
      assertEquals("CONSTANT_Class[7](nameIndex = 42044)", string0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(42044, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(42044, constantClass1.getNameIndex());
      assertEquals((byte)7, constantClass1.getTag());
      
      constantArray0[0] = (Constant) constantClass1;
      ConstantClass constantClass3 = (ConstantClass)constantArray0[0].copy();
      assertNotSame(constantClass3, constantClass2);
      assertNotSame(constantClass3, constantClass0);
      assertNotSame(constantClass3, constantClass1);
      assertTrue(constantClass3.equals((Object)constantClass0));
      assertTrue(constantClass3.equals((Object)constantClass2));
      assertTrue(constantClass3.equals((Object)constantClass1));
      assertEquals(2, constantArray0.length);
      assertNotNull(constantClass3);
      assertEquals((byte)7, constantClass3.getTag());
      assertEquals(42044, constantClass3.getNameIndex());
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
      assertEquals(12, byteArray0.length);
      assertEquals(2, constantArray0.length);
      assertNotNull(string1);
      assertEquals("fstore_1", string1);
      assertEquals(2, constantPool0.getLength());
      assertEquals(3, byteSequence0.getIndex());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 990);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected class `CONSTANT_Fieldref' at index 0 and got CONSTANT_Class[7](nameIndex = 42044)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      String string0 = "wide";
      boolean boolean0 = false;
      try { 
        Utility.typeSignatureToString("YJ1NT-+", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YJ1NT-+'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      String string0 = "SJe}&Lw\"R7HgWtq]iH";
      boolean boolean0 = Utility.isSet(123, (-390));
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = Utility.clearBit((-390), (-390));
      assertEquals((-67109254), int0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("SJe}&Lw\"R7HgWtq]iH", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `e}&Lw\"R7HgWtq]iH'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      String string0 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(string0);
      assertEquals("00 00 00 00", string0);
      
      try { 
        Utility.typeOfSignature("00 00 00 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 00 00 00 00
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      String string0 = "ZwaBZ;Xqmw_Qc,`F";
      byte byte0 = Utility.typeOfSignature("ZwaBZ;Xqmw_Qc,`F");
      assertEquals((byte)4, byte0);
      
      boolean boolean0 = false;
      String string1 = Utility.typeSignatureToString("ZwaBZ;Xqmw_Qc,`F", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("boolean", string1);
      
      String string2 = "3R(GqL9ZH!";
      try { 
        Utility.typeOfSignature("3R(GqL9ZH!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3R(GqL9ZH!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)45;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)45, (byte) (-127), (byte)103}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[2];
      ConstantDynamic constantDynamic0 = new ConstantDynamic((-659), (byte)103);
      assertNotNull(constantDynamic0);
      assertEquals((byte)17, constantDynamic0.getTag());
      assertEquals(103, constantDynamic0.getNameAndTypeIndex());
      assertEquals((-659), constantDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((-659), constantDynamic0.getClassIndex());
      
      ConstantDynamic constantDynamic1 = new ConstantDynamic(677, (-1414));
      assertFalse(constantDynamic1.equals((Object)constantDynamic0));
      assertNotNull(constantDynamic1);
      assertEquals(677, constantDynamic1.getClassIndex());
      assertEquals(677, constantDynamic1.getBootstrapMethodAttrIndex());
      assertEquals((-1414), constantDynamic1.getNameAndTypeIndex());
      assertEquals((byte)17, constantDynamic1.getTag());
      
      constantArray0[1] = (Constant) constantDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      boolean boolean1 = byteSequence0.readBoolean();
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)45, (byte) (-127), (byte)103}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean1);
      assertEquals(1, byteSequence0.getIndex());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(2, constantArray0.length);
      assertNotNull(constantPool1);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertArrayEquals(new byte[] {(byte)45, (byte) (-127), (byte)103}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(2, constantArray0.length);
      assertNotNull(string0);
      assertEquals("lor", string0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      
      String string1 = null;
      String string2 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-127), 248);
      assertNotSame(constantPool0, constantPool1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)45, (byte) (-127), (byte)103}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(2, constantArray0.length);
      assertNotNull(string2);
      assertEquals("0:    aload_3\n1:    lor\n2:    dsub\n", string2);
      assertEquals(2, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)49;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 79, 92, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      int int0 = Utility.clearBit(187, 187);
      assertEquals(187, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-87);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte) (-124);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 190, (int) (byte) (-113), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Integer integer0 = new Integer(187);
      assertNotNull(integer0);
      assertEquals(187, (int)integer0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)93;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte) (-124);
      Constant[] constantArray0 = new Constant[0];
      String string0 = Utility.printArray((Object[]) constantArray0, false, false);
      assertEquals(0, constantArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 190, (int) (byte) (-114), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      short short0 = Utility.searchOpcode("dup2_x2");
      assertEquals((short)94, short0);
      
      String string0 = Utility.accessToString((int) (short)94);
      assertNotNull(string0);
      assertEquals("private protected static final volatile", string0);
      
      String string1 = "%DJhg";
      short short1 = Utility.searchOpcode("%DJhg");
      assertFalse(short1 == short0);
      assertEquals((short) (-1), short1);
      
      try { 
        Utility.typeOfSignature("%DJhg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %DJhg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      short short0 = Utility.searchOpcode("new");
      assertEquals((short)187, short0);
      
      String string0 = Utility.getSignature("new");
      assertNotNull(string0);
      assertEquals("Lnew;", string0);
      
      short short1 = Utility.searchOpcode("[{BX_:");
      assertFalse(short1 == short0);
      assertEquals((short) (-1), short1);
      
      byte byte0 = Utility.typeOfSignature("[{BX_:");
      assertEquals((byte)13, byte0);
      
      String string1 = Utility.accessToString((int) (short)187);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("public private static final synchronized transient", string1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("[{BX_:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{BX_:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      String string0 = Utility.getSignature("95s");
      assertNotNull(string0);
      assertEquals("L95s;", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)60;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)4, (int) (byte)0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object1));
      assertNotNull(object4);
      
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object2));
      assertNotNull(object5);
      
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object4));
      assertNotNull(object6);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-73);
      byteArray0[4] = (byte)92;
      byteArray0[6] = (byte) (-28);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (-2131));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      String string0 = Utility.replace("Dont call `etValueChar() on a non CHAR ElementValu~", ">\t", ">\t");
      assertNotNull(string0);
      assertEquals("Dont call `etValueChar() on a non CHAR ElementValu~", string0);
      
      String string1 = Utility.compactClassName("Tj!:V*::v");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Tj!:V*::v", string1);
      
      String string2 = Utility.replace("Tj!:V*::v", "Dont call `etValueChar() on a non CHAR ElementValu~", "Tj!:V*::v");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Tj!:V*::v", string2);
      
      String string3 = Utility.accessToString(45, false);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("public protected static synchronized", string3);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte) (-39);
      byteArray0[8] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-30), (int) (byte) (-74));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    <illegal opcode>
         // 2:    lrem
         // 3:    <illegal opcode>
         // 4:    lreturn
         // 5:    monitorenter
         // 6:    iconst_4
         // 7:    <illegal opcode>
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      String string0 = Utility.convertString("7yP>BI|07o2'1G1IL~");
      assertNotNull(string0);
      assertEquals("7yP>BI|07o2\\'1G1IL~", string0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[3] = (Object) "7yP>BI|07o2'1G1IL~";
      objectArray0[1] = (Object) "7yP>BI|07o2'1G1IL~";
      objectArray0[1] = (Object) "7yP>BI|07o2'1G1IL~";
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, objectArray0.length);
      assertNotNull(string1);
      assertEquals("{null, 7yP>BI|07o2'1G1IL~, null, 7yP>BI|07o2'1G1IL~}", string1);
      
      try { 
        Utility.methodSignatureReturnType("t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      String string0 = Utility.classOrInterface(193);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("@%sZl|gx2S<oC,k+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `@%sZl|gx2S<oC,k+'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "mc5";
      stringArray0[1] = "$:4g SHO1-r!VNm{J~";
      stringArray0[2] = "$:4g SHO1-r!VNm{J~";
      String string0 = Utility.methodTypeToSignature("$:4g SHO1-r!VNm{J~", stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string0);
      assertEquals("(Lmc5;L$:4g;L$:4g;)L$:4g;", string0);
      
      String string1 = Utility.classOrInterface(6);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("class", string1);
      
      String string2 = Utility.compactClassName("$:4g SHO1-r!VNm{J~", "$:4g SHO1-r!VNm{J~", false);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("$:4g SHO1-r!VNm{J~", string2);
      
      String string3 = Utility.printArray((Object[]) stringArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(3, stringArray0.length);
      assertNotNull(string3);
      assertEquals("{mc5, $:4g SHO1-r!VNm{J~, $:4g SHO1-r!VNm{J~}", string3);
      
      int int0 = Utility.setBit(6, 65);
      assertEquals(6, int0);
      
      String string4 = Utility.compactClassName("{mc5, $:4g SHO1-r!VNm{J~, $:4g SHO1-r!VNm{J~}", "$:4g SHO1-r!VNm{J~", false);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("{mc5, $:4g SHO1-r!VNm{J~, $:4g SHO1-r!VNm{J~}", string4);
      
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("(Lmc5;L$:4g;L$:4g;)L$:4g;", false);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      short short0 = Utility.searchOpcode("$:4g SHO1-r!VNm{J~");
      assertEquals((short) (-1), short0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("invokespecial");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `invokespecial'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      String string0 = "~G=i([Q.(Ku|l|.mF0&K";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("~G=i([Q.(Ku|l|.mF0&K", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q.(Ku|l|.mF0&K'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-97);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 20, (int) (byte)108, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.bcel.classfile.Method";
      stringArray0[1] = "org.apache.bcel.classfile.Method";
      stringArray0[2] = "org.apache.bcel.classfile.Method";
      String string0 = Utility.methodTypeToSignature("org.apache.bcel.classfile.Method", stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string0);
      assertEquals("(Lorg/apache/bcel/classfile/Method;Lorg/apache/bcel/classfile/Method;Lorg/apache/bcel/classfile/Method;)Lorg/apache/bcel/classfile/Method;", string0);
      
      String string1 = Utility.signatureToString("(Lorg/apache/bcel/classfile/Method;Lorg/apache/bcel/classfile/Method;Lorg/apache/bcel/classfile/Method;)Lorg/apache/bcel/classfile/Method;", false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("(org.apache.bcel.classfile.Method, org.apache.bcel.classfile.Method, org.apache.bcel.classfile.Method)org.apache.bcel.classfile.Method", string1);
      
      String string2 = Utility.printArray((Object[]) stringArray0, true, true);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(3, stringArray0.length);
      assertNotNull(string2);
      assertEquals("{\"org.apache.bcel.classfile.Method\", \"org.apache.bcel.classfile.Method\", \"org.apache.bcel.classfile.Method\"}", string2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)2;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2342, (int) (byte)107);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "`TcSt";
      stringArray0[1] = "`TcSt";
      stringArray0[2] = "`TcSt";
      stringArray0[3] = "`TcSt";
      stringArray0[4] = "`TcSt";
      stringArray0[5] = "`TcSt";
      stringArray0[6] = "`TcSt";
      stringArray0[7] = "`TcSt";
      stringArray0[8] = "`TcSt";
      String string0 = Utility.methodTypeToSignature("`TcSt", stringArray0);
      assertEquals(9, stringArray0.length);
      assertNotNull(string0);
      assertEquals("(L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;)L`TcSt;", string0);
      
      String string1 = Utility.methodSignatureToString("(L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;L`TcSt;)L`TcSt;", "`TcSt", "`TcSt");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("`TcSt `TcSt `TcSt(`TcSt arg1, `TcSt arg2, `TcSt arg3, `TcSt arg4, `TcSt arg5, `TcSt arg6, `TcSt arg7, `TcSt arg8, `TcSt arg9)", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte) (-22);
      byteArray0[6] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-121), (byte)9, (byte)101, (byte) (-22), (byte) (-22), (byte)0, (byte)10}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-121), (byte)9, (byte)101, (byte) (-22), (byte) (-22), (byte)0, (byte)10}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(string2);
      assertEquals("i2d", string2);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      
      String string3 = Utility.convertString("(");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("(", string3);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)109;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)109, (-1866));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)72;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)116;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)116, (int) (byte)72);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "if_icmplt");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte)59;
      boolean boolean1 = Utility.equals(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)59}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(boolean1);
      
      String string0 = Utility.replace("\t\t#", "\t\t#", "iusr");
      assertNotNull(string0);
      assertEquals("iusr", string0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("I~_H(JJOv^.2K!gj[I2", "iusr", "iusr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ov^.2K!gj[I2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("V6K");
      assertEquals((byte)12, byte0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(5251, 91);
      assertNotNull(constantInterfaceMethodref0);
      assertEquals(5251, constantInterfaceMethodref0.getClassIndex());
      assertEquals(91, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(304, (byte)12);
      assertNotNull(constantNameAndType0);
      assertEquals(304, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(12, constantNameAndType0.getSignatureIndex());
      
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      String string0 = Utility.accessToString(91, true);
      assertNotNull(string0);
      assertEquals("public private static final volatile", string0);
      
      String string1 = Utility.printArray((Object[]) constantArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, constantArray0.length);
      assertNotNull(string1);
      assertEquals("{CONSTANT_InterfaceMethodref[11](class_index = 5251, name_and_type_index = 91), CONSTANT_NameAndType[12](nameIndex = 304, signatureIndex = 12)}", string1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "wide";
      stringArray0[1] = "oK|n 6=%o?0lROX`P";
      stringArray0[2] = "short";
      String string2 = Utility.methodTypeToSignature("short", stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(3, stringArray0.length);
      assertNotNull(string2);
      assertEquals("(Lwide;LoK|n;S)S", string2);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)0;
      String string0 = Utility.compactClassName("java.lang.java.lang.");
      assertNotNull(string0);
      assertEquals("java.lang.java.lang.", string0);
      
      byte byte1 = Utility.typeOfSignature("From\tTo\tHandler\tType\n");
      assertFalse(byte1 == byte0);
      assertEquals((byte)6, byte1);
      
      try { 
        Utility.typeOfMethodSignature("From\tTo\tHandler\tType\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: From\tTo\tHandler\tType
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)71;
      byte byte0 = (byte) (-109);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)60;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)71, (int) (byte)71, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)34;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte)61;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-60), (-3560));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-60), (byte)34, (byte) (-117), (byte)61, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    wide\t(wide)\n2:    fload_0\n3:    f2i\n4:    istore_2\n5:    nop\n", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature("0:    nop\n1:    wide\t(wide)\n2:    fload_0\n3:    f2i\n4:    istore_2\n5:    nop\n", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      assertNotNull(string1);
      assertEquals("()L0:;", string1);
      
      String string2 = Utility.printArray((Object[]) null);
      assertNull(string2);
      
      String string3 = Utility.signatureToString("()L0:;");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("()0:", string3);
      
      String string4 = Utility.encode(byteArray0, false);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-60), (byte)34, (byte) (-117), (byte)61, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(string4);
      assertEquals("$A$c4$o$8b$3d$A", string4);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      String string0 = "<";
      try { 
        Utility.typeOfSignature("<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      String string0 = "";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      try { 
        Utility.typeOfSignature("P}*Rnv}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P}*Rnv}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      String string0 = "<";
      byte byte0 = Utility.typeOfSignature("DAj{&]*9hnt!sUc");
      assertEquals((byte)7, byte0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("<", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type parameter signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[Ja`&5wVuXw}ULb");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Utility.typeSignatureToString("[Ja`&5wVuXw}ULb", false);
      assertNotNull(string0);
      assertEquals("long[]", string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "long[]";
      stringArray0[1] = "tab<eswitch";
      stringArray0[2] = "[Ja`&5wVuXw}ULb";
      stringArray0[3] = "[Ja`&5wVuXw}ULb";
      stringArray0[4] = "tab<eswitch";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("tab<eswitch", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal type: [Ja`&5wVuXw}ULb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      String string0 = Utility.typeSignatureToString("[Ja`&5wVuXw}ULb", false);
      assertNotNull(string0);
      assertEquals("long[]", string0);
      
      short short0 = Utility.searchOpcode("org.apache.bcel.classfile.StackMap");
      assertEquals((short) (-1), short0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "long[]";
      stringArray0[1] = "byte";
      stringArray0[2] = "[Ja`&5wVuXw}ULb";
      stringArray0[4] = "byte";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("byte", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal type: [Ja`&5wVuXw}ULb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "goto";
      stringArray0[1] = "goto";
      stringArray0[3] = "goto";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-33);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-33), (int) (byte)98);
      assertArrayEquals(new byte[] {(byte)98, (byte) (-33)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(string0);
      assertEquals("0:    fadd\n1:    <illegal opcode>\n", string0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      String string1 = Utility.replace("=", "return", "goto");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("=", string1);
      
      String string2 = Utility.fillup("goto", 0, false, 'B');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("goto", string2);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("goto");
      assertNotNull(mockPrintWriter0);
      
      String string3 = Utility.accessToString(787, false);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("public private final native interface", string3);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertNotNull(mockPrintWriter1);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, "goto", (Object[]) stringArray0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter0, printWriter0);
      assertSame(mockPrintWriter1, printWriter0);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertSame(printWriter0, mockPrintWriter1);
      assertNotSame(printWriter0, mockPrintWriter0);
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(printWriter0.equals((Object)mockPrintWriter0));
      assertEquals(4, stringArray0.length);
      assertNotNull(printWriter0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      
      Utility.printArray(printWriter0, (Object[]) stringArray0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter0, printWriter0);
      assertSame(mockPrintWriter1, printWriter0);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertSame(printWriter0, mockPrintWriter1);
      assertNotSame(printWriter0, mockPrintWriter0);
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter0.equals((Object)printWriter0));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(printWriter0.equals((Object)mockPrintWriter0));
      assertEquals(4, stringArray0.length);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      
      try { 
        Utility.decode("=", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      int int0 = Utility.clearBit(187, 187);
      assertEquals(187, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-122);
      byteArray0[2] = (byte) (-2);
      byteArray0[5] = (byte)87;
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte) (-81);
      byteArray0[7] = (byte)123;
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantArray0.length);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 190, (int) (byte)0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('K');
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-85);
      byteArray0[5] = (byte)36;
      byteArray0[2] = (byte) (-49);
      byteArray0[8] = (byte)38;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), (int) (byte) (-85), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    fload_2
         // 2:    <illegal opcode>
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('K');
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)96;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-120);
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)115;
      byteArray0[7] = (byte)96;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)96, (int) (byte) (-120), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte) (-49);
      byteArray0[8] = (byte)21;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)41, (int) (byte)41, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[15];
      byteArray0[1] = (byte) (-99);
      byteArray0[3] = (byte) (-23);
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte) (-110);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals(15, byteArray0.length);
      assertNotNull(string0);
      assertEquals("$A$9d$A$e9$A$$$7c$92$A$A$A$A$A$A$A", string0);
      
      short short0 = Utility.searchOpcode("$A$9d$A$e9$A$$$7c$92$A$A$A$A$A$A$A");
      assertEquals((short) (-1), short0);
      
      boolean boolean1 = false;
      byte[] byteArray1 = Utility.decode("$A$9d$A$e9$A$$$7c$92$A$A$A$A$A$A$A", false);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(15, byteArray1.length);
      assertNotNull(byteArray1);
      
      boolean boolean2 = true;
      String string1 = Utility.accessToString((int) (byte)42, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("private static", string1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("$A$9d$A$e9$A$$$7c$92$A$A$A$A$A$A$A", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$A$9d$A$e9$A$$$7c$92$A$A$A$A$A$A$A'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.getSignature("\tdefault = ");
      assertNotNull(string0);
      assertEquals("Ldefault;", string0);
      
      String string1 = Utility.compactClassName("Ldefault;", "Ldefault;", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = Utility.accessToString((-3132), false);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("protected volatile transient native interface synthetic annotation enum module", string2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte) (-118);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 10, (-1997));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte byte0 = Utility.typeOfSignature("+!J *wTDQOP64= [y");
      assertEquals((byte)11, byte0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("Invalid frame type fo1nd while pasig stack map table: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `nvalid frame type fo1nd while pasig stack map table: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      String string0 = "Lif_icmplt;V";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string1 = Utility.signatureToString("Lif_icmplt;V", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" extends if_icmplt implements void", string1);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " extends if_icmplt implements void");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      try { 
        Utility.typeOfSignature(" extends if_icmplt implements void");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  extends if_icmplt implements void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)83;
      String string0 = "a?YR73IS@";
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte)40;
      ConstantPool constantPool0 = null;
      int int0 = (-1484);
      Utility.getSignature("a?YR73IS@");
      boolean boolean0 = true;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)83, (-1484), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("iH_-$ZEW@La%Qw", false);
      Utility.encode(byteArray0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = true;
      try { 
        Utility.decode("iH_$z$ZEW$40La$rQw", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Utility.clearBit((-2748), 26);
      Utility.isJavaIdentifierPart('!');
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte) (-27);
      byteArray0[7] = (byte)75;
      byteArray0[8] = (byte) (-69);
      Utility.equals(byteArray0, byteArray0);
      Utility.accessToString(2666, false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "private static synchronized volatile interface strictfp";
      stringArray0[1] = "private static synchronized volatile interface strictfp";
      Utility.methodTypeToSignature("private static synchronized volatile interface strictfp", stringArray0);
      Utility.compactClassName("void");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 199, (int) (byte) (-69));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      boolean boolean0 = false;
      Utility.typeOfSignature("Constant pool at index ");
      try { 
        Utility.typeOfSignature("W:s+!I1Fav{c5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W:s+!I1Fav{c5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "void";
      stringArray0[2] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Utility.replace(".debug", ".debug", ".debug");
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) ".debug";
      objectArray0[2] = (Object) ".debug";
      Utility.getSignature("java.lang.");
      Utility.signatureToString("Ljava/lang/;", true);
      try { 
        Utility.methodSignatureArgumentTypes(".debug", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .debug
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      String string0 = Utility.compactClassName("OpH", ">", true);
      assertEquals("OpH", string0);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isSet((-20), (-20));
      Utility.typeSignatureToString("T(Ei&!\"q;YXq", false);
      String string0 = "a";
      String string1 = "Byte code error: ";
      try { 
        Utility.typeSignatureToString("H", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Utility.getSignature(" $implemeyts ");
      Utility.typeOfSignature("L$implemeyts;");
      Utility.getSignature("L$implemeyts;");
      try { 
        Utility.methodSignatureArgumentTypes(" $implemeyts ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  $implemeyts 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("(8lq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (8lq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-44);
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte)49;
      Constant[] constantArray0 = new Constant[0];
      Utility.setBit(0, (-980));
      Utility.convertString("int");
      try { 
        Utility.typeSignatureToString("v*>mv'M:3D", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `v*>mv'M:3D'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      Utility.accessToString((-239));
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-44);
      Utility.toHexString(byteArray0);
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-44);
      byteArray1[1] = (byte) (-44);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "00 00 d4");
      byteArray1[3] = (byte) (-44);
      byteArray1[4] = (byte)0;
      Utility.encode(byteArray1, true);
      Utility.convertString("+^*\"Q_7zY\"bihp[`2c3");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      Utility.accessToString((int) (byte) (-44), true);
      // Undeclared exception!
      Utility.codeToString(byteArray1, constantPool0, (int) (byte)0, 0);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)65;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)7;
      byteArray0[7] = (byte) (-68);
      byteArray0[8] = (byte) (-92);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      Utility.convertString(",Uk+&:_)UU{Y");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",Uk+&:_)UU{Y");
      try { 
        Utility.typeOfSignature(",Uk+&:_)UU{Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,Uk+&:_)UU{Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PmLr6MLbP)h(f'~6[E3");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte) (-41);
      byteArray0[7] = (byte)29;
      byteArray0[8] = (byte)39;
      Utility.encode(byteArray0, false);
      mockFileOutputStream0.getChannel();
      Utility.replace("PmLr6MLbP)h(f'~6[E3", "PmLr6MLbP)h(f'~6[E3", "PmLr6MLbP)h(f'~6[E3");
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0);
      Object[] objectArray0 = new Object[2];
      mockFileOutputStream0.release();
      mockPrintStream0.printf("if_icmpgt", objectArray0);
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format("", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.compactClassName("PmLr6MLbP)h(f'~6[E3");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)48, (int) (byte)58);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object1;
      Object object5 = new Object();
      objectArray0[5] = object3;
      objectArray0[6] = object1;
      Object object6 = new Object();
      objectArray0[8] = object5;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-98);
      objectArray0[0] = (Object) (byte)0;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte) (-28);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (-2131));
      try { 
        Utility.methodSignatureReturnType("{java.lang.Object@65e9a35c, java.lang.Object@525ef264, java.lang.Object@42d487aa, java.lang.Object@58710af1, java.lang.Object@525ef264, java.lang.Object@58710af1, java.lang.Object@525ef264, null, java.lang.Object@702aa1e0}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {java.lang.Object@65e9a35c, java.lang.Object@525ef264, java.lang.Object@42d487aa, java.lang.Object@58710af1, java.lang.Object@525ef264, java.lang.Object@58710af1, java.lang.Object@525ef264, null, java.lang.Object@702aa1e0}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
