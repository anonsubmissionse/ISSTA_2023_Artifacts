/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:39:21 GMT 2022
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.EnumElementValue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EnumElementValue_ESTest extends EnumElementValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EnumElementValue enumElementValue0 = new EnumElementValue(101, 101, 101, (ConstantPool) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)64);
      pipedOutputStream0.connect(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      enumElementValue0.dump(dataOutputStream0);
      assertEquals(101, enumElementValue0.getValueIndex());
      assertEquals(101, enumElementValue0.getTypeIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EnumElementValue enumElementValue0 = new EnumElementValue(101, 101, 101, (ConstantPool) null);
      int int0 = enumElementValue0.getValueIndex();
      assertEquals(101, enumElementValue0.getTypeIndex());
      assertEquals(101, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantPool constantPool0 = new ConstantPool(dataInputStream0);
      EnumElementValue enumElementValue0 = new EnumElementValue((byte)101, (byte)0, (-531), constantPool0);
      int int0 = enumElementValue0.getValueIndex();
      assertEquals(0, enumElementValue0.getTypeIndex());
      assertEquals((-531), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EnumElementValue enumElementValue0 = new EnumElementValue(101, 0, 0, constantPool0);
      // Undeclared exception!
      try { 
        enumElementValue0.stringifyValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EnumElementValue enumElementValue0 = new EnumElementValue(101, 101, 101, (ConstantPool) null);
      // Undeclared exception!
      try { 
        enumElementValue0.getEnumTypeString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.EnumElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EnumElementValue enumElementValue0 = new EnumElementValue(101, 4486, 2401, (ConstantPool) null);
      // Undeclared exception!
      try { 
        enumElementValue0.stringifyValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.EnumElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EnumElementValue enumElementValue0 = null;
      try {
        enumElementValue0 = new EnumElementValue(170, 170, 0, constantPool0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only element values of type enum can be built with this ctor - type specified: 170
         //
         verifyException("org.apache.bcel.classfile.EnumElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EnumElementValue enumElementValue0 = new EnumElementValue(101, 0, 0, constantPool0);
      // Undeclared exception!
      try { 
        enumElementValue0.getEnumTypeString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EnumElementValue enumElementValue0 = new EnumElementValue(101, 0, 0, constantPool0);
      int int0 = enumElementValue0.getValueIndex();
      assertEquals(0, enumElementValue0.getTypeIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EnumElementValue enumElementValue0 = new EnumElementValue(101, 101, 101, (ConstantPool) null);
      // Undeclared exception!
      try { 
        enumElementValue0.getEnumValueString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.EnumElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EnumElementValue enumElementValue0 = new EnumElementValue(101, 101, 101, (ConstantPool) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        enumElementValue0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EnumElementValue enumElementValue0 = new EnumElementValue(101, 101, 101, (ConstantPool) null);
      int int0 = enumElementValue0.getTypeIndex();
      assertEquals(101, int0);
      assertEquals(101, enumElementValue0.getValueIndex());
  }
}
