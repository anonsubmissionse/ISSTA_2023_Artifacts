/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:09:22 GMT 2022
 */

package org.apache.bcel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.regex.PatternSyntaxException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.generic.ACONST_NULL;
import org.apache.bcel.generic.BranchHandle;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.DASTORE;
import org.apache.bcel.generic.DUP_X1;
import org.apache.bcel.generic.FADD;
import org.apache.bcel.generic.FCMPL;
import org.apache.bcel.generic.GOTO;
import org.apache.bcel.generic.I2D;
import org.apache.bcel.generic.ICONST;
import org.apache.bcel.generic.IF_ICMPEQ;
import org.apache.bcel.generic.INSTANCEOF;
import org.apache.bcel.generic.ISTORE;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.LDIV;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.InstructionFinder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InstructionFinder_ESTest extends InstructionFinder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-121);
      InstructionList instructionList0 = new InstructionList(byteArray0);
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      String string0 = "AzZ>H:(+";
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      InstructionFinder.CodeConstraint instructionFinder_CodeConstraint0 = mock(InstructionFinder.CodeConstraint.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        instructionFinder0.search("+", instructionFinder_CodeConstraint0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '+' near index 0
         // +
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[");
      ISTORE iSTORE0 = (ISTORE)InstructionConstants.ISTORE_2;
      InstructionList instructionList0 = new InstructionList(iSTORE0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) iSTORE0);
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      instructionList0.copy();
      instructionFinder0.getInstructionList();
      instructionList0.dispose();
      instructionHandle0.getAttributes();
      InstructionFinder.CodeConstraint instructionFinder_CodeConstraint0 = mock(InstructionFinder.CodeConstraint.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        instructionFinder0.search("[", instructionHandle0, instructionFinder_CodeConstraint0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 0
         // [
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ISTORE iSTORE0 = (ISTORE)InstructionConstants.ISTORE_2;
      InstructionList instructionList0 = new InstructionList(iSTORE0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) iSTORE0);
      IF_ICMPEQ iF_ICMPEQ0 = new IF_ICMPEQ(instructionHandle0);
      instructionList0.insert(instructionHandle0, (BranchInstruction) iF_ICMPEQ0);
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      instructionList0.copy();
      instructionFinder0.getInstructionList();
      instructionList0.dispose();
      instructionHandle0.getAttributes();
      InstructionFinder.CodeConstraint instructionFinder_CodeConstraint0 = mock(InstructionFinder.CodeConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, true, false).when(instructionFinder_CodeConstraint0).checkCode(any(org.apache.bcel.generic.InstructionHandle[].class));
      // Undeclared exception!
      instructionFinder0.search("", instructionHandle0, instructionFinder_CodeConstraint0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ISTORE iSTORE0 = (ISTORE)InstructionConstants.ISTORE_2;
      InstructionList instructionList0 = new InstructionList(iSTORE0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) iSTORE0);
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      instructionList0.copy();
      instructionFinder0.getInstructionList();
      instructionHandle0.getAttributes();
      // Undeclared exception!
      instructionFinder0.search("");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ISTORE iSTORE0 = (ISTORE)InstructionConstants.ISTORE_2;
      InstructionList instructionList0 = new InstructionList(iSTORE0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8("");
      constantArray0[1] = (Constant) constantUtf8_2;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      iSTORE0.consumeStack(constantPoolGen0);
      instructionList0.insert((Instruction) iSTORE0);
      instructionList0.copy();
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      InstructionFinder.CodeConstraint instructionFinder_CodeConstraint0 = mock(InstructionFinder.CodeConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(instructionFinder_CodeConstraint0).checkCode(any(org.apache.bcel.generic.InstructionHandle[].class));
      // Undeclared exception!
      instructionFinder0.search("", instructionFinder_CodeConstraint0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ISTORE iSTORE0 = (ISTORE)InstructionConstants.ISTORE_2;
      InstructionList instructionList0 = new InstructionList(iSTORE0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) iSTORE0);
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      instructionFinder0.getInstructionList();
      instructionHandle0.getAttributes();
      InstructionFinder.CodeConstraint instructionFinder_CodeConstraint0 = mock(InstructionFinder.CodeConstraint.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      instructionFinder0.search("", instructionHandle0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ISTORE iSTORE0 = (ISTORE)InstructionConstants.ISTORE_2;
      InstructionList instructionList0 = new InstructionList(iSTORE0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) iSTORE0);
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      instructionFinder0.getInstructionList();
      instructionFinder0.getInstructionList();
      instructionList0.dispose();
      instructionHandle0.getAttributes();
      InstructionFinder.CodeConstraint instructionFinder_CodeConstraint0 = mock(InstructionFinder.CodeConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, true, false).when(instructionFinder_CodeConstraint0).checkCode(any(org.apache.bcel.generic.InstructionHandle[].class));
      // Undeclared exception!
      instructionFinder0.search("", instructionHandle0, instructionFinder_CodeConstraint0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, 0.0);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      InstructionList instructionList1 = instructionList0.copy();
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList1);
      InstructionHandle instructionHandle0 = instructionList0.append((CompoundInstruction) pUSH0);
      GOTO gOTO0 = new GOTO(instructionHandle0);
      BranchHandle branchHandle0 = instructionList1.append(instructionHandle0, (BranchInstruction) gOTO0);
      // Undeclared exception!
      try { 
        instructionFinder0.search((String) null, (InstructionHandle) branchHandle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.InstructionFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      InstructionList instructionList1 = instructionList0.copy();
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList1);
      InstructionHandle instructionHandle0 = instructionList0.insert(instructionList1);
      InstructionFinder.CodeConstraint instructionFinder_CodeConstraint0 = mock(InstructionFinder.CodeConstraint.class, new ViolatedAssumptionAnswer());
      instructionFinder0.search("if_icmpgt", instructionHandle0, instructionFinder_CodeConstraint0);
      // Undeclared exception!
      try { 
        instructionFinder0.search("I-&F'HTfutzxHe,`pt ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instruction unknown: i
         //
         verifyException("org.apache.bcel.util.InstructionFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)34;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      InstructionList instructionList0 = new InstructionList();
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      String string0 = "(lreturn|ireturn|freturn|dreturn|areturn|return)";
      InstructionFinder.CodeConstraint instructionFinder_CodeConstraint0 = mock(InstructionFinder.CodeConstraint.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        instructionFinder0.search("(lreturn|ireturn|freturn|dreturn|areturn|return)", instructionFinder_CodeConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction handle null not found in instruction list.
         //
         verifyException("org.apache.bcel.util.InstructionFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, (String) null);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      InstructionList instructionList1 = instructionList0.copy();
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList1);
      InstructionFinder.CodeConstraint instructionFinder_CodeConstraint0 = mock(InstructionFinder.CodeConstraint.class, new ViolatedAssumptionAnswer());
      pUSH0.getInstructionList();
      // Undeclared exception!
      try { 
        instructionFinder0.search((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.InstructionFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      InstructionList instructionList1 = instructionList0.copy();
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList1);
      String string0 = "if_icmpgt";
      // Undeclared exception!
      try { 
        instructionFinder0.search("if_icmpgt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction handle null not found in instruction list.
         //
         verifyException("org.apache.bcel.util.InstructionFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 66);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      instructionFinder0.search("l2d", instructionHandle0);
      instructionFinder0.search("i2f");
      pUSH0.toString();
      DUP_X1 dUP_X1_0 = (DUP_X1)InstructionConstants.DUP_X1;
      InstructionHandle instructionHandle1 = instructionList0.insert((Instruction) dUP_X1_0);
      InstructionFinder.CodeConstraint instructionFinder_CodeConstraint0 = mock(InstructionFinder.CodeConstraint.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        instructionFinder0.search((String) null, instructionHandle1, instructionFinder_CodeConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.InstructionFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)0;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      String string0 = "return";
      I2D i2D0 = new I2D();
      byte[] byteArray1 = new byte[3];
      instructionFinder0.search("return");
      byteArray1[0] = (byte) (-87);
      byteArray1[1] = (byte) (-83);
      instructionList0.append((Instruction) i2D0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      i2D0.produceStack(constantPoolGen0);
      byteArray1[2] = (byte) (-54);
      InstructionList instructionList1 = new InstructionList(byteArray1);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) i2D0, instructionList1);
      instructionHandle0.removeAllTargeters();
      // Undeclared exception!
      try { 
        instructionFinder0.search("return", instructionHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction handle    0: ret[169](2) 173 not found in instruction list.
         //
         verifyException("org.apache.bcel.util.InstructionFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      String string0 = "x~.y<1o?1.qbGxFo=l";
      InstructionFinder.CodeConstraint instructionFinder_CodeConstraint0 = mock(InstructionFinder.CodeConstraint.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        instructionFinder0.search("x~.y<1o?1.qbGxFo=l", instructionFinder_CodeConstraint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instruction unknown: x
         //
         verifyException("org.apache.bcel.util.InstructionFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      instructionFinder0.reread();
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(54);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) iNSTANCEOF0);
      instructionList0.copy();
      InstructionFinder.CodeConstraint instructionFinder_CodeConstraint0 = mock(InstructionFinder.CodeConstraint.class, new ViolatedAssumptionAnswer());
      instructionHandle0.toString(false);
      // Undeclared exception!
      try { 
        instructionFinder0.search(", offset delta=", instructionHandle0, instructionFinder_CodeConstraint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instruction unknown: offset
         //
         verifyException("org.apache.bcel.util.InstructionFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0.0F);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      InstructionFinder.CodeConstraint instructionFinder_CodeConstraint0 = mock(InstructionFinder.CodeConstraint.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        instructionFinder0.search((String) null, instructionFinder_CodeConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.InstructionFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 1.0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      instructionFinder0.search("ret");
      instructionFinder0.reread();
      InstructionList instructionList1 = instructionFinder0.getInstructionList();
      pUSH0.toString();
      InstructionFinder.CodeConstraint instructionFinder_CodeConstraint0 = mock(InstructionFinder.CodeConstraint.class, new ViolatedAssumptionAnswer());
      instructionFinder0.search("if_icmp", instructionFinder_CodeConstraint0);
      instructionFinder0.reread();
      InstructionFinder.CodeConstraint instructionFinder_CodeConstraint1 = mock(InstructionFinder.CodeConstraint.class, new ViolatedAssumptionAnswer());
      instructionFinder0.search("if_icmp", instructionFinder_CodeConstraint1);
      InstructionFinder.CodeConstraint instructionFinder_CodeConstraint2 = mock(InstructionFinder.CodeConstraint.class, new ViolatedAssumptionAnswer());
      instructionFinder0.search("if_icmp", instructionFinder_CodeConstraint2);
      instructionFinder0.search("if_icmp");
      instructionFinder0.reread();
      instructionFinder0.reread();
      FCMPL fCMPL0 = new FCMPL();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) fCMPL0);
      InstructionHandle instructionHandle1 = instructionList1.append(instructionHandle0, instructionList0);
      // Undeclared exception!
      try { 
        instructionFinder0.search("dconst_1[15](1) (PUSH)", instructionHandle1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instruction unknown: 15
         //
         verifyException("org.apache.bcel.util.InstructionFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      InstructionList instructionList0 = new InstructionList(lDIV0);
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      InstructionList instructionList1 = new InstructionList();
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) lDIV0, instructionList1);
      // Undeclared exception!
      try { 
        instructionFinder0.search("l{|cYP\"[8", instructionHandle0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instruction unknown: l
         //
         verifyException("org.apache.bcel.util.InstructionFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.OBJECT;
      PUSH pUSH0 = new PUSH(constantPoolGen0, objectType0);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      InstructionHandle instructionHandle0 = null;
      InstructionFinder.CodeConstraint instructionFinder_CodeConstraint0 = mock(InstructionFinder.CodeConstraint.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        instructionFinder0.search("fstore", (InstructionHandle) null, instructionFinder_CodeConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction handle null not found in instruction list.
         //
         verifyException("org.apache.bcel.util.InstructionFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)107;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      instructionFinder0.search("ret");
      instructionFinder0.getInstructionList();
      InstructionHandle instructionHandle0 = null;
      InstructionFinder.CodeConstraint instructionFinder_CodeConstraint0 = mock(InstructionFinder.CodeConstraint.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        instructionFinder0.search("org.apache.bcel.classfile.Synthetic", (InstructionHandle) null, instructionFinder_CodeConstraint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instruction unknown: org
         //
         verifyException("org.apache.bcel.util.InstructionFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      instructionList0.getByteCode();
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      instructionFinder0.getInstructionList();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, true);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      InstructionFinder.CodeConstraint instructionFinder_CodeConstraint0 = mock(InstructionFinder.CodeConstraint.class, new ViolatedAssumptionAnswer());
      instructionFinder0.search("f2i", instructionFinder_CodeConstraint0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InstructionFinder instructionFinder0 = null;
      try {
        instructionFinder0 = new InstructionFinder((InstructionList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.InstructionFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      Character character0 = new Character('p');
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      InstructionList instructionList1 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.append(instructionList1);
      InstructionFinder.CodeConstraint instructionFinder_CodeConstraint0 = mock(InstructionFinder.CodeConstraint.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        instructionFinder0.search("=", instructionHandle0, instructionFinder_CodeConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction handle   -1: bipush[16](2) 112 not found in instruction list.
         //
         verifyException("org.apache.bcel.util.InstructionFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Boolean boolean0 = Boolean.FALSE;
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      // Undeclared exception!
      try { 
        instructionFinder0.search("", (InstructionHandle) null, (InstructionFinder.CodeConstraint) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction handle null not found in instruction list.
         //
         verifyException("org.apache.bcel.util.InstructionFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DASTORE dASTORE0 = (DASTORE)InstructionConstants.DASTORE;
      InstructionList instructionList0 = new InstructionList(dASTORE0);
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      String string0 = "=9s0$S!N]UO";
      // Undeclared exception!
      try { 
        instructionFinder0.search("=9s0$S!N]UO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instruction unknown: 9s0
         //
         verifyException("org.apache.bcel.util.InstructionFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ICONST iCONST0 = (ICONST)InstructionConstants.ICONST_0;
      InstructionList instructionList0 = new InstructionList(iCONST0);
      InstructionList instructionList1 = instructionList0.copy();
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList1);
      // Undeclared exception!
      try { 
        instructionFinder0.search("lA%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instruction unknown: la
         //
         verifyException("org.apache.bcel.util.InstructionFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FADD fADD0 = new FADD();
      InstructionList instructionList0 = new InstructionList(fADD0);
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      instructionFinder0.reread();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ISTORE iSTORE0 = (ISTORE)InstructionConstants.ISTORE_2;
      InstructionList instructionList0 = new InstructionList(iSTORE0);
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      instructionList0.copy();
      // Undeclared exception!
      instructionFinder0.search("");
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ISTORE iSTORE0 = (ISTORE)InstructionConstants.ISTORE_2;
      InstructionList instructionList0 = new InstructionList();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) iSTORE0);
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      instructionList0.copy();
      instructionFinder0.getInstructionList();
      InstructionFinder.CodeConstraint instructionFinder_CodeConstraint0 = mock(InstructionFinder.CodeConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true, true, false).when(instructionFinder_CodeConstraint0).checkCode(any(org.apache.bcel.generic.InstructionHandle[].class));
      // Undeclared exception!
      instructionFinder0.search("", instructionHandle0, instructionFinder_CodeConstraint0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(39);
      ConstantPoolGen constantPoolGen0 = null;
      InstructionList instructionList0 = new InstructionList(iNSTANCEOF0);
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      InstructionFinder.CodeConstraint instructionFinder_CodeConstraint0 = mock(InstructionFinder.CodeConstraint.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        instructionFinder0.search(", offset delta=", instructionFinder_CodeConstraint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instruction unknown: offset
         //
         verifyException("org.apache.bcel.util.InstructionFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)24;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)0;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      String string0 = "return";
      I2D i2D0 = new I2D();
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) i2D0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionList instructionList1 = new InstructionList(byteArray0);
      // Undeclared exception!
      try { 
        instructionFinder0.search("return", instructionHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction handle   -1: i2d[135](1) not found in instruction list.
         //
         verifyException("org.apache.bcel.util.InstructionFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 1.0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      instructionFinder0.search("ret");
      instructionFinder0.getInstructionList();
      pUSH0.toString();
      InstructionFinder.CodeConstraint instructionFinder_CodeConstraint0 = mock(InstructionFinder.CodeConstraint.class, new ViolatedAssumptionAnswer());
      instructionFinder0.search("if_icmp");
      instructionFinder0.reread();
      // Undeclared exception!
      try { 
        instructionFinder0.search("dconst_1[15](1) (PUSH)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instruction unknown: 15
         //
         verifyException("org.apache.bcel.util.InstructionFinder", e);
      }
  }
}
