/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:25:51 GMT 2022
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedOutputStream;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.InnerClass;
import org.apache.bcel.classfile.InnerClasses;
import org.apache.bcel.classfile.JavaClass;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InnerClasses_ESTest extends InnerClasses_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InnerClass[] innerClassArray0 = new InnerClass[0];
      InnerClasses innerClasses0 = new InnerClasses(0, (-681), innerClassArray0, (ConstantPool) null);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Attribute attribute0 = innerClasses0.copy(constantPool0);
      assertNotSame(attribute0, innerClasses0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InnerClass[] innerClassArray0 = new InnerClass[3];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      InnerClasses innerClasses0 = new InnerClasses(2033, 2033, innerClassArray0, constantPool0);
      // Undeclared exception!
      try { 
        innerClasses0.copy(constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.InnerClasses", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InnerClass[] innerClassArray0 = new InnerClass[1];
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      InnerClasses innerClasses0 = new InnerClasses(2206, 0, innerClassArray0, constantPool0);
      InnerClass[] innerClassArray1 = innerClasses0.getInnerClasses();
      assertSame(innerClassArray0, innerClassArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InnerClasses innerClasses0 = new InnerClasses((-487), 0, (InnerClass[]) null, (ConstantPool) null);
      Attribute attribute0 = innerClasses0.copy((ConstantPool) null);
      assertNotSame(attribute0, innerClasses0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InnerClass[] innerClassArray0 = new InnerClass[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      InnerClasses innerClasses0 = new InnerClasses(1, 93, innerClassArray0, constantPool0);
      Attribute attribute0 = innerClasses0.copy(constantPool0);
      assertNotSame(attribute0, innerClasses0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InnerClass[] innerClassArray0 = new InnerClass[5];
      InnerClass innerClass0 = new InnerClass(0, 47, 0, 0);
      innerClassArray0[0] = innerClass0;
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      InnerClasses innerClasses0 = new InnerClasses(0, 0, innerClassArray0, constantPool0);
      // Undeclared exception!
      try { 
        innerClasses0.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InnerClass[] innerClassArray0 = new InnerClass[3];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      InnerClasses innerClasses0 = new InnerClasses(2033, 2033, innerClassArray0, constantPool0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        innerClasses0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InnerClass[] innerClassArray0 = new InnerClass[2];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      InnerClasses innerClasses0 = new InnerClasses((-3453), 193, innerClassArray0, constantPool0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      // Undeclared exception!
      try { 
        innerClasses0.accept(descendingVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InnerClasses innerClasses0 = null;
      try {
        innerClasses0 = new InnerClasses((InnerClasses) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.InnerClasses", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      InnerClasses innerClasses0 = null;
      try {
        innerClasses0 = new InnerClasses(1383, 277, dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      InnerClasses innerClasses0 = null;
      try {
        innerClasses0 = new InnerClasses((-476), (-476), dataInputStream0, constantPool0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InnerClass[] innerClassArray0 = new InnerClass[0];
      InnerClasses innerClasses0 = new InnerClasses(0, (-681), innerClassArray0, (ConstantPool) null);
      InnerClass[] innerClassArray1 = innerClasses0.getInnerClasses();
      assertSame(innerClassArray1, innerClassArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InnerClass[] innerClassArray0 = new InnerClass[3];
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      InnerClasses innerClasses0 = new InnerClasses((-451), 0, innerClassArray0, constantPool0);
      // Undeclared exception!
      try { 
        innerClasses0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.InnerClasses", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InnerClass[] innerClassArray0 = new InnerClass[0];
      InnerClasses innerClasses0 = new InnerClasses(0, (-681), innerClassArray0, (ConstantPool) null);
      String string0 = innerClasses0.toString();
      assertEquals("InnerClasses(0):", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InnerClass[] innerClassArray0 = new InnerClass[0];
      InnerClasses innerClasses0 = new InnerClasses(0, (-681), innerClassArray0, (ConstantPool) null);
      innerClasses0.setInnerClasses(innerClassArray0);
      assertEquals(0, innerClasses0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InnerClass[] innerClassArray0 = new InnerClass[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      InnerClasses innerClasses0 = new InnerClasses(1, 86, innerClassArray0, constantPool0);
      innerClasses0.setInnerClasses((InnerClass[]) null);
      assertEquals(86, innerClasses0.getLength());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InnerClass[] innerClassArray0 = new InnerClass[4];
      InnerClasses innerClasses0 = new InnerClasses((-671), (-17), innerClassArray0, (ConstantPool) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        innerClasses0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.InnerClasses", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InnerClass[] innerClassArray0 = new InnerClass[0];
      InnerClasses innerClasses0 = new InnerClasses(0, (-681), innerClassArray0, (ConstantPool) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("InnerClasses(0):");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      innerClasses0.dump(dataOutputStream0);
      assertEquals((-681), innerClasses0.getLength());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[3] = (byte) (-62);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      ConstantPool constantPool0 = new ConstantPool(dataInputStream0);
      InnerClasses innerClasses0 = null;
      try {
        innerClasses0 = new InnerClasses(26, 26, dataInputStream0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      ConstantPool constantPool0 = new ConstantPool(dataInputStream0);
      InnerClasses innerClasses0 = new InnerClasses(26, 26, dataInputStream0, constantPool0);
      assertEquals(26, innerClasses0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InnerClass[] innerClassArray0 = new InnerClass[0];
      InnerClasses innerClasses0 = new InnerClasses(0, (-681), innerClassArray0, (ConstantPool) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      innerClasses0.accept(emptyVisitor0);
      assertEquals(0, innerClasses0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InnerClass[] innerClassArray0 = new InnerClass[0];
      InnerClasses innerClasses0 = new InnerClasses(0, (-681), innerClassArray0, (ConstantPool) null);
      InnerClasses innerClasses1 = new InnerClasses(innerClasses0);
      assertEquals((byte)6, innerClasses1.getTag());
  }
}
