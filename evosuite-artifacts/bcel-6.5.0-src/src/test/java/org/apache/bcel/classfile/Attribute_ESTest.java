/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 21:47:35 GMT 2022
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.PipedInputStream;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantValue;
import org.apache.bcel.classfile.Deprecated;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.ExceptionTable;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LineNumberTable;
import org.apache.bcel.classfile.ModulePackages;
import org.apache.bcel.classfile.PMGClass;
import org.apache.bcel.classfile.RuntimeInvisibleAnnotations;
import org.apache.bcel.classfile.SourceFile;
import org.apache.bcel.classfile.StackMap;
import org.apache.bcel.classfile.StackMapEntry;
import org.apache.bcel.classfile.UnknownAttributeReader;
import org.apache.bcel.util.ClassLoaderRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Attribute_ESTest extends Attribute_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Deprecated deprecated0 = new Deprecated((-356), 1, byteArray0, (ConstantPool) null);
      deprecated0.setNameIndex(96);
      assertEquals(96, deprecated0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[5];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ExceptionTable exceptionTable0 = new ExceptionTable((-3210), 1754, intArray0, (ConstantPool) null);
      Attribute attribute0 = exceptionTable0.copy(constantPool0);
      assertEquals(1754, attribute0.getLength());
      assertEquals((-3210), attribute0.getNameIndex());
      assertNotSame(attribute0, exceptionTable0);
      assertEquals((byte)3, attribute0.getTag());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SourceFile sourceFile0 = new SourceFile(3076, (-1306), 0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        sourceFile0.getName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[1];
      ModulePackages modulePackages0 = new ModulePackages((-1785), (-1), intArray0, (ConstantPool) null);
      MockFile mockFile0 = new MockFile(",;0M");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      modulePackages0.dump(dataOutputStream0);
      assertEquals((-1), modulePackages0.getLength());
      assertEquals((-1785), modulePackages0.getNameIndex());
      assertEquals((byte)23, modulePackages0.getTag());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[1];
      ModulePackages modulePackages0 = new ModulePackages((-1785), (-1), intArray0, (ConstantPool) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      modulePackages0.accept(emptyVisitor0);
      assertEquals((byte)23, modulePackages0.getTag());
      assertEquals((-1), modulePackages0.getLength());
      assertEquals((-1785), modulePackages0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Deprecated deprecated0 = new Deprecated((-1263), 0, byteArray0, (ConstantPool) null);
      deprecated0.toString();
      assertEquals(0, deprecated0.getLength());
      assertEquals((byte)8, deprecated0.getTag());
      assertEquals((-1263), deprecated0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SourceFile sourceFile0 = new SourceFile((byte)0, (byte)0, (-940), (ConstantPool) null);
      byte byte0 = sourceFile0.getTag();
      assertEquals(0, sourceFile0.getLength());
      assertEquals(0, sourceFile0.getNameIndex());
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Deprecated deprecated0 = new Deprecated((-1263), 0, byteArray0, (ConstantPool) null);
      deprecated0.tag = (byte) (-121);
      byte byte0 = deprecated0.getTag();
      assertEquals((byte) (-121), byte0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstantValue constantValue0 = new ConstantValue(12, (byte) (-121), (byte) (-121), (ConstantPool) null);
      int int0 = constantValue0.getNameIndex();
      assertEquals((byte)1, constantValue0.getTag());
      assertEquals(12, int0);
      assertEquals((-121), constantValue0.getLength());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Deprecated deprecated0 = new Deprecated((-1263), 0, byteArray0, (ConstantPool) null);
      int int0 = deprecated0.getLength();
      assertEquals(0, int0);
      assertEquals((byte)8, deprecated0.getTag());
      assertEquals((-1263), deprecated0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Deprecated deprecated0 = new Deprecated((-1263), 1415, byteArray0, (ConstantPool) null);
      int int0 = deprecated0.getLength();
      assertEquals((-1263), deprecated0.getNameIndex());
      assertEquals(1415, int0);
      assertEquals((byte)8, deprecated0.getTag());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      SourceFile sourceFile0 = new SourceFile((byte) (-50), (byte) (-50), dataInputStream0, (ConstantPool) null);
      Attribute attribute0 = sourceFile0.copy((ConstantPool) null);
      assertEquals((byte)0, attribute0.getTag());
      assertEquals((-50), attribute0.getNameIndex());
      assertEquals((-50), attribute0.getLength());
      assertNotSame(attribute0, sourceFile0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Deprecated deprecated0 = new Deprecated((-1263), 40, byteArray0, (ConstantPool) null);
      assertEquals((byte)8, deprecated0.getTag());
      
      deprecated0.tag = (byte) (-121);
      deprecated0.copy((ConstantPool) null);
      assertEquals((-1263), deprecated0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Deprecated deprecated0 = new Deprecated((-1263), 0, byteArray0, (ConstantPool) null);
      Attribute attribute0 = deprecated0.copy((ConstantPool) null);
      assertEquals((-1263), attribute0.getNameIndex());
      assertEquals(0, attribute0.getLength());
      assertEquals((byte)8, attribute0.getTag());
      assertNotSame(attribute0, deprecated0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PMGClass pMGClass0 = new PMGClass((byte)1, (byte)0, (byte)0, (byte)25, (ConstantPool) null);
      // Undeclared exception!
      try { 
        pMGClass0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.PMGClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.readAttribute((DataInputStream) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      try { 
        Attribute.readAttribute(dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.readAttribute((DataInput) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      try { 
        Attribute.readAttribute((DataInput) dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      try { 
        Attribute.readAttribute((DataInput) dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMap stackMap0 = new StackMap((byte)2, 1615, (StackMapEntry[]) null, constantPool0);
      // Undeclared exception!
      try { 
        stackMap0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SourceFile sourceFile0 = new SourceFile((byte)0, (byte)0, (-940), (ConstantPool) null);
      sourceFile0.setConstantPool((ConstantPool) null);
      assertEquals((byte)0, sourceFile0.getTag());
      assertEquals(0, sourceFile0.getNameIndex());
      assertEquals(0, sourceFile0.getLength());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Deprecated deprecated0 = new Deprecated((-1263), 0, byteArray0, (ConstantPool) null);
      int int0 = deprecated0.getNameIndex();
      assertEquals(0, deprecated0.getLength());
      assertEquals((-1263), int0);
      assertEquals((byte)8, deprecated0.getTag());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[1];
      ModulePackages modulePackages0 = new ModulePackages((-1785), (-1), intArray0, (ConstantPool) null);
      int int0 = modulePackages0.getLength();
      assertEquals((-1), int0);
      assertEquals((-1785), modulePackages0.getNameIndex());
      assertEquals((byte)23, modulePackages0.getTag());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantValue constantValue0 = new ConstantValue((-1), 1662, (-1), (ConstantPool) null);
      assertEquals(1662, constantValue0.getLength());
      
      constantValue0.setLength((-1));
      assertEquals((-1), constantValue0.getLength());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      try { 
        Attribute.readAttribute(dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[1];
      ModulePackages modulePackages0 = new ModulePackages((-1785), (-1), intArray0, (ConstantPool) null);
      modulePackages0.getConstantPool();
      assertEquals((-1785), modulePackages0.getNameIndex());
      assertEquals((-1), modulePackages0.getLength());
      assertEquals((byte)23, modulePackages0.getTag());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Deprecated deprecated0 = new Deprecated((-1263), 0, byteArray0, (ConstantPool) null);
      Deprecated deprecated1 = (Deprecated)deprecated0.clone();
      assertNotSame(deprecated1, deprecated0);
      assertEquals((byte)8, deprecated1.getTag());
      assertEquals((-1263), deprecated1.getNameIndex());
      assertEquals(0, deprecated1.getLength());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals("Integer.java", javaClass0.getSourceFileName());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<LineNumberTable> class0 = LineNumberTable.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals("LineNumberTable.java", javaClass0.getSourceFileName());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Attribute.println("InnerClasses");
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UnknownAttributeReader unknownAttributeReader0 = mock(UnknownAttributeReader.class, new ViolatedAssumptionAnswer());
      Attribute.addAttributeReader("=+dB$&>X_&o", unknownAttributeReader0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Attribute.removeAttributeReader("=+dB$&>X_&o");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<RuntimeInvisibleAnnotations> class0 = RuntimeInvisibleAnnotations.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.getAllInterfaces();
      assertEquals("RuntimeInvisibleAnnotations.java", javaClass0.getSourceFileName());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Deprecated deprecated0 = new Deprecated((-2793), 4096, byteArray0, (ConstantPool) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      // Undeclared exception!
      try { 
        deprecated0.dump(dataOutputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Deprecated deprecated0 = new Deprecated(1402, 1402, byteArray0, (ConstantPool) null);
      byte byte0 = deprecated0.getTag();
      assertEquals((byte)8, byte0);
      assertEquals(1402, deprecated0.getNameIndex());
      assertEquals(1402, deprecated0.getLength());
  }
}
