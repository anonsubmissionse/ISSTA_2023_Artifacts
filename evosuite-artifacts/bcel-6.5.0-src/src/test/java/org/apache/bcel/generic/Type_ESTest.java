/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 21:33:31 GMT 2022
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.lang.reflect.Method;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.FCMPG;
import org.apache.bcel.generic.FCONST;
import org.apache.bcel.generic.LCONST;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.ReferenceType;
import org.apache.bcel.generic.ReturnaddressType;
import org.apache.bcel.generic.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Type_ESTest extends Type_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getArgumentTypesSize("#Gu(V[u0ET");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: u0ET
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getArgumentTypesSize("hk+Q.*($P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getArgumentTypes("(\"xZ_aG9<D1 M:cx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"xZ_aG9<D1 M:cx
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Type type0 = Type.UNKNOWN;
      FCMPG fCMPG0 = new FCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type1 = fCMPG0.getType(constantPoolGen0);
      boolean boolean0 = type0.equals(type1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      objectType0.UNKNOWN.toString();
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      byte byte0 = (byte)0;
      // Undeclared exception!
      try { 
        BasicType.getType(byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: 0
         //
         verifyException("org.apache.bcel.generic.BasicType", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getArgumentTypesSize("E20OEF0 8BV(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E20OEF0 8BV(
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getArgumentTypes("{,r.JA2/QAjq(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {,r.JA2/QAjq(
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ReturnaddressType returnaddressType0 = ReturnaddressType.NO_TARGET;
      String string0 = ((Type) ((org.apache.bcel.generic.Type) returnaddressType0).THROWABLE).UNKNOWN.toString();
      assertEquals("<unknown object>", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = Type.size(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = Type.size(218);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ReturnaddressType returnaddressType0 = ReturnaddressType.NO_TARGET;
      Type type0 = returnaddressType0.normalizeForStackOrLocal();
      assertSame(returnaddressType0, type0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Type type0 = Type.getReturnType("Vn!o< E/;]7Ay");
      Type type1 = type0.normalizeForStackOrLocal();
      assertEquals("V", type1.getSignature());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<BasicType>[] classArray0 = (Class<BasicType>[]) Array.newInstance(Class.class, 0);
      Type[] typeArray0 = Type.getTypes(classArray0);
      assertEquals(0, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Type type0 = Type.getType("Vn!o< E/;]7Ay");
      assertEquals((byte)12, type0.getType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ReturnaddressType returnaddressType0 = ReturnaddressType.NO_TARGET;
      byte byte0 = returnaddressType0.getType();
      assertEquals((byte)16, byte0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BasicType basicType0 = Type.BYTE;
      byte byte0 = basicType0.getType();
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Type[] typeArray0 = Type.getArgumentTypes("(II)Ljava/lang/Class;");
      assertEquals(2, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = Type.encode(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = Type.encode(91, 640);
      assertEquals(2651, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = Type.encode((-331), 1604);
      assertEquals((-75), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = Type.consumed(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = Type.consumed(125);
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = Type.consumed((-2191));
      assertEquals((-548), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BasicType basicType0 = Type.INT;
      ArrayType arrayType0 = new ArrayType(basicType0, 8);
      assertEquals("[[[[[[[[I", arrayType0.getSignature());
      
      String string0 = arrayType0.toString();
      assertEquals((byte)13, arrayType0.getType());
      assertEquals("int[][][][][][][][]", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      objectType0.setSignature("");
      // Undeclared exception!
      try { 
        objectType0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getTypes((Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getTypeSize("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getTypeSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getReturnTypeSize("[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getReturnTypeSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getReturnType("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: [
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getArgumentTypesSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      try { 
        Type.getTypeSize("[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Type type0 = Type.getType(class0);
      assertEquals((byte)10, type0.getType());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getType((Class<?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class must not be null
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getType("*[j2rZR@M/#=3}[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: j2rZR@M/#=3}[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getType("LYo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LYo
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      try { 
        Type.getType("[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Type type0 = Type.getReturnType("Vn!o< E/;]7Ay");
      int int0 = type0.getSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BasicType basicType0 = Type.CHAR;
      int int0 = basicType0.getSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ReferenceType referenceType0 = Type.NULL;
      boolean boolean0 = referenceType0.equals(referenceType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FCONST fCONST0 = new FCONST();
      Type type0 = fCONST0.getType((ConstantPoolGen) null);
      String string0 = type0.getSignature();
      assertEquals("F", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getReturnTypeSize("LNa{'F-RTVnX12gDn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LNa{'F-RTVnX12gDn
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = Type.getArgumentTypesSize("(II)Ljava/lang/Class;");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getArgumentTypesSize("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = Type.getArgumentTypesSize("()Ljava/lang/Throwable;");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 2);
      Class<Integer> class0 = Integer.TYPE;
      classArray0[0] = class0;
      classArray0[1] = class0;
      Type[] typeArray0 = Type.getTypes(classArray0);
      assertEquals(2, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Class<ReturnaddressType> class0 = ReturnaddressType.class;
      Type type0 = Type.getType(class0);
      assertEquals((byte)14, type0.getType());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 2);
      Class<Integer> class0 = Integer.TYPE;
      classArray0[0] = class0;
      // Undeclared exception!
      try { 
        Type.getTypes(classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class must not be null
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Type[] typeArray0 = Type.getArgumentTypes("()Ljava/lang/Object;");
      assertEquals(0, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getArgumentTypes("Invalid method signature: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Invalid method signature: 
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Type type0 = Type.getType("Class must not be null");
      assertEquals("C", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ReferenceType referenceType0 = Type.NULL;
      Type[] typeArray0 = new Type[1];
      // Undeclared exception!
      try { 
        Type.getMethodSignature(referenceType0, typeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      String string0 = Type.getMethodSignature(objectType0, (Type[]) null);
      assertEquals("()Ljava/lang/String;", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = Type.getReturnTypeSize("Vn!o< E/;]7Ay");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LCONST lCONST0 = new LCONST();
      Type type0 = lCONST0.getType((ConstantPoolGen) null);
      int int0 = type0.getSize();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = Type.getTypeSize("Invalid method signature: ");
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BasicType basicType0 = Type.DOUBLE;
      int int0 = basicType0.getSize();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BasicType basicType0 = Type.SHORT;
      Type type0 = basicType0.normalizeForStackOrLocal();
      assertEquals((byte)10, type0.getType());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BasicType basicType0 = Type.CHAR;
      Type type0 = basicType0.normalizeForStackOrLocal();
      assertEquals("I", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BasicType basicType0 = Type.BYTE;
      Type type0 = basicType0.normalizeForStackOrLocal();
      assertEquals("I", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BasicType basicType0 = Type.BOOLEAN;
      Type type0 = basicType0.normalizeForStackOrLocal();
      assertEquals("I", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ReferenceType referenceType0 = Type.NULL;
      String string0 = referenceType0.toString();
      assertEquals("<null object>", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = Type.UNKNOWN;
      boolean boolean0 = type0.equals(constantPoolGen0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Type type0 = Type.getReturnType("()[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[Lorg/apache/bcel/generic/Type$1;");
      assertEquals("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[Lorg/apache/bcel/generic/Type$1;", type0.getSignature());
      assertEquals((byte)13, type0.getType());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Type type0 = Type.UNKNOWN;
      type0.hashCode();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = Type.getReturnTypeSize("()[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[Lorg/apache/bcel/generic/Type$1;");
      assertEquals(1, int0);
  }
}
