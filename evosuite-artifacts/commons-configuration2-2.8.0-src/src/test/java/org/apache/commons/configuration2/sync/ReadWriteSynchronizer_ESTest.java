/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 01:09:55 GMT 2022
 */

package org.apache.commons.configuration2.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import org.apache.commons.configuration2.sync.ReadWriteSynchronizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReadWriteSynchronizer_ESTest extends ReadWriteSynchronizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ReentrantReadWriteLock reentrantReadWriteLock0 = new ReentrantReadWriteLock();
      ReadWriteSynchronizer readWriteSynchronizer0 = new ReadWriteSynchronizer(reentrantReadWriteLock0);
      readWriteSynchronizer0.beginWrite();
      readWriteSynchronizer0.endWrite();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ReadWriteSynchronizer readWriteSynchronizer0 = new ReadWriteSynchronizer((ReadWriteLock) null);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ReentrantReadWriteLock reentrantReadWriteLock0 = new ReentrantReadWriteLock();
      ReadWriteSynchronizer readWriteSynchronizer0 = new ReadWriteSynchronizer(reentrantReadWriteLock0);
      readWriteSynchronizer0.beginRead();
      readWriteSynchronizer0.endRead();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ReadWriteSynchronizer readWriteSynchronizer0 = new ReadWriteSynchronizer();
      readWriteSynchronizer0.beginRead();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ReadWriteSynchronizer readWriteSynchronizer0 = new ReadWriteSynchronizer();
      // Undeclared exception!
      try { 
        readWriteSynchronizer0.endWrite();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.locks.ReentrantReadWriteLock$Sync", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ReadWriteSynchronizer readWriteSynchronizer0 = new ReadWriteSynchronizer();
      // Undeclared exception!
      try { 
        readWriteSynchronizer0.endRead();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // attempt to unlock read lock, not locked by current thread
         //
         verifyException("java.util.concurrent.locks.ReentrantReadWriteLock$Sync", e);
      }
  }
}
