/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 01:09:52 GMT 2022
 */

package org.apache.commons.configuration2.spring;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Properties;
import oracle.ucp.jdbc.PoolXADataSourceImpl;
import org.apache.commons.configuration2.Configuration;
import org.apache.commons.configuration2.DatabaseConfiguration;
import org.apache.commons.configuration2.DynamicCombinedConfiguration;
import org.apache.commons.configuration2.EnvironmentConfiguration;
import org.apache.commons.configuration2.MapConfiguration;
import org.apache.commons.configuration2.PatternSubtreeConfigurationWrapper;
import org.apache.commons.configuration2.SubnodeConfiguration;
import org.apache.commons.configuration2.spring.ConfigurationPropertySource;
import org.apache.commons.configuration2.tree.NodeSelector;
import org.apache.commons.configuration2.tree.OverrideCombiner;
import org.apache.commons.configuration2.tree.TrackedNodeModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConfigurationPropertySource_ESTest extends ConfigurationPropertySource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PoolXADataSourceImpl poolXADataSourceImpl0 = new PoolXADataSourceImpl();
      Properties properties0 = poolXADataSourceImpl0.getConnectionProperties();
      MapConfiguration mapConfiguration0 = new MapConfiguration(properties0);
      ConfigurationPropertySource configurationPropertySource0 = new ConfigurationPropertySource("org.apache.commons.configuration2.spring.ConfigurationPropertySource", mapConfiguration0);
      String[] stringArray0 = configurationPropertySource0.getPropertyNames();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PoolXADataSourceImpl poolXADataSourceImpl0 = new PoolXADataSourceImpl();
      Properties properties0 = poolXADataSourceImpl0.getConnectionProperties();
      MapConfiguration mapConfiguration0 = new MapConfiguration(properties0);
      ConfigurationPropertySource configurationPropertySource0 = new ConfigurationPropertySource("org.apache.commons.configuration2.spring.ConfigurationPropertySource", mapConfiguration0);
      Object object0 = configurationPropertySource0.getProperty("oracle.security.client.password");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PoolXADataSourceImpl poolXADataSourceImpl0 = new PoolXADataSourceImpl();
      Properties properties0 = poolXADataSourceImpl0.getConnectionProperties();
      MapConfiguration mapConfiguration0 = new MapConfiguration(properties0);
      ConfigurationPropertySource configurationPropertySource0 = new ConfigurationPropertySource("org.apache.commons.configuration2.spring.ConfigurationPropertySource", mapConfiguration0);
      properties0.setProperty("", "L$@");
      Object object0 = configurationPropertySource0.getProperty("");
      assertEquals("L$@", object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OverrideCombiner overrideCombiner0 = new OverrideCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(overrideCombiner0);
      NodeSelector nodeSelector0 = new NodeSelector("org.apache.commons.configuration2.spring.ConfigurationPropertySource");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(dynamicCombinedConfiguration0, nodeSelector0, true);
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(dynamicCombinedConfiguration0, trackedNodeModel0);
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(subnodeConfiguration0, "");
      ConfigurationPropertySource configurationPropertySource0 = new ConfigurationPropertySource("logout", patternSubtreeConfigurationWrapper0);
      // Undeclared exception!
      try { 
        configurationPropertySource0.getPropertyNames();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@15[keys=[org.apache.commons.configuration2.spring.ConfigurationPropertySource]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DatabaseConfiguration databaseConfiguration0 = new DatabaseConfiguration();
      ConfigurationPropertySource configurationPropertySource0 = new ConfigurationPropertySource("Invalid year value", databaseConfiguration0);
      // Undeclared exception!
      try { 
        configurationPropertySource0.getPropertyNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DatabaseConfiguration$JdbcOperation", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConfigurationPropertySource configurationPropertySource0 = new ConfigurationPropertySource("5Rm|IJFn/p");
      // Undeclared exception!
      try { 
        configurationPropertySource0.getPropertyNames();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.apache.commons.configuration2.Configuration
         //
         verifyException("org.apache.commons.configuration2.spring.ConfigurationPropertySource", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConfigurationPropertySource configurationPropertySource0 = null;
      try {
        configurationPropertySource0 = new ConfigurationPropertySource("yLbJQv&MU'g,0)Op", (Configuration) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Property source must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConfigurationPropertySource configurationPropertySource0 = null;
      try {
        configurationPropertySource0 = new ConfigurationPropertySource("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Property source name must contain at least one character
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      ConfigurationPropertySource configurationPropertySource0 = new ConfigurationPropertySource("lA@CHV", environmentConfiguration0);
      String[] stringArray0 = configurationPropertySource0.getPropertyNames();
      assertEquals(62, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MapConfiguration mapConfiguration0 = new MapConfiguration((Properties) null);
      ConfigurationPropertySource configurationPropertySource0 = new ConfigurationPropertySource("O iS&NS~#\"_6a", mapConfiguration0);
      // Undeclared exception!
      try { 
        configurationPropertySource0.getProperty("%");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.MapConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConfigurationPropertySource configurationPropertySource0 = new ConfigurationPropertySource("QaU|4tb(6");
      // Undeclared exception!
      try { 
        configurationPropertySource0.getProperty("QaU|4tb(6");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.apache.commons.configuration2.Configuration
         //
         verifyException("org.apache.commons.configuration2.spring.ConfigurationPropertySource", e);
      }
  }
}
