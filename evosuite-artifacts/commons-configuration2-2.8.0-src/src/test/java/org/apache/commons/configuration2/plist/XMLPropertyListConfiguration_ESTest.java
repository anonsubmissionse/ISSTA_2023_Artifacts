/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 00:30:00 GMT 2022
 */

package org.apache.commons.configuration2.plist;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStreamWriter;
import java.io.Reader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.ArrayList;
import org.apache.commons.configuration2.DynamicCombinedConfiguration;
import org.apache.commons.configuration2.HierarchicalConfiguration;
import org.apache.commons.configuration2.PatternSubtreeConfigurationWrapper;
import org.apache.commons.configuration2.PropertiesConfiguration;
import org.apache.commons.configuration2.SubnodeConfiguration;
import org.apache.commons.configuration2.SystemConfiguration;
import org.apache.commons.configuration2.YAMLConfiguration;
import org.apache.commons.configuration2.io.FileLocator;
import org.apache.commons.configuration2.plist.XMLPropertyListConfiguration;
import org.apache.commons.configuration2.tree.ImmutableNode;
import org.apache.commons.configuration2.tree.NodeSelector;
import org.apache.commons.configuration2.tree.OverrideCombiner;
import org.apache.commons.configuration2.tree.TrackedNodeModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.hsqldb.rowio.RowOutputBinary;
import org.hsqldb.types.NumberType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XMLPropertyListConfiguration_ESTest extends XMLPropertyListConfiguration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      XMLPropertyListConfiguration xMLPropertyListConfiguration0 = new XMLPropertyListConfiguration(yAMLConfiguration0);
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = mock(FileLocator.FileLocatorBuilder.class, new ViolatedAssumptionAnswer());
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      xMLPropertyListConfiguration0.initFileLocator(fileLocator0);
      // Undeclared exception!
      try { 
        xMLPropertyListConfiguration0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      XMLPropertyListConfiguration xMLPropertyListConfiguration0 = new XMLPropertyListConfiguration(yAMLConfiguration0);
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      xMLPropertyListConfiguration0.copy(systemConfiguration0);
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      // Undeclared exception!
      xMLPropertyListConfiguration0.setPropertyInternal("6`ugIl8g?z", propertiesConfiguration0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      NodeSelector nodeSelector0 = new NodeSelector("XCik4S]<Y?lF{s");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(yAMLConfiguration0, nodeSelector0, true);
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(yAMLConfiguration0, trackedNodeModel0);
      XMLPropertyListConfiguration xMLPropertyListConfiguration0 = null;
      try {
        xMLPropertyListConfiguration0 = new XMLPropertyListConfiguration(subnodeConfiguration0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@12[keys=[XCik4S]<Y?lF{s]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      XMLPropertyListConfiguration xMLPropertyListConfiguration0 = new XMLPropertyListConfiguration(yAMLConfiguration0);
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = mock(FileLocator.FileLocatorBuilder.class, new ViolatedAssumptionAnswer());
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      xMLPropertyListConfiguration0.initFileLocator(fileLocator0);
      xMLPropertyListConfiguration0.setPropertyInternal("6`ugIl8g?z", systemConfiguration0);
      StringWriter stringWriter0 = new StringWriter(107);
      // Undeclared exception!
      xMLPropertyListConfiguration0.write(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XMLPropertyListConfiguration xMLPropertyListConfiguration0 = new XMLPropertyListConfiguration();
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = mock(FileLocator.FileLocatorBuilder.class, new ViolatedAssumptionAnswer());
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      xMLPropertyListConfiguration0.initFileLocator(fileLocator0);
      xMLPropertyListConfiguration0.setPropertyInternal("+y$:s4@dp`", systemConfiguration0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      xMLPropertyListConfiguration0.write(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      XMLPropertyListConfiguration xMLPropertyListConfiguration0 = new XMLPropertyListConfiguration(yAMLConfiguration0);
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = mock(FileLocator.FileLocatorBuilder.class, new ViolatedAssumptionAnswer());
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      xMLPropertyListConfiguration0.initFileLocator(fileLocator0);
      StringWriter stringWriter0 = new StringWriter(107);
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.addProperty("W1hY{`EQ#.i", stringWriter0);
      xMLPropertyListConfiguration0.setPropertyInternal("6`ugIl8g?z", propertiesConfiguration0);
      xMLPropertyListConfiguration0.write(stringWriter0);
      assertEquals("<?xml version=\"1.0\"?>\n<!DOCTYPE plist SYSTEM \"file://localhost/System/Library/DTDs/PropertyList.dtd\">\n<plist version=\"1.0\">\n    <dict>\n        <key>6`ugIl8g?z</key>\n        <dict>\n            <key>W1hY{`EQ#.i</key>\n            <string>&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!DOCTYPE plist SYSTEM &quot;file://localhost/System/Library/DTDs/PropertyList.dtd&quot;&gt;\n&lt;plist version=&quot;1.0&quot;&gt;\n    &lt;dict&gt;\n        &lt;key&gt;6`ugIl8g?z&lt;/key&gt;\n        &lt;dict&gt;\n            &lt;key&gt;W1hY{`EQ#.i&lt;/key&gt;\n</string>\n        </dict>\n    </dict>\n</plist>\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XMLPropertyListConfiguration xMLPropertyListConfiguration0 = new XMLPropertyListConfiguration();
      Boolean boolean0 = new Boolean("VpUIS2SUSF@");
      xMLPropertyListConfiguration0.addPropertyInternal("VpUIS2SUSF@", boolean0);
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = mock(FileLocator.FileLocatorBuilder.class, new ViolatedAssumptionAnswer());
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      xMLPropertyListConfiguration0.initFileLocator(fileLocator0);
      StringWriter stringWriter0 = new StringWriter();
      xMLPropertyListConfiguration0.write(stringWriter0);
      assertEquals("<?xml version=\"1.0\"?>\n<!DOCTYPE plist SYSTEM \"file://localhost/System/Library/DTDs/PropertyList.dtd\">\n<plist version=\"1.0\">\n    <dict>\n        <key>VpUIS2SUSF@</key>\n        <false/>\n    </dict>\n</plist>\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XMLPropertyListConfiguration xMLPropertyListConfiguration0 = new XMLPropertyListConfiguration();
      Boolean boolean0 = Boolean.TRUE;
      xMLPropertyListConfiguration0.addPropertyInternal("VpUWSgS%6", boolean0);
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = mock(FileLocator.FileLocatorBuilder.class, new ViolatedAssumptionAnswer());
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      xMLPropertyListConfiguration0.initFileLocator(fileLocator0);
      StringWriter stringWriter0 = new StringWriter();
      xMLPropertyListConfiguration0.write(stringWriter0);
      assertEquals("<?xml version=\"1.0\"?>\n<!DOCTYPE plist SYSTEM \"file://localhost/System/Library/DTDs/PropertyList.dtd\">\n<plist version=\"1.0\">\n    <dict>\n        <key>VpUWSgS%6</key>\n        <true/>\n    </dict>\n</plist>\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      XMLPropertyListConfiguration xMLPropertyListConfiguration0 = new XMLPropertyListConfiguration(yAMLConfiguration0);
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = mock(FileLocator.FileLocatorBuilder.class, new ViolatedAssumptionAnswer());
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      xMLPropertyListConfiguration0.initFileLocator(fileLocator0);
      Integer integer0 = new Integer(107);
      xMLPropertyListConfiguration0.setPropertyInternal("6`ugIl8g?z", integer0);
      StringWriter stringWriter0 = new StringWriter(107);
      BigDecimal bigDecimal0 = NumberType.MIN_INT;
      xMLPropertyListConfiguration0.addPropertyInternal("ISO-8859-1", bigDecimal0);
      xMLPropertyListConfiguration0.write(stringWriter0);
      assertFalse(xMLPropertyListConfiguration0.isDetailEvents());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XMLPropertyListConfiguration xMLPropertyListConfiguration0 = new XMLPropertyListConfiguration((HierarchicalConfiguration<ImmutableNode>) null);
      byte[] byteArray0 = new byte[4];
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(rowOutputBinary0);
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charsetEncoder0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0);
      try { 
        xMLPropertyListConfiguration0.write(mockPrintWriter0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Save operation not properly initialized! Do not call write(Writer) directly, but use a FileHandler to save a configuration.
         //
         verifyException("org.apache.commons.configuration2.plist.XMLPropertyListConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      XMLPropertyListConfiguration xMLPropertyListConfiguration0 = new XMLPropertyListConfiguration(yAMLConfiguration0);
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = mock(FileLocator.FileLocatorBuilder.class, new ViolatedAssumptionAnswer());
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      xMLPropertyListConfiguration0.initFileLocator(fileLocator0);
      StringWriter stringWriter0 = new StringWriter(107);
      xMLPropertyListConfiguration0.write(stringWriter0);
      assertEquals("<?xml version=\"1.0\"?>\n<!DOCTYPE plist SYSTEM \"file://localhost/System/Library/DTDs/PropertyList.dtd\">\n<plist version=\"1.0\">\n    <dict/>\n</plist>\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XMLPropertyListConfiguration xMLPropertyListConfiguration0 = new XMLPropertyListConfiguration();
      xMLPropertyListConfiguration0.setPropertyInternal("", "");
      Class<Double> class0 = Double.class;
      Object object0 = xMLPropertyListConfiguration0.getArray(class0, "");
      // Undeclared exception!
      try { 
        xMLPropertyListConfiguration0.addPropertyInternal("", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key for add operation must be defined!
         //
         verifyException("org.apache.commons.configuration2.tree.DefaultExpressionEngine", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XMLPropertyListConfiguration xMLPropertyListConfiguration0 = new XMLPropertyListConfiguration();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      xMLPropertyListConfiguration0.addPropertyInternal("5[B7>i0E?i", arrayList0);
      assertFalse(xMLPropertyListConfiguration0.isDetailEvents());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XMLPropertyListConfiguration xMLPropertyListConfiguration0 = new XMLPropertyListConfiguration();
      xMLPropertyListConfiguration0.setPropertyInternal("", "");
      Class<Double> class0 = Double.class;
      Object object0 = xMLPropertyListConfiguration0.getArray(class0, "");
      // Undeclared exception!
      try { 
        xMLPropertyListConfiguration0.setPropertyInternal("", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key for add operation must be defined!
         //
         verifyException("org.apache.commons.configuration2.tree.DefaultExpressionEngine", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XMLPropertyListConfiguration xMLPropertyListConfiguration0 = new XMLPropertyListConfiguration();
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(xMLPropertyListConfiguration0, "{xf/V!o^*1ygNQMmC<");
      xMLPropertyListConfiguration0.setProperty("{xf/V!o^*1ygNQMmC<", patternSubtreeConfigurationWrapper0);
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = mock(FileLocator.FileLocatorBuilder.class, new ViolatedAssumptionAnswer());
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      xMLPropertyListConfiguration0.initFileLocator(fileLocator0);
      StringWriter stringWriter0 = new StringWriter();
      xMLPropertyListConfiguration0.write(stringWriter0);
      assertEquals("<?xml version=\"1.0\"?>\n<!DOCTYPE plist SYSTEM \"file://localhost/System/Library/DTDs/PropertyList.dtd\">\n<plist version=\"1.0\">\n    <dict>\n        <key>{xf/V!o^*1ygNQMmC&lt;</key>\n        <dict/>\n    </dict>\n</plist>\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XMLPropertyListConfiguration xMLPropertyListConfiguration0 = new XMLPropertyListConfiguration();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      xMLPropertyListConfiguration0.setPropertyInternal("5[B7>i0E?i", arrayList0);
      assertFalse(xMLPropertyListConfiguration0.isDetailEvents());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XMLPropertyListConfiguration xMLPropertyListConfiguration0 = new XMLPropertyListConfiguration((ImmutableNode) null);
      assertFalse(xMLPropertyListConfiguration0.isThrowExceptionOnMissing());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OverrideCombiner overrideCombiner0 = new OverrideCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(overrideCombiner0);
      XMLPropertyListConfiguration xMLPropertyListConfiguration0 = new XMLPropertyListConfiguration(dynamicCombinedConfiguration0);
      try { 
        xMLPropertyListConfiguration0.read((Reader) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to parse the configuration file
         //
         verifyException("org.apache.commons.configuration2.plist.XMLPropertyListConfiguration", e);
      }
  }
}
