/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 01:12:12 GMT 2022
 */

package org.apache.commons.configuration2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.configuration2.AbstractYAMLBasedConfiguration;
import org.apache.commons.configuration2.BaseConfiguration;
import org.apache.commons.configuration2.BaseHierarchicalConfiguration;
import org.apache.commons.configuration2.CombinedConfiguration;
import org.apache.commons.configuration2.CompositeConfiguration;
import org.apache.commons.configuration2.Configuration;
import org.apache.commons.configuration2.ConfigurationMap;
import org.apache.commons.configuration2.DataConfiguration;
import org.apache.commons.configuration2.SubnodeConfiguration;
import org.apache.commons.configuration2.event.Event;
import org.apache.commons.configuration2.tree.ImmutableNode;
import org.apache.commons.configuration2.tree.NodeCombiner;
import org.apache.commons.configuration2.tree.NodeSelector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConfigurationMap_ESTest extends ConfigurationMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      ConfigurationMap.ConfigurationSet configurationMap_ConfigurationSet0 = new ConfigurationMap.ConfigurationSet(combinedConfiguration0);
      Iterator<Map.Entry<Object, Object>> iterator0 = (Iterator<Map.Entry<Object, Object>>)configurationMap_ConfigurationSet0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration((Collection<? extends Configuration>) null);
      DataConfiguration dataConfiguration0 = new DataConfiguration(compositeConfiguration0);
      ConfigurationMap.ConfigurationSet configurationMap_ConfigurationSet0 = new ConfigurationMap.ConfigurationSet(dataConfiguration0);
      int int0 = configurationMap_ConfigurationSet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      ConfigurationMap configurationMap0 = new ConfigurationMap(compositeConfiguration0);
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)configurationMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      ConfigurationMap configurationMap0 = new ConfigurationMap(baseHierarchicalConfiguration0);
      Integer integer0 = new Integer((-1738009603));
      configurationMap0.put(integer0, integer0);
      Object object0 = configurationMap0.put(integer0, (Object) null);
      assertEquals((-1738009603), object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConfigurationMap configurationMap0 = new ConfigurationMap((Configuration) null);
      Configuration configuration0 = configurationMap0.getConfiguration();
      assertNull(configuration0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration((Collection<? extends Configuration>) null);
      ConfigurationMap configurationMap0 = new ConfigurationMap(compositeConfiguration0);
      configurationMap0.putIfAbsent((Object) null, compositeConfiguration0);
      Object object0 = configurationMap0.get((Object) null);
      assertSame(compositeConfiguration0, object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NodeCombiner nodeCombiner0 = mock(NodeCombiner.class, new ViolatedAssumptionAnswer());
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(nodeCombiner0);
      AbstractYAMLBasedConfiguration abstractYAMLBasedConfiguration0 = new AbstractYAMLBasedConfiguration(combinedConfiguration0);
      NodeSelector nodeSelector0 = abstractYAMLBasedConfiguration0.getSubConfigurationNodeSelector((String) null);
      SubnodeConfiguration subnodeConfiguration0 = abstractYAMLBasedConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, combinedConfiguration0);
      ConfigurationMap configurationMap0 = new ConfigurationMap(subnodeConfiguration0);
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        configurationMap0.put(integer0, nodeSelector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@24[keys=[null]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      ConfigurationMap configurationMap0 = new ConfigurationMap((Configuration) null);
      // Undeclared exception!
      try { 
        configurationMap0.put((Object) null, combinedConfiguration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.ConfigurationMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration((Configuration) null);
      ConfigurationMap configurationMap0 = new ConfigurationMap(compositeConfiguration0);
      // Undeclared exception!
      try { 
        configurationMap0.put("", "off");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.CompositeConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      AbstractYAMLBasedConfiguration abstractYAMLBasedConfiguration0 = new AbstractYAMLBasedConfiguration(baseHierarchicalConfiguration0);
      NodeSelector nodeSelector0 = abstractYAMLBasedConfiguration0.getSubConfigurationNodeSelector("K?5Bb`");
      SubnodeConfiguration subnodeConfiguration0 = abstractYAMLBasedConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, baseHierarchicalConfiguration0);
      ConfigurationMap configurationMap0 = new ConfigurationMap(subnodeConfiguration0);
      // Undeclared exception!
      try { 
        configurationMap0.get(subnodeConfiguration0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@20[keys=[K?5Bb`]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConfigurationMap configurationMap0 = new ConfigurationMap((Configuration) null);
      // Undeclared exception!
      try { 
        configurationMap0.get("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.ConfigurationMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      ConfigurationMap configurationMap0 = new ConfigurationMap(compositeConfiguration0);
      Class<Integer> class0 = Integer.class;
      Object object0 = configurationMap0.put(compositeConfiguration0, class0);
      assertNull(object0);
      
      boolean boolean0 = configurationMap0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      ConfigurationMap configurationMap0 = new ConfigurationMap(combinedConfiguration0);
      BaseConfiguration baseConfiguration0 = new BaseConfiguration();
      Integer integer0 = new Integer(2106);
      BiFunction<Object, Object, Event> biFunction0 = (BiFunction<Object, Object, Event>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      configurationMap0.merge(integer0, baseConfiguration0, biFunction0);
      configurationMap0.clear();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      ConfigurationMap configurationMap0 = new ConfigurationMap(combinedConfiguration0);
      Configuration configuration0 = configurationMap0.getConfiguration();
      assertSame(combinedConfiguration0, configuration0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      ConfigurationMap configurationMap0 = new ConfigurationMap(compositeConfiguration0);
      Object object0 = configurationMap0.get(compositeConfiguration0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      ConfigurationMap configurationMap0 = new ConfigurationMap(compositeConfiguration0);
      Class<Integer> class0 = Integer.class;
      configurationMap0.put(compositeConfiguration0, class0);
      BiFunction<Object, Object, ImmutableNode> biFunction0 = (BiFunction<Object, Object, ImmutableNode>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      configurationMap0.replaceAll(biFunction0);
  }
}
