/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 00:13:43 GMT 2022
 */

package org.apache.commons.configuration2.convert;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.io.File;
import java.io.StringWriter;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.CharBuffer;
import java.nio.file.Path;
import java.time.Duration;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import org.apache.commons.configuration2.builder.BuilderConfigurationWrapperFactory;
import org.apache.commons.configuration2.convert.DefaultConversionHandler;
import org.apache.commons.configuration2.convert.PropertyConverter;
import org.apache.commons.configuration2.interpol.ConfigurationInterpolator;
import org.apache.commons.configuration2.interpol.DefaultLookups;
import org.apache.commons.configuration2.interpol.DummyLookup;
import org.apache.commons.configuration2.tree.NodeNameMatchers;
import org.apache.commons.vfs2.FileSystemOptions;
import org.apache.commons.vfs2.provider.DefaultURLStreamHandler;
import org.apache.commons.vfs2.provider.VfsComponentContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PropertyConverter_ESTest extends PropertyConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      try { 
        PropertyConverter.toColor(" object");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value  object can't be converted to a Color
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Locale locale0 = PropertyConverter.toLocale("_am``Trn!\"Q&P");
      assertEquals("_AM``TRN!\"Q&P", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        PropertyConverter.toLocale(" can't be converted to a Path");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value  can't be converted to a Path can't be converted to a Locale
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      Class<DefaultLookups> class0 = DefaultLookups.class;
      try { 
        PropertyConverter.toNumber(inetAddress0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Conversion error when trying to convert java.net.Inet4Address@0000000001 to org.apache.commons.configuration2.interpol.DefaultLookups
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Integer integer0 = new Integer(1147);
      Class<NodeNameMatchers> class0 = NodeNameMatchers.class;
      try { 
        PropertyConverter.toEnum((Object) integer0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value 1147 can't be converted to a org.apache.commons.configuration2.tree.NodeNameMatchers
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      try { 
        PropertyConverter.toDate("", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value  can't be converted to a Date
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        PropertyConverter.toCalendar("Ambiguous statement, missing ';' between expression@", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value Ambiguous statement, missing ';' between expression@ can't be converted to a Calendar
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Calendar calendar0 = PropertyConverter.toCalendar("$", "$");
      assertTrue(calendar0.isLenient());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0, fileSystemOptions0);
      URL uRL0 = MockURL.URL("jLblu-~aLoujadx1@f", "jLblu-~aLoujadx1@f", 0, "jLblu-~aLoujadx1@f", (URLStreamHandler) defaultURLStreamHandler0);
      URL uRL1 = PropertyConverter.toURL(uRL0);
      assertSame(uRL1, uRL0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0, (FileSystemOptions) null);
      URL uRL0 = MockURL.URL("I92XoC6'EX9y;Mk0io", "I92XoC6'EX9y;Mk0io", 3, "I92XoC6'EX9y;Mk0io", (URLStreamHandler) defaultURLStreamHandler0);
      URL uRL1 = PropertyConverter.toURL(uRL0);
      assertEquals((-1), uRL1.getDefaultPort());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      URI uRI0 = PropertyConverter.toURI("S:O");
      assertNull(uRI0.getRawQuery());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      URI uRI0 = PropertyConverter.toURI("");
      assertNull(uRI0.getRawQuery());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Long long0 = new Long((-1001L));
      Short short0 = PropertyConverter.toShort(long0);
      assertEquals((short) (-1001), (short)short0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Long long0 = new Long(902L);
      BigDecimal bigDecimal0 = PropertyConverter.toBigDecimal(long0);
      Short short0 = PropertyConverter.toShort(bigDecimal0);
      assertEquals((short)902, (short)short0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("zpP", 4174);
      Pattern pattern1 = PropertyConverter.toPattern(pattern0);
      assertEquals("zpP", pattern1.toString());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("`x=}]5tAZ&b;@e", (-1));
      Pattern pattern1 = PropertyConverter.toPattern(pattern0);
      assertSame(pattern1, pattern0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Long long0 = new Long(0L);
      Class<Locale> class0 = Locale.class;
      Number number0 = PropertyConverter.toNumber(long0, class0);
      assertEquals(0L, number0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Float float0 = new Float(0.75F);
      Class<Integer> class0 = Integer.class;
      Number number0 = PropertyConverter.toNumber(float0, class0);
      assertEquals(0.75F, number0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Long long0 = new Long(137438953504L);
      Class<NodeNameMatchers> class0 = NodeNameMatchers.class;
      Number number0 = PropertyConverter.toNumber(long0, class0);
      assertEquals(137438953504L, number0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Double double0 = new Double((-1035.4472665524));
      Class<URL> class0 = URL.class;
      Number number0 = PropertyConverter.toNumber(double0, class0);
      assertEquals((-1035.4472665524), number0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-60));
      Long long0 = PropertyConverter.toLong(byte0);
      assertEquals((-60L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Long long0 = new Long(0L);
      Integer integer0 = PropertyConverter.toInteger(long0);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Short short0 = new Short((short) (-4));
      Double double0 = PropertyConverter.toDouble(short0);
      Float float0 = PropertyConverter.toFloat(double0);
      Integer integer0 = PropertyConverter.toInteger(float0);
      assertEquals((-4), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress1 = PropertyConverter.toInetAddress(inetAddress0);
      assertFalse(inetAddress1.isMulticastAddress());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Float float0 = PropertyConverter.toFloat(bigInteger0);
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Integer integer0 = new Integer((-961));
      Float float0 = PropertyConverter.toFloat(integer0);
      assertEquals((-961.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      Float float1 = PropertyConverter.toFloat(float0);
      assertEquals(Float.NaN, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(" can't bK converted to a File");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, " can't bK converted to a File");
      File file0 = PropertyConverter.toFile(" can't bK converted to a File");
      assertTrue(file0.isFile());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      File file0 = PropertyConverter.toFile(".X00n$<pJwYay#b[V");
      assertEquals(0L, file0.lastModified());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" can't bK converted to a File", " can't bK converted to a File");
      File file0 = PropertyConverter.toFile(mockFile0);
      assertFalse(file0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      File file0 = PropertyConverter.toFile("");
      assertEquals(0L, file0.getFreeSpace());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Short short0 = new Short((short)0);
      Long long0 = PropertyConverter.toLong(short0);
      Double double0 = PropertyConverter.toDouble(long0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Double double0 = new Double((-1035.4472665524));
      Double double1 = PropertyConverter.toDouble(double0);
      assertEquals((-1035.4472665524), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Color color0 = Color.red;
      Color color1 = PropertyConverter.toColor(color0);
      assertEquals(0, color1.getGreen());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Color color0 = Color.YELLOW;
      Color color1 = PropertyConverter.toColor(color0);
      assertEquals(255, color1.getAlpha());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-23), 1793, (-2048472060));
      mockGregorianCalendar0.setMinimalDaysInFirstWeek((-2048472060));
      Calendar calendar0 = PropertyConverter.toCalendar(mockGregorianCalendar0, "0xjava.util.ArrayList@0000000001");
      assertSame(mockGregorianCalendar0, calendar0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(70, (-1579), (-1579));
      mockGregorianCalendar0.setFirstDayOfWeek((-1579));
      Calendar calendar0 = PropertyConverter.toCalendar(mockGregorianCalendar0, " can't be converted to a ");
      assertSame(calendar0, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte byte1 = PropertyConverter.toByte(byte0);
      assertEquals((byte)0, (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = PropertyConverter.toBoolean(boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Double double0 = new Double(0.0);
      BigInteger bigInteger0 = PropertyConverter.toBigInteger(double0);
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-96));
      BigInteger bigInteger0 = PropertyConverter.toBigInteger(byte0);
      assertEquals((short) (-96), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Long long0 = new Long((-1988L));
      BigDecimal bigDecimal0 = PropertyConverter.toBigDecimal(long0);
      assertEquals((byte)60, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<BuilderConfigurationWrapperFactory.EventSourceSupport> class0 = BuilderConfigurationWrapperFactory.EventSourceSupport.class;
      boolean boolean0 = PropertyConverter.isEnum(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      URL uRL0 = mockFile0.toURL();
      try { 
        PropertyConverter.toShort(uRL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert java.net.URL@0000000001 to java.lang.Short
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toShort((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        PropertyConverter.toNumber((Object) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      File file0 = PropertyConverter.toFile(" can't bK converted to a File");
      try { 
        PropertyConverter.toLong(file0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert org.evosuite.runtime.mock.java.io.MockFile@0000000001 to java.lang.Long
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toLong((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toInternetAddress((Object) null, "k");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      try { 
        PropertyConverter.toInteger(mockDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert org.evosuite.runtime.mock.java.util.MockDate@0000000001 to java.lang.Integer
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toInteger((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Character character0 = Character.valueOf('\'');
      try { 
        PropertyConverter.toInetAddress(character0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value ' can't be converted to a InetAddress
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Character character0 = Character.valueOf('{');
      try { 
        PropertyConverter.toFloat(character0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.Character@0000000001 to java.lang.Float
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toFloat((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<BuilderConfigurationWrapperFactory.EventSourceSupport> class0 = BuilderConfigurationWrapperFactory.EventSourceSupport.class;
      // Undeclared exception!
      try { 
        PropertyConverter.toEnum((Object) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      try { 
        PropertyConverter.toDouble(mockGregorianCalendar0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert org.evosuite.runtime.mock.java.util.MockGregorianCalendar@0000000001 to java.lang.Double
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toDouble((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toDate(" can't be converted to a File", " can't be converted to a File");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'c'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toCalendar("Armenia (``Trn!\"Q&P)", "Armenia (``Trn!\"Q&P)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'A'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      URI uRI0 = MockURI.create("jLblu-~aLoujadx1@f");
      try { 
        PropertyConverter.toByte(uRI0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert java.net.URI@0000000001 to java.lang.Byte
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toByte((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      try { 
        PropertyConverter.toBigInteger(locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert java.util.Locale@0000000001 to java.math.BigInteger
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toBigInteger((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      try { 
        PropertyConverter.toBigDecimal(boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.Boolean@0000000001 to java.math.BigDecimal
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toBigDecimal((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      // Undeclared exception!
      try { 
        PropertyConverter.to(class0, (Object) null, defaultConversionHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.isEnum((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("L?V`2`G7Xa9c");
      try { 
        PropertyConverter.toCalendar(pattern0, "L?V`2`G7Xa9c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value L?V`2`G7Xa9c can't be converted to a Calendar
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      try { 
        PropertyConverter.toDate((Object) null, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value null can't be converted to a Date
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      try { 
        PropertyConverter.toColor(boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value false can't be converted to a Color
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("lwR1u^,SrJ9P&qsPh3");
      try { 
        PropertyConverter.toLocale(inetAddress0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value lwR1u^,SrJ9P&qsPh3/200.42.42.0 can't be converted to a Locale
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-128));
      try { 
        PropertyConverter.toPattern(byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value -128 can't be converted to a Pattern
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      try { 
        PropertyConverter.toURL(byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value 0 can't be converted to an URL
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Short short0 = new Short((byte)0);
      try { 
        PropertyConverter.toURI(short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value 0 can't be converted to an URI
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object object0 = new Object();
      try { 
        PropertyConverter.toFile(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value java.lang.Object@82b4ca9 can't be converted to a File
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Double double0 = new Double(0.0);
      BigDecimal bigDecimal0 = PropertyConverter.toBigDecimal(double0);
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      try { 
        PropertyConverter.toDuration(locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value zh_TW can't be converted to a Duration
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(1.7976931348623157E308);
      Float float0 = PropertyConverter.toFloat(bigDecimal0);
      assertEquals(Float.POSITIVE_INFINITY, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      try { 
        PropertyConverter.toCharacter(boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value 'true' cannot be converted to a Character object!
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(288);
      try { 
        PropertyConverter.toBoolean(charBuffer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 can't be converted to a Boolean object
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<URL> class0 = URL.class;
      try { 
        PropertyConverter.to(class0, class0, (DefaultConversionHandler) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value class java.net.URL can't be converted to an URL
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      try { 
        PropertyConverter.to(class0, class0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value class java.util.Calendar can't be converted to a Calendar
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      try { 
        PropertyConverter.to(class0, class0, (DefaultConversionHandler) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.Class@0000000001 to java.lang.Integer
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      Class<Boolean> class0 = Boolean.class;
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      try { 
        PropertyConverter.to(class0, uRI0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value file:///tmp/foo.bar can't be converted to a Boolean object
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      Object object0 = PropertyConverter.to(class0, class0, defaultConversionHandler0);
      assertEquals("class java.lang.Object", object0.toString());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toCalendar("0bjava.lang.Object@0000000002", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockDate mockDate0 = new MockDate((byte)58, (byte)58, (byte)58, (byte)58, (byte)58, (byte)58);
      Calendar calendar0 = PropertyConverter.toCalendar(mockDate0, "S:O");
      assertEquals(1, calendar0.getFirstDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toDate("3VO)iz.hW0", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = PropertyConverter.toDate(mockGregorianCalendar0, "_am_``Trn!\"Q&P");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2036015195), (-2036015195), (-2036015195), (-2036015195), (-2036015195));
      Date date0 = PropertyConverter.toDate(mockDate0, "4Pn");
      assertSame(mockDate0, date0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Double double0 = new Double(0.0);
      Class<DummyLookup> class0 = DummyLookup.class;
      DummyLookup dummyLookup0 = PropertyConverter.toEnum((Object) double0, class0);
      assertEquals(DummyLookup.INSTANCE, dummyLookup0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<DummyLookup> class0 = DummyLookup.class;
      try { 
        PropertyConverter.toEnum((Object) "1", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value 1 can't be converted to a org.apache.commons.configuration2.interpol.DummyLookup
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DummyLookup dummyLookup0 = DummyLookup.INSTANCE;
      Class<DummyLookup> class0 = DummyLookup.class;
      DummyLookup dummyLookup1 = PropertyConverter.toEnum((Object) dummyLookup0, class0);
      assertEquals(DummyLookup.INSTANCE, dummyLookup1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      try { 
        PropertyConverter.toInternetAddress("C", "org.apache.commons.jexl2.parser.ParserTreeConstants");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value C can't be converted to an InternetAddress
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      Object object0 = PropertyConverter.toInternetAddress(defaultConversionHandler0, "org.apache.commons.configuration2.convert.DefaultConversionHandler");
      assertSame(object0, defaultConversionHandler0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Integer integer0 = new Integer(813);
      try { 
        PropertyConverter.toInternetAddress(integer0, " can't be converted to a File");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value 813 can't be converted to an InternetAddress
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      URI uRI0 = MockURI.aFTPURI;
      Class<InetAddress> class0 = InetAddress.class;
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      // Undeclared exception!
      try { 
        defaultConversionHandler0.toArray(uRI0, class0, configurationInterpolator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value ftp://foo.bar can't be converted to a InetAddress
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      InetAddress inetAddress1 = PropertyConverter.toInetAddress(inetAddress0);
      assertFalse(inetAddress1.isLoopbackAddress());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      try { 
        PropertyConverter.toColor("0bjava.lang.Object@0000000002");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value 0bjava.lang.Object@0000000002 can't be converted to a Color
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      try { 
        PropertyConverter.toColor("%.'|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value %.'| can't be converted to a Color
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      try { 
        PropertyConverter.toColor("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value  can't be converted to a Color
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      try { 
        PropertyConverter.toColor("#s=!=|s QSLi9+$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value #s=!=|s QSLi9+$ can't be converted to a Color
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Color color0 = Color.cyan;
      Color color1 = PropertyConverter.toColor(color0);
      assertSame(color0, color1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Locale locale0 = PropertyConverter.toLocale("&#");
      assertEquals("&#", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Locale locale0 = PropertyConverter.toLocale("_am_``Trn!\"Q&P");
      assertEquals("_AM_``Trn!\"Q&P", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      Locale locale1 = PropertyConverter.toLocale(locale0);
      assertSame(locale0, locale1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      try { 
        PropertyConverter.toPattern("!:<mQnNTc.(<-N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value !:<mQnNTc.(<-N can't be converted to a Pattern
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("^!cDe+4t'5Kn+%");
      Pattern pattern1 = PropertyConverter.toPattern(pattern0);
      assertEquals(0, pattern1.flags());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      try { 
        PropertyConverter.toURL("7,lq y&93Mf;Zu-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value 7,lq y&93Mf;Zu- can't be converted to an URL
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = PropertyConverter.toURL(uRL0);
      assertSame(uRL1, uRL0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      try { 
        PropertyConverter.toURI("|_T|*+6(in:^)O8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value |_T|*+6(in:^)O8 can't be converted to an URI
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = PropertyConverter.toURI(uRI0);
      assertNull(uRI1.getRawFragment());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      try { 
        PropertyConverter.toPath(defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value org.apache.commons.configuration2.convert.DefaultConversionHandler@1 can't be converted to a Path
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Path path0 = PropertyConverter.toPath("3VO)iz.hW0");
      Path path1 = PropertyConverter.toPath(path0);
      assertSame(path0, path1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      File file0 = MockFile.createTempFile("0borg.evosuite.runtime.mock.java.util.MockGregorianCalendar@0000000001", "0borg.evosuite.runtime.mock.java.util.MockGregorianCalendar@0000000001");
      Path path0 = PropertyConverter.toPath(file0);
      assertNotNull(path0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Path path0 = PropertyConverter.toPath("3VO)iz.hW0");
      File file0 = PropertyConverter.toFile(path0);
      assertFalse(file0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(1508);
      BigDecimal bigDecimal1 = PropertyConverter.toBigDecimal(bigDecimal0);
      assertEquals((byte) (-28), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = PropertyConverter.toBigInteger(bigInteger0);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      try { 
        PropertyConverter.toDuration("6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert 6 to Duration
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Duration duration1 = PropertyConverter.toDuration(duration0);
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Double double0 = new Double(2874.9);
      Double double1 = PropertyConverter.toDouble(double0);
      assertEquals(2874.9, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Float float0 = new Float(774.46537955);
      Float float1 = PropertyConverter.toFloat(float0);
      assertEquals(774.4654F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Long long0 = new Long(1008L);
      Long long1 = PropertyConverter.toLong(long0);
      assertEquals(1008L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Float float0 = new Float(774.46537955);
      Long long0 = PropertyConverter.toLong(float0);
      assertEquals(774L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Integer integer0 = new Integer('j');
      Integer integer1 = PropertyConverter.toInteger(integer0);
      assertEquals(106, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Short short0 = new Short((short)0);
      Short short1 = PropertyConverter.toShort(short0);
      assertEquals((short)0, (short)short1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-46));
      Byte byte1 = PropertyConverter.toByte(byte0);
      assertEquals((byte) (-46), (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      Byte byte0 = PropertyConverter.toByte(bigDecimal0);
      assertEquals((byte)1, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Character character0 = PropertyConverter.toCharacter(byte0);
      assertEquals('0', (char)character0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      try { 
        PropertyConverter.toBoolean("java.lang.BDolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value java.lang.BDolean can't be converted to a Boolean object
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Boolean boolean0 = PropertyConverter.toBoolean("1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      StringWriter stringWriter0 = new StringWriter('j');
      Class<Duration> class0 = Duration.class;
      try { 
        PropertyConverter.to(class0, stringWriter0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value  can't be converted to a Duration
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<InetAddress> class0 = InetAddress.class;
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      Inet4Address inet4Address0 = (Inet4Address)PropertyConverter.to(class0, " can't be converted to a Boolean object", defaultConversionHandler0);
      assertFalse(inet4Address0.isMCNodeLocal());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<Color> class0 = Color.class;
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      try { 
        PropertyConverter.to(class0, class0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value class java.awt.Color can't be converted to a Color
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<CharBuffer> class0 = CharBuffer.class;
      Float float0 = new Float(431.86);
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      try { 
        PropertyConverter.to(class0, float0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value '431.86' (class java.lang.Float) can't be converted to a java.nio.CharBuffer object
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      try { 
        PropertyConverter.to(class0, list0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value [] can't be converted to a Locale
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<Pattern> class0 = Pattern.class;
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      try { 
        PropertyConverter.to(class0, class0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value class java.util.regex.Pattern can't be converted to a Pattern
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<URI> class0 = URI.class;
      try { 
        PropertyConverter.to(class0, class0, (DefaultConversionHandler) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value class java.net.URI can't be converted to an URI
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<File> class0 = File.class;
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      try { 
        PropertyConverter.to(class0, class0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value class java.io.File can't be converted to a File
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-46));
      Class<Date> class0 = Date.class;
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      try { 
        PropertyConverter.to(class0, byte0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value -46 can't be converted to a Date
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<BigInteger> class0 = BigInteger.class;
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      try { 
        PropertyConverter.to(class0, class0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.Class@0000000001 to java.math.BigInteger
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<BigDecimal> class0 = BigDecimal.class;
      Double double0 = new Double(0.0);
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      BigDecimal bigDecimal0 = (BigDecimal)PropertyConverter.to(class0, double0, defaultConversionHandler0);
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<Double> class0 = Double.class;
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      try { 
        PropertyConverter.to(class0, class0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.Class@0000000001 to java.lang.Double
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      try { 
        PropertyConverter.to(class0, class0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.Class@0000000002 to java.lang.Float
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      try { 
        PropertyConverter.to(class0, class0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.Class@0000000001 to java.lang.Double
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Float float0 = new Float(774.46537955);
      Class<Short> class0 = Short.TYPE;
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      Object object0 = PropertyConverter.to(class0, float0, defaultConversionHandler0);
      assertEquals((short)774, object0);
      
      Integer integer0 = PropertyConverter.toInteger(object0);
      assertEquals(774, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Float float0 = new Float(774.46537955);
      Class<Short> class0 = Short.class;
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      Object object0 = PropertyConverter.to(class0, float0, defaultConversionHandler0);
      assertEquals((short)774, object0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      Class<Float> class0 = Float.class;
      Short short0 = new Short((short) (-1024));
      Object object0 = PropertyConverter.to(class0, short0, defaultConversionHandler0);
      assertEquals((-1024.0F), object0);
      
      Double double0 = PropertyConverter.toDouble(object0);
      assertEquals((-1024.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      DummyLookup dummyLookup0 = DummyLookup.INSTANCE;
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      try { 
        PropertyConverter.to(class0, dummyLookup0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert org.apache.commons.configuration2.interpol.DummyLookup@0000000001 to java.lang.Byte
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2763, 1314, 1314, 627, 627, 573);
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      try { 
        PropertyConverter.to(class0, mockGregorianCalendar0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert org.evosuite.runtime.mock.java.util.MockGregorianCalendar@0000000001 to java.lang.Long
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Class<Long> class0 = Long.class;
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      try { 
        PropertyConverter.to(class0, mockGregorianCalendar0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert org.evosuite.runtime.mock.java.util.MockGregorianCalendar@0000000001 to java.lang.Long
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      Class<Integer> class0 = Integer.TYPE;
      try { 
        PropertyConverter.to(class0, inetAddress0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not convert java.net.Inet4Address@0000000001 to java.lang.Integer
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      try { 
        PropertyConverter.to(class0, class0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value 'char' cannot be converted to a Character object!
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<Character> class0 = Character.class;
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      try { 
        PropertyConverter.to(class0, class0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value 'class java.lang.Character' cannot be converted to a Character object!
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      try { 
        PropertyConverter.to(class0, class0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value boolean can't be converted to a Boolean object
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<String> class0 = String.class;
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      Object object0 = PropertyConverter.to(class0, class0, defaultConversionHandler0);
      assertEquals("class java.lang.String", object0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<BuilderConfigurationWrapperFactory.EventSourceSupport> class0 = BuilderConfigurationWrapperFactory.EventSourceSupport.class;
      try { 
        PropertyConverter.to(class0, class0, (DefaultConversionHandler) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The value class org.apache.commons.configuration2.builder.BuilderConfigurationWrapperFactory$EventSourceSupport can't be converted to a org.apache.commons.configuration2.builder.BuilderConfigurationWrapperFactory$EventSourceSupport
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<BigDecimal> class0 = BigDecimal.class;
      boolean boolean0 = PropertyConverter.isEnum(class0);
      assertFalse(boolean0);
  }
}
