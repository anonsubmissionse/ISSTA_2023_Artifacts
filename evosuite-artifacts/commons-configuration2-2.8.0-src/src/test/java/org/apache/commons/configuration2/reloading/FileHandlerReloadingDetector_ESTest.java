/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 00:56:37 GMT 2022
 */

package org.apache.commons.configuration2.reloading;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Hashtable;
import org.apache.commons.configuration2.JSONConfiguration;
import org.apache.commons.configuration2.XMLConfiguration;
import org.apache.commons.configuration2.YAMLConfiguration;
import org.apache.commons.configuration2.event.ConfigurationEvent;
import org.apache.commons.configuration2.io.FileBased;
import org.apache.commons.configuration2.io.FileHandler;
import org.apache.commons.configuration2.io.URLConnectionOptions;
import org.apache.commons.configuration2.io.VFSFileSystem;
import org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector;
import org.apache.commons.configuration2.tree.NodeNameMatchers;
import org.apache.commons.vfs2.provider.DefaultURLStreamHandler;
import org.apache.commons.vfs2.provider.VfsComponentContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileHandlerReloadingDetector_ESTest extends FileHandlerReloadingDetector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileUtil fileUtil0 = FileUtil.getFileUtil();
      File file0 = fileUtil0.canonicalFile("org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector");
      file0.setLastModified((byte)7);
      fileHandler0.setFile(file0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, (byte)8);
      boolean boolean0 = fileHandlerReloadingDetector0.isReloadingRequired();
      assertEquals(8L, fileHandlerReloadingDetector0.getRefreshDelay());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileUtil fileUtil0 = FileUtil.getFileUtil();
      File file0 = fileUtil0.canonicalFile("org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector");
      file0.setLastModified(1042L);
      fileHandler0.setFile(file0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, 0L);
      fileHandlerReloadingDetector0.refresh();
      boolean boolean0 = fileHandlerReloadingDetector0.isReloadingRequired();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileUtil fileUtil0 = FileUtil.getFileUtil();
      File file0 = fileUtil0.canonicalFile("org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector");
      fileHandler0.setFile(file0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, 0L);
      fileHandlerReloadingDetector0.updateLastModified((byte) (-120));
      boolean boolean0 = fileHandlerReloadingDetector0.isReloadingRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, 0L);
      fileHandlerReloadingDetector0.isReloadingRequired();
      boolean boolean0 = fileHandlerReloadingDetector0.isReloadingRequired();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, 0L);
      long long0 = fileHandlerReloadingDetector0.getRefreshDelay();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration(xMLConfiguration0);
      FileHandler fileHandler0 = new FileHandler(yAMLConfiguration0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, (-470L));
      long long0 = fileHandlerReloadingDetector0.getRefreshDelay();
      assertEquals((-470L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, 1L);
      long long0 = fileHandlerReloadingDetector0.getLastModificationDate();
      assertEquals(0L, long0);
      assertEquals(1L, fileHandlerReloadingDetector0.getRefreshDelay());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileUtil fileUtil0 = FileUtil.getFileUtil();
      File file0 = fileUtil0.canonicalFile("org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector");
      fileHandler0.setFile(file0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, (byte)8);
      long long0 = fileHandlerReloadingDetector0.getLastModificationDate();
      assertEquals(8L, fileHandlerReloadingDetector0.getRefreshDelay());
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector();
      fileHandlerReloadingDetector0.getFile();
      assertEquals(5000L, fileHandlerReloadingDetector0.getRefreshDelay());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Hashtable<String, NodeNameMatchers> hashtable0 = new Hashtable<String, NodeNameMatchers>();
      FileHandler fileHandler0 = FileHandler.fromMap(hashtable0);
      fileHandler0.setPath(".ar");
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, 3483L);
      fileHandlerReloadingDetector0.getFile();
      assertEquals(3483L, fileHandlerReloadingDetector0.getRefreshDelay());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0);
      fileHandler0.setFileName("");
      fileHandlerReloadingDetector0.getFile();
      assertEquals(5000L, fileHandlerReloadingDetector0.getRefreshDelay());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileUtil fileUtil0 = FileUtil.getFileUtil();
      File file0 = fileUtil0.canonicalFile("org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector");
      fileHandler0.setFile(file0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, (byte)8);
      fileHandlerReloadingDetector0.getFile();
      assertEquals(8L, fileHandlerReloadingDetector0.getRefreshDelay());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(jSONConfiguration0);
      FileHandler fileHandler0 = new FileHandler(xMLConfiguration0);
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0);
      URL uRL0 = MockURL.URL("jar", "jar", 2234, "jar", (URLStreamHandler) defaultURLStreamHandler0);
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      fileHandler0.setURL(uRL0, uRLConnectionOptions0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0);
      // Undeclared exception!
      try { 
        fileHandlerReloadingDetector0.reloadingPerformed();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(jSONConfiguration0);
      FileHandler fileHandler0 = new FileHandler(xMLConfiguration0);
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0);
      URL uRL0 = MockURL.URL("jar", "jar", 2234, "jar", (URLStreamHandler) defaultURLStreamHandler0);
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      fileHandler0.setURL(uRL0, uRLConnectionOptions0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0);
      // Undeclared exception!
      try { 
        fileHandlerReloadingDetector0.refresh();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Hashtable<String, ConfigurationEvent> hashtable0 = new Hashtable<String, ConfigurationEvent>();
      FileHandler fileHandler0 = FileHandler.fromMap(hashtable0);
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      fileHandler0.setFileSystem(vFSFileSystem0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0);
      // Undeclared exception!
      try { 
        fileHandlerReloadingDetector0.refresh();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.provider.UriParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      fileHandler0.setFileSystem(vFSFileSystem0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, (-1L));
      // Undeclared exception!
      try { 
        fileHandlerReloadingDetector0.isReloadingRequired();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.provider.UriParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0);
      URL uRL0 = MockURL.URL("jar", "jar", 2208, "jar", (URLStreamHandler) defaultURLStreamHandler0);
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      fileHandler0.setURL(uRL0, uRLConnectionOptions0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0);
      // Undeclared exception!
      try { 
        fileHandlerReloadingDetector0.getLastModificationDate();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0);
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      fileHandler0.setFileSystem(vFSFileSystem0);
      // Undeclared exception!
      try { 
        fileHandlerReloadingDetector0.getLastModificationDate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.provider.UriParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(jSONConfiguration0);
      FileHandler fileHandler0 = new FileHandler(xMLConfiguration0);
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0);
      URL uRL0 = MockURL.URL("jar", "jar", 2234, "org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector", (URLStreamHandler) defaultURLStreamHandler0);
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      fileHandler0.setURL(uRL0, uRLConnectionOptions0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0);
      // Undeclared exception!
      try { 
        fileHandlerReloadingDetector0.getFile();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0);
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      fileHandler0.setFileSystem(vFSFileSystem0);
      // Undeclared exception!
      try { 
        fileHandlerReloadingDetector0.getFile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.provider.UriParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector((FileHandler) null, 0L);
      assertEquals(0L, fileHandlerReloadingDetector0.getRefreshDelay());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, (byte)8);
      fileHandlerReloadingDetector0.getFileHandler();
      assertEquals(8L, fileHandlerReloadingDetector0.getRefreshDelay());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, (byte)8);
      long long0 = fileHandlerReloadingDetector0.getRefreshDelay();
      assertEquals(8L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler((FileBased) null);
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0);
      URL uRL0 = MockURL.URL("jar", "jar", 2234, "org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector", (URLStreamHandler) defaultURLStreamHandler0);
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      fileHandler0.setURL(uRL0, uRLConnectionOptions0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0);
      // Undeclared exception!
      try { 
        fileHandlerReloadingDetector0.isReloadingRequired();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      MockFile mockFile0 = new MockFile("\u2191", "\u2191");
      fileHandler0.setFile(mockFile0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0);
      boolean boolean0 = fileHandlerReloadingDetector0.isReloadingRequired();
      assertEquals(5000L, fileHandlerReloadingDetector0.getRefreshDelay());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      FileUtil fileUtil0 = FileUtil.getFileUtil();
      File file0 = fileUtil0.canonicalFile("org.apache.commons.configuration2.reloading.FileHandlerReloadngDetector");
      fileUtil0.openOutputStreamElement("org.apache.commons.configuration2.reloading.FileHandlerReloadngDetector");
      fileHandler0.setFile(file0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, (byte)22);
      fileHandlerReloadingDetector0.updateLastModified(1392409281377L);
      boolean boolean0 = fileHandlerReloadingDetector0.isReloadingRequired();
      assertTrue(boolean0);
      assertEquals(22L, fileHandlerReloadingDetector0.getRefreshDelay());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, (byte)22);
      fileHandlerReloadingDetector0.isReloadingRequired();
      boolean boolean0 = fileHandlerReloadingDetector0.isReloadingRequired();
      assertFalse(boolean0);
      assertEquals(22L, fileHandlerReloadingDetector0.getRefreshDelay());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector();
      fileHandlerReloadingDetector0.reloadingPerformed();
      assertEquals(5000L, fileHandlerReloadingDetector0.getRefreshDelay());
  }
}
