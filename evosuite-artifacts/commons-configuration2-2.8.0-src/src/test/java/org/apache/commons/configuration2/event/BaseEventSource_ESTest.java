/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 00:54:44 GMT 2022
 */

package org.apache.commons.configuration2.event;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.util.Collection;
import java.util.Hashtable;
import java.util.List;
import java.util.Set;
import javax.naming.Context;
import org.apache.commons.configuration2.BaseHierarchicalConfiguration;
import org.apache.commons.configuration2.CombinedConfiguration;
import org.apache.commons.configuration2.CompositeConfiguration;
import org.apache.commons.configuration2.DynamicCombinedConfiguration;
import org.apache.commons.configuration2.EnvironmentConfiguration;
import org.apache.commons.configuration2.HierarchicalConfiguration;
import org.apache.commons.configuration2.INIConfiguration;
import org.apache.commons.configuration2.JNDIConfiguration;
import org.apache.commons.configuration2.JSONConfiguration;
import org.apache.commons.configuration2.PatternSubtreeConfigurationWrapper;
import org.apache.commons.configuration2.PropertiesConfiguration;
import org.apache.commons.configuration2.PropertiesConfigurationLayout;
import org.apache.commons.configuration2.SystemConfiguration;
import org.apache.commons.configuration2.XMLConfiguration;
import org.apache.commons.configuration2.YAMLConfiguration;
import org.apache.commons.configuration2.event.BaseEventSource;
import org.apache.commons.configuration2.event.ConfigurationErrorEvent;
import org.apache.commons.configuration2.event.ConfigurationEvent;
import org.apache.commons.configuration2.event.EventListener;
import org.apache.commons.configuration2.event.EventListenerRegistrationData;
import org.apache.commons.configuration2.event.EventType;
import org.apache.commons.configuration2.tree.ImmutableNode;
import org.apache.commons.configuration2.tree.MergeCombiner;
import org.apache.commons.configuration2.tree.UnionCombiner;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseEventSource_ESTest extends BaseEventSource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper((HierarchicalConfiguration<ImmutableNode>) null, "1}Bg{Ya#");
      patternSubtreeConfigurationWrapper0.setDetailEvents(false);
      boolean boolean0 = patternSubtreeConfigurationWrapper0.isDetailEvents();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.SET_PROPERTY;
      EventType<ConfigurationErrorEvent> eventType1 = ConfigurationErrorEvent.ANY;
      EventListener<ConfigurationErrorEvent> eventListener0 = (EventListener<ConfigurationErrorEvent>) mock(EventListener.class, new ViolatedAssumptionAnswer());
      propertiesConfiguration0.addEventListener(eventType1, (EventListener<? super ConfigurationErrorEvent>) eventListener0);
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("EventType [ ERROR ]", hashtable0);
      MergeCombiner mergeCombiner0 = new MergeCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(mergeCombiner0);
      ConfigurationEvent configurationEvent0 = new ConfigurationEvent(dynamicCombinedConfiguration0, eventType0, "v=D-jS\"/TRf<U8n^7;W", hashtable0, false);
      propertiesConfiguration0.fireError(eventType1, (EventType<?>) combinedConfiguration0.COMBINED_INVALIDATE, "", (Object) configurationEvent0, (Throwable) sQLClientInfoException0);
      assertEquals("include", propertiesConfiguration0.getInclude());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.SET_PROPERTY;
      EventType<ConfigurationErrorEvent> eventType1 = ConfigurationErrorEvent.ANY;
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("EventType [ ERROR ]", hashtable0);
      MergeCombiner mergeCombiner0 = new MergeCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(mergeCombiner0);
      ConfigurationEvent configurationEvent0 = new ConfigurationEvent(dynamicCombinedConfiguration0, eventType0, "v=D-jS\"/TRf<U8n^7;W", hashtable0, false);
      propertiesConfiguration0.fireError(eventType1, (EventType<?>) combinedConfiguration0.COMBINED_INVALIDATE, "", (Object) configurationEvent0, (Throwable) sQLClientInfoException0);
      assertTrue(propertiesConfiguration0.isIncludesAllowed());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BaseEventSource baseEventSource0 = new BaseEventSource();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.ADD_PROPERTY;
      baseEventSource0.fireEvent(eventType0, (String) null, (Object) null, false);
      assertFalse(baseEventSource0.isDetailEvents());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      assertFalse(yAMLConfiguration0.isDetailEvents());
      
      yAMLConfiguration0.setDetailEvents(true);
      boolean boolean0 = yAMLConfiguration0.isDetailEvents();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BaseEventSource baseEventSource0 = new BaseEventSource();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.ADD_PROPERTY;
      UnionCombiner unionCombiner0 = new UnionCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(unionCombiner0);
      ConfigurationEvent configurationEvent0 = baseEventSource0.createEvent(eventType0, "os17n;", (Object) combinedConfiguration0, true);
      assertTrue(configurationEvent0.isBeforeUpdate());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BaseEventSource baseEventSource0 = new BaseEventSource();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.CLEAR_TREE;
      Object object0 = new Object();
      ConfigurationEvent configurationEvent0 = baseEventSource0.createEvent(eventType0, "+-eIc(jM.", object0, false);
      assertFalse(configurationEvent0.isBeforeUpdate());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BaseEventSource baseEventSource0 = new BaseEventSource();
      EventType<ConfigurationErrorEvent> eventType0 = ConfigurationErrorEvent.ANY;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", 0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", sQLInvalidAuthorizationSpecException0);
      ConfigurationErrorEvent configurationErrorEvent0 = baseEventSource0.createErrorEvent(eventType0, eventType0, "os17n;", eventType0, sQLNonTransientConnectionException0);
      assertEquals("os17n;", configurationErrorEvent0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      Object object0 = ((BaseEventSource)systemConfiguration0).clone();
      assertNotSame(systemConfiguration0, object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(jSONConfiguration0, "#PD)K~HYI#Z3g3");
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.SET_PROPERTY;
      PropertiesConfigurationLayout propertiesConfigurationLayout0 = new PropertiesConfigurationLayout();
      // Undeclared exception!
      try { 
        patternSubtreeConfigurationWrapper0.removeEventListener(eventType0, (EventListener<? super ConfigurationEvent>) propertiesConfigurationLayout0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Passed in key must select exactly one node (found 0): #PD)K~HYI#Z3g3
         //
         verifyException("org.apache.commons.configuration2.BaseHierarchicalConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(iNIConfiguration0);
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(xMLConfiguration0, "-W_Mq>!");
      EventType<ConfigurationErrorEvent> eventType0 = ConfigurationErrorEvent.ANY;
      // Undeclared exception!
      try { 
        patternSubtreeConfigurationWrapper0.getEventListeners(eventType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Passed in key must select exactly one node (found 0): -W_Mq>!
         //
         verifyException("org.apache.commons.configuration2.BaseHierarchicalConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper((HierarchicalConfiguration<ImmutableNode>) null, "");
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.CLEAR_PROPERTY;
      // Undeclared exception!
      try { 
        patternSubtreeConfigurationWrapper0.getEventListeners(eventType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.PatternSubtreeConfigurationWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper((HierarchicalConfiguration<ImmutableNode>) null, "1}Bg{Ya#");
      // Undeclared exception!
      try { 
        patternSubtreeConfigurationWrapper0.clearEventListeners();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.PatternSubtreeConfigurationWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(baseHierarchicalConfiguration0, ">.:UgP%:w+,t:k1Ag]]");
      // Undeclared exception!
      try { 
        patternSubtreeConfigurationWrapper0.clearErrorListeners();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Passed in key must select exactly one node (found 0): >.:UgP%:w+,t:k1Ag]]
         //
         verifyException("org.apache.commons.configuration2.BaseHierarchicalConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      UnionCombiner unionCombiner0 = new UnionCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(unionCombiner0);
      // Undeclared exception!
      try { 
        environmentConfiguration0.addEventListener((EventType<ConfigurationEvent>) null, (EventListener<? super ConfigurationEvent>) combinedConfiguration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Event type must not be null!
         //
         verifyException("org.apache.commons.configuration2.event.EventListenerRegistrationData", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BaseEventSource baseEventSource0 = new BaseEventSource();
      JNDIConfiguration jNDIConfiguration0 = new JNDIConfiguration((Context) null);
      baseEventSource0.copyEventListeners(jNDIConfiguration0);
      assertFalse(baseEventSource0.isDetailEvents());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      // Undeclared exception!
      try { 
        dynamicCombinedConfiguration0.copyEventListeners((BaseEventSource) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Target event source must not be null!
         //
         verifyException("org.apache.commons.configuration2.event.BaseEventSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      yAMLConfiguration0.addErrorLogListener();
      yAMLConfiguration0.clearErrorListeners();
      assertFalse(yAMLConfiguration0.isThrowExceptionOnMissing());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      compositeConfiguration0.setProperty("1t6[", combinedConfiguration0);
      assertFalse(compositeConfiguration0.isDetailEvents());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.SET_PROPERTY;
      Collection<EventListener<? super ConfigurationEvent>> collection0 = propertiesConfiguration0.getEventListeners(eventType0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.SET_PROPERTY;
      Set<EventType<?>> set0 = EventType.fetchSuperEventTypes(eventType0);
      propertiesConfiguration0.addProperty("EventType [ SET_PROPERTY ]", set0);
      assertFalse(propertiesConfiguration0.isDetailEvents());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UnionCombiner unionCombiner0 = new UnionCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(unionCombiner0);
      combinedConfiguration0.clearEventListeners();
      assertFalse(combinedConfiguration0.isThrowExceptionOnMissing());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BaseEventSource baseEventSource0 = new BaseEventSource();
      try { 
        baseEventSource0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // org.apache.commons.configuration2.event.BaseEventSource
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      List<EventListenerRegistrationData<?>> list0 = propertiesConfiguration0.getEventListenerRegistrations();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      EventType<ConfigurationErrorEvent> eventType0 = ConfigurationErrorEvent.READ;
      EventListener<ConfigurationErrorEvent> eventListener0 = (EventListener<ConfigurationErrorEvent>) mock(EventListener.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = propertiesConfiguration0.removeEventListener(eventType0, (EventListener<? super ConfigurationErrorEvent>) eventListener0);
      assertFalse(boolean0);
  }
}
