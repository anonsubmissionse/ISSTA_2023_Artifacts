/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 00:30:51 GMT 2022
 */

package org.apache.commons.configuration2.plist;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.Enumeration;
import org.apache.commons.configuration2.plist.SimpleCharStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleCharStream_ESTest extends SimpleCharStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0, 1526, 1526);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.maxNextCharInd = 6;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(1526, simpleCharStream0.getBeginColumn());
      assertEquals(1526, simpleCharStream0.getEndColumn());
      assertEquals(1526, simpleCharStream0.getLine());
      assertEquals(1526, simpleCharStream0.getColumn());
      assertEquals(1526, simpleCharStream0.getEndLine());
      assertEquals(1526, simpleCharStream0.getBeginLine());
      assertEquals('\u0000', char0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      simpleCharStream0.ExpandBuff(false);
      assertEquals(1526, simpleCharStream0.getBeginColumn());
      assertEquals(1526, simpleCharStream0.getEndColumn());
      assertEquals(1526, simpleCharStream0.getLine());
      assertEquals(1526, simpleCharStream0.getColumn());
      assertEquals(1526, simpleCharStream0.getEndLine());
      assertEquals(1526, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      char[] charArray0 = simpleCharStream0.GetSuffix(2169);
      assertEquals(2169, charArray0.length);
      assertEquals(1526, simpleCharStream0.getBeginColumn());
      assertEquals(1526, simpleCharStream0.getEndColumn());
      assertEquals(1526, simpleCharStream0.getLine());
      assertEquals(1526, simpleCharStream0.getColumn());
      assertEquals(1526, simpleCharStream0.getEndLine());
      assertEquals(1526, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertNotNull(charArray0);
      
      simpleCharStream0.Done();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.GetSuffix(1926);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, (-2216), 8);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.line = (-2216);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      simpleCharStream0.backup(8);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(4087, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      int int0 = simpleCharStream0.getEndColumn();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, int0);
      assertEquals(4087, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      StringReader stringReader0 = new StringReader("1 /oC Tx+7/");
      assertNotNull(stringReader0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals('\u0000', char0);
      assertEquals(4088, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      simpleCharStream0.backup(1295);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(2793, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      char char1 = simpleCharStream0.readChar();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals('\u0000', char1);
      assertTrue(char1 == char0);
      assertEquals(2794, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      simpleCharStream0.ExpandBuff(true);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(2802, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      char[] charArray0 = simpleCharStream0.GetSuffix(1295);
      assertEquals(1295, charArray0.length);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(2802, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(charArray0);
      
      char char2 = simpleCharStream0.readChar();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals('\u0000', char2);
      assertTrue(char2 == char0);
      assertTrue(char2 == char1);
      assertEquals(2803, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The magic number cannot be null");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      byteArray0[1] = (byte)93;
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 6, (-1));
      assertEquals(2, byteArray0.length);
      assertEquals((-4), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)93}, byteArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertEquals(2, byteArray0.length);
      assertEquals((-4), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)93}, byteArray0);
      
      int int0 = byteArrayInputStream0.read(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((-4), byteArrayInputStream0.available());
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)93}, byteArray0);
      
      int int1 = byteArrayInputStream0.read();
      assertEquals(2, byteArray0.length);
      assertEquals((-4), byteArrayInputStream0.available());
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)93}, byteArray0);
      
      simpleCharStream0.setTabSize((-4495));
      assertEquals(2, byteArray0.length);
      assertEquals((-4), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)93}, byteArray0);
      
      simpleCharStream0.available = (-1);
      assertEquals((-4), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      byteArrayInputStream0.reset();
      assertEquals(2, byteArray0.length);
      assertEquals((-4), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-1), (byte)93}, byteArray0);
      
      boolean boolean4 = byteArrayInputStream0.markSupported();
      assertEquals(2, byteArray0.length);
      assertEquals((-4), byteArrayInputStream0.available());
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)93}, byteArray0);
      
      simpleCharStream0.bufsize = 10;
      assertEquals((-4), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      long long0 = byteArrayInputStream0.skip((-4495));
      assertEquals(2, byteArray0.length);
      assertEquals((-4), byteArrayInputStream0.available());
      assertEquals(0L, long0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)93}, byteArray0);
      
      boolean boolean5 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      
      simpleCharStream0.adjustBeginLineColumn((byte) (-1), (byte)93);
      assertEquals(2, byteArray0.length);
      assertEquals((-4), byteArrayInputStream0.available());
      assertEquals(93, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)93}, byteArray0);
      
      String string0 = simpleCharStream0.GetImage();
      assertEquals(2, byteArray0.length);
      assertEquals((-4), byteArrayInputStream0.available());
      assertEquals(93, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)93}, byteArray0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 10);
      assertNotNull(pushbackInputStream0);
      
      int int0 = 280;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, 280, (-1), 4070);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.Done();
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-29);
      // Undeclared exception!
      try { 
        simpleCharStream0.adjustBeginLineColumn(10, 280);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0, 1526, 1526);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.maxNextCharInd = 6;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(1526, simpleCharStream0.getEndLine());
      assertEquals(1526, simpleCharStream0.getBeginLine());
      assertEquals(1526, simpleCharStream0.getBeginColumn());
      assertEquals(1526, simpleCharStream0.getLine());
      assertEquals(1526, simpleCharStream0.getColumn());
      assertEquals(1526, simpleCharStream0.getEndColumn());
      assertEquals('\u0000', char0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      simpleCharStream0.ExpandBuff(false);
      assertEquals(1526, simpleCharStream0.getEndLine());
      assertEquals(1526, simpleCharStream0.getBeginLine());
      assertEquals(1526, simpleCharStream0.getBeginColumn());
      assertEquals(1526, simpleCharStream0.getLine());
      assertEquals(1526, simpleCharStream0.getColumn());
      assertEquals(1526, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      char[] charArray0 = simpleCharStream0.GetSuffix(2175);
      assertEquals(2175, charArray0.length);
      assertEquals(1526, simpleCharStream0.getEndLine());
      assertEquals(1526, simpleCharStream0.getBeginLine());
      assertEquals(1526, simpleCharStream0.getBeginColumn());
      assertEquals(1526, simpleCharStream0.getLine());
      assertEquals(1526, simpleCharStream0.getColumn());
      assertEquals(1526, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(charArray0);
      
      simpleCharStream0.Done();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.UpdateLineColumn('\u0000');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 1444;
      PipedReader pipedReader0 = new PipedReader(1444);
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      pipedReader0.connect(pipedWriter0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0, 1444, 1444);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.Done();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.GetImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      StringReader stringReader0 = new StringReader("y.uZAvvAl6^/>3");
      assertNotNull(stringReader0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 349, 349, 349);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      int int0 = simpleCharStream0.getBeginColumn();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, int0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      simpleCharStream0.FillBuff();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      stringReader0.mark(8);
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      stringReader0.close();
      simpleCharStream0.setTabSize(349);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      simpleCharStream0.tokenBegin = 0;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      simpleCharStream0.Done();
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      
      simpleCharStream0.backup(0);
      assertEquals(348, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getLine();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      StringReader stringReader0 = new StringReader("y.uZAvvAl6^s>3R");
      assertNotNull(stringReader0);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 349, 349, 349);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      int int0 = simpleCharStream0.getBeginColumn();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, int0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      stringReader0.mark(8);
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      
      stringReader0.close();
      boolean boolean5 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      
      simpleCharStream0.backup(0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(348, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      int int1 = simpleCharStream0.getLine();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(348, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      simpleCharStream0.backup(0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(348, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      String string0 = simpleCharStream0.GetImage();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertEquals(348, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(string0);
      
      simpleCharStream0.adjustBeginLineColumn((-3968), (-1929));
      assertEquals((-3968), simpleCharStream0.getLine());
      assertEquals((-3967), simpleCharStream0.getBeginLine());
      assertEquals((-1929), simpleCharStream0.getEndColumn());
      assertEquals((-1929), simpleCharStream0.getColumn());
      assertEquals((-1929), simpleCharStream0.getBeginColumn());
      assertEquals((-3968), simpleCharStream0.getEndLine());
      assertEquals(348, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      int int2 = simpleCharStream0.getColumn();
      assertEquals((-3968), simpleCharStream0.getLine());
      assertEquals((-3967), simpleCharStream0.getBeginLine());
      assertEquals((-1929), simpleCharStream0.getEndColumn());
      assertEquals((-1929), simpleCharStream0.getColumn());
      assertEquals((-1929), simpleCharStream0.getBeginColumn());
      assertEquals((-3968), simpleCharStream0.getEndLine());
      assertEquals((-1929), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(348, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      char[] charArray0 = simpleCharStream0.GetSuffix(0);
      assertEquals(0, charArray0.length);
      assertEquals((-3968), simpleCharStream0.getLine());
      assertEquals((-3967), simpleCharStream0.getBeginLine());
      assertEquals((-1929), simpleCharStream0.getEndColumn());
      assertEquals((-1929), simpleCharStream0.getColumn());
      assertEquals((-1929), simpleCharStream0.getBeginColumn());
      assertEquals((-3968), simpleCharStream0.getEndLine());
      assertEquals(348, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int3 = simpleCharStream0.getEndColumn();
      assertEquals((-3968), simpleCharStream0.getLine());
      assertEquals((-3967), simpleCharStream0.getBeginLine());
      assertEquals((-1929), simpleCharStream0.getEndColumn());
      assertEquals((-1929), simpleCharStream0.getColumn());
      assertEquals((-1929), simpleCharStream0.getBeginColumn());
      assertEquals((-3968), simpleCharStream0.getEndLine());
      assertEquals((-1929), int3);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(348, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      int int4 = simpleCharStream0.getLine();
      assertEquals((-3968), simpleCharStream0.getLine());
      assertEquals((-3967), simpleCharStream0.getBeginLine());
      assertEquals((-1929), simpleCharStream0.getEndColumn());
      assertEquals((-1929), simpleCharStream0.getColumn());
      assertEquals((-1929), simpleCharStream0.getBeginColumn());
      assertEquals((-3968), simpleCharStream0.getEndLine());
      assertEquals((-3968), int4);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertEquals(348, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      StringReader stringReader0 = new StringReader("y.uZAvvAl6^s>3R");
      assertNotNull(stringReader0);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 349, 349, 349);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 349;
      intArray0[1] = (-1);
      intArray0[2] = 349;
      intArray0[3] = (-1);
      intArray0[4] = 349;
      intArray0[5] = 349;
      simpleCharStream0.bufcolumn = intArray0;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(349, simpleCharStream0.getBeginColumn());
      
      int int0 = simpleCharStream0.getBeginColumn();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(349, simpleCharStream0.getBeginColumn());
      assertEquals(349, int0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      stringReader0.mark(8);
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      
      stringReader0.close();
      boolean boolean5 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      
      simpleCharStream0.backup(0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(349, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(348, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      int int1 = simpleCharStream0.getLine();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(349, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(348, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      simpleCharStream0.backup(0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(349, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(348, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      String string0 = simpleCharStream0.GetImage();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(349, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertEquals(348, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.adjustBeginLineColumn((-3968), (-1929));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      long long0 = pipedInputStream0.skip(0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, long0);
      
      long long1 = pipedInputStream0.skip(0L);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      
      simpleCharStream0.ReInit((InputStream) pipedInputStream0, (String) null, 0, 0, 15);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      String string0 = simpleCharStream0.GetImage();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(string0);
      
      simpleCharStream0.adjustBeginLineColumn(0, 3);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      simpleCharStream0.backup(483);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-469), simpleCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.GetImage();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      int int0 = 8;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, (-2216), 8);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.bufpos = (-2216);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2215
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$VALUES");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.setTabSize(4069);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      simpleCharStream0.inBuf = 8;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      simpleCharStream0.adjustBeginLineColumn(8, 8);
      assertEquals(8, simpleCharStream0.getBeginColumn());
      assertEquals(9, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      simpleCharStream0.adjustBeginLineColumn(859, 8);
      assertEquals(8, simpleCharStream0.getBeginColumn());
      assertEquals(861, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      StringReader stringReader0 = new StringReader("y.uZAvvAl6^s>3R");
      assertNotNull(stringReader0);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 349, 349, 349);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      int int0 = simpleCharStream0.getBeginColumn();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, int0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      stringReader0.mark(8);
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      
      stringReader0.close();
      boolean boolean5 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      
      simpleCharStream0.backup(0);
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(348, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      int int1 = simpleCharStream0.getLine();
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(348, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      simpleCharStream0.backup(0);
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(348, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      String string0 = simpleCharStream0.GetImage();
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertEquals(348, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(string0);
      
      simpleCharStream0.adjustBeginLineColumn((-3968), (-1929));
      assertEquals((-3968), simpleCharStream0.getLine());
      assertEquals((-1929), simpleCharStream0.getBeginColumn());
      assertEquals((-3968), simpleCharStream0.getEndLine());
      assertEquals((-1929), simpleCharStream0.getColumn());
      assertEquals((-1929), simpleCharStream0.getEndColumn());
      assertEquals((-3967), simpleCharStream0.getBeginLine());
      assertEquals(348, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      int int2 = simpleCharStream0.getColumn();
      assertEquals((-3968), simpleCharStream0.getLine());
      assertEquals((-1929), simpleCharStream0.getBeginColumn());
      assertEquals((-3968), simpleCharStream0.getEndLine());
      assertEquals((-1929), simpleCharStream0.getColumn());
      assertEquals((-1929), simpleCharStream0.getEndColumn());
      assertEquals((-3967), simpleCharStream0.getBeginLine());
      assertEquals((-1929), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(348, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      char[] charArray0 = simpleCharStream0.GetSuffix(0);
      assertEquals(0, charArray0.length);
      assertEquals((-3968), simpleCharStream0.getLine());
      assertEquals((-1929), simpleCharStream0.getBeginColumn());
      assertEquals((-3968), simpleCharStream0.getEndLine());
      assertEquals((-1929), simpleCharStream0.getColumn());
      assertEquals((-1929), simpleCharStream0.getEndColumn());
      assertEquals((-3967), simpleCharStream0.getBeginLine());
      assertEquals(348, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int3 = simpleCharStream0.getEndLine();
      assertEquals((-3968), simpleCharStream0.getLine());
      assertEquals((-1929), simpleCharStream0.getBeginColumn());
      assertEquals((-3968), simpleCharStream0.getEndLine());
      assertEquals((-1929), simpleCharStream0.getColumn());
      assertEquals((-1929), simpleCharStream0.getEndColumn());
      assertEquals((-3967), simpleCharStream0.getBeginLine());
      assertEquals((-3968), int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(348, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      StringReader stringReader0 = new StringReader("y.uZAvvAl6^s>3R");
      assertNotNull(stringReader0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 349, 349, 349);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      int int0 = simpleCharStream0.getBeginColumn();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, int0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      simpleCharStream0.FillBuff();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      stringReader0.mark(8);
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      stringReader0.close();
      simpleCharStream0.tokenBegin = 0;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      
      simpleCharStream0.backup(0);
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(348, simpleCharStream0.bufpos);
      
      int int1 = simpleCharStream0.getLine();
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(348, simpleCharStream0.bufpos);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      simpleCharStream0.backup(0);
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(348, simpleCharStream0.bufpos);
      
      simpleCharStream0.UpdateLineColumn('(');
      assertEquals(349, simpleCharStream0.getLine());
      assertEquals(349, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(349, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(349, simpleCharStream0.getEndLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(348, simpleCharStream0.bufpos);
      
      String string0 = simpleCharStream0.GetImage();
      assertEquals(349, simpleCharStream0.getLine());
      assertEquals(349, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(349, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(349, simpleCharStream0.getEndLine());
      assertEquals("y.uZAvvAl6^s>3R\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(348, simpleCharStream0.bufpos);
      assertNotNull(string0);
      
      char[] charArray0 = simpleCharStream0.GetSuffix(8);
      assertEquals(8, charArray0.length);
      assertEquals(349, simpleCharStream0.getLine());
      assertEquals(349, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(349, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(349, simpleCharStream0.getEndLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(348, simpleCharStream0.bufpos);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int2 = simpleCharStream0.getColumn();
      assertEquals(349, simpleCharStream0.getLine());
      assertEquals(349, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(349, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(349, simpleCharStream0.getEndLine());
      assertEquals(349, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(348, simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      StringReader stringReader0 = new StringReader("y.uZAvvAl6^s>3R");
      assertNotNull(stringReader0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 349, 349, 349);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      int int0 = simpleCharStream0.getBeginColumn();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, int0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      simpleCharStream0.FillBuff();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      stringReader0.mark(8);
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      stringReader0.close();
      simpleCharStream0.tokenBegin = 0;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      
      simpleCharStream0.backup(0);
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(348, simpleCharStream0.bufpos);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      simpleCharStream0.backup(0);
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(348, simpleCharStream0.bufpos);
      
      simpleCharStream0.UpdateLineColumn('(');
      assertEquals(349, simpleCharStream0.getEndLine());
      assertEquals(349, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(349, simpleCharStream0.getLine());
      assertEquals(349, simpleCharStream0.getEndColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(348, simpleCharStream0.bufpos);
      
      String string0 = simpleCharStream0.GetImage();
      assertEquals(349, simpleCharStream0.getEndLine());
      assertEquals(349, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(349, simpleCharStream0.getLine());
      assertEquals(349, simpleCharStream0.getEndColumn());
      assertEquals("y.uZAvvAl6^s>3R\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(348, simpleCharStream0.bufpos);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, (-2216), 8);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.line = (-2216);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      simpleCharStream0.backup(8);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4087, simpleCharStream0.bufpos);
      
      int int0 = simpleCharStream0.getEndColumn();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, int0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4087, simpleCharStream0.bufpos);
      
      StringReader stringReader0 = new StringReader("1J /oC Tx+7/");
      assertNotNull(stringReader0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals('\u0000', char0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4088, simpleCharStream0.bufpos);
      
      stringReader0.close();
      simpleCharStream0.adjustBeginLineColumn(7, 1279);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1279, simpleCharStream0.getBeginColumn());
      assertEquals(7, simpleCharStream0.getLine());
      assertEquals(7, simpleCharStream0.getBeginLine());
      assertEquals(7, simpleCharStream0.getEndLine());
      assertEquals(1279, simpleCharStream0.getColumn());
      assertEquals(1279, simpleCharStream0.getEndColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4088, simpleCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((Reader) stringReader0, 48, (-2410), (-2216));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, (-2216), 8);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.line = (-2216);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      simpleCharStream0.backup(8);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4087, simpleCharStream0.bufpos);
      
      int int0 = simpleCharStream0.getEndColumn();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, int0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4087, simpleCharStream0.bufpos);
      
      StringReader stringReader0 = new StringReader("1 /oC Tx+7/");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, 47, (-1933));
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      
      char char0 = simpleCharStream1.BeginToken();
      assertEquals(47, simpleCharStream1.getBeginLine());
      assertEquals((-1933), simpleCharStream1.getEndColumn());
      assertEquals((-1933), simpleCharStream1.getBeginColumn());
      assertEquals((-1933), simpleCharStream1.getColumn());
      assertEquals(47, simpleCharStream1.getEndLine());
      assertEquals(47, simpleCharStream1.getLine());
      assertEquals('1', char0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream1.bufpos);
      
      simpleCharStream1.backup(1295);
      assertEquals(47, simpleCharStream1.getBeginLine());
      assertEquals((-1933), simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getEndLine());
      assertEquals(0, simpleCharStream1.getEndColumn());
      assertEquals(0, simpleCharStream1.getColumn());
      assertEquals(0, simpleCharStream1.getLine());
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertEquals(2801, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      int int1 = simpleCharStream1.getBeginColumn();
      assertEquals(47, simpleCharStream1.getBeginLine());
      assertEquals((-1933), simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getEndLine());
      assertEquals(0, simpleCharStream1.getEndColumn());
      assertEquals(0, simpleCharStream1.getColumn());
      assertEquals(0, simpleCharStream1.getLine());
      assertEquals((-1933), int1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(int1 == int0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertEquals(2801, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      StringReader stringReader0 = new StringReader("y.uZAvvAl6^s>3R");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(121, int0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 349, 349, 349);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      int int1 = simpleCharStream0.getBeginColumn();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      stringReader0.mark(8);
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      stringReader0.close();
      simpleCharStream0.tokenBegin = 0;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      
      simpleCharStream0.backup(0);
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(348, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      int int2 = simpleCharStream0.getLine();
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(348, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      simpleCharStream0.backup(0);
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(348, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      simpleCharStream0.UpdateLineColumn('(');
      assertEquals(349, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(349, simpleCharStream0.getEndColumn());
      assertEquals(349, simpleCharStream0.getLine());
      assertEquals(349, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(348, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      String string0 = simpleCharStream0.GetImage();
      assertEquals(349, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(349, simpleCharStream0.getEndColumn());
      assertEquals(349, simpleCharStream0.getLine());
      assertEquals(349, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertEquals(348, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(string0);
      
      simpleCharStream0.ExpandBuff(false);
      assertEquals(349, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(349, simpleCharStream0.getEndColumn());
      assertEquals(349, simpleCharStream0.getLine());
      assertEquals(349, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(348, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      int int3 = simpleCharStream0.getEndColumn();
      assertEquals(349, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(349, simpleCharStream0.getEndColumn());
      assertEquals(349, simpleCharStream0.getLine());
      assertEquals(349, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(349, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(348, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      StringReader stringReader0 = new StringReader("y.uZAvvAl6^s>3R");
      assertNotNull(stringReader0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 349, 349, 349);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      int int0 = simpleCharStream0.getBeginColumn();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, int0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      stringReader0.mark(8);
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      stringReader0.close();
      simpleCharStream0.tokenBegin = 0;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      
      simpleCharStream0.backup(0);
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(348, simpleCharStream0.bufpos);
      
      simpleCharStream0.bufsize = 31;
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      simpleCharStream0.backup(0);
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(348, simpleCharStream0.bufpos);
      
      simpleCharStream0.UpdateLineColumn('(');
      assertEquals(349, simpleCharStream0.getEndLine());
      assertEquals(349, simpleCharStream0.getLine());
      assertEquals(349, simpleCharStream0.getColumn());
      assertEquals(349, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(348, simpleCharStream0.bufpos);
      
      int int1 = simpleCharStream0.getEndLine();
      assertEquals(349, simpleCharStream0.getEndLine());
      assertEquals(349, simpleCharStream0.getLine());
      assertEquals(349, simpleCharStream0.getColumn());
      assertEquals(349, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(349, int1);
      assertFalse(int1 == int0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(348, simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("[ru*");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1729, 1729);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.ReInit((Reader) stringReader0, 71, 71);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      simpleCharStream0.column = 1729;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      charArray0[1] = 'N';
      charArray0[2] = 'V';
      charArray0[3] = '[';
      int int0 = stringReader0.read(charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, int0);
      assertArrayEquals(new char[] {'[', 'r', 'u', '*'}, charArray0);
      
      simpleCharStream0.bufsize = 1687;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      simpleCharStream0.ExpandBuff(false);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      simpleCharStream0.backup(1729);
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(2005, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      String string0 = simpleCharStream0.GetImage();
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(2005, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(string0);
      
      int int1 = simpleCharStream0.getTabSize(1729);
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(8, int1);
      assertFalse(int1 == int0);
      assertEquals(2005, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      char[] charArray1 = simpleCharStream0.GetSuffix(1687);
      assertEquals(1687, charArray1.length);
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertEquals(2005, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 10);
      assertNotNull(pushbackInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, 280, 4093, 4070);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) null, 4093, 97);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$VALUES");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      int int0 = 8;
      simpleCharStream0.setTabSize(4069);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      simpleCharStream0.inBuf = 8;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      simpleCharStream0.adjustBeginLineColumn(8, 8);
      assertEquals(9, simpleCharStream0.getBeginLine());
      assertEquals(8, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("y.uZAvvAl6^s>3R");
      assertNotNull(stringReader0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 349, 349, 349);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      int int0 = simpleCharStream0.getBeginColumn();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, int0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      stringReader0.mark(8);
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      stringReader0.close();
      simpleCharStream0.tokenBegin = 0;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      simpleCharStream0.backup(0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(348, simpleCharStream0.bufpos);
      
      int int1 = simpleCharStream0.getLine();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(348, simpleCharStream0.bufpos);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      simpleCharStream0.UpdateLineColumn('(');
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(349, simpleCharStream0.getEndColumn());
      assertEquals(349, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(349, simpleCharStream0.getEndLine());
      assertEquals(349, simpleCharStream0.getColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(348, simpleCharStream0.bufpos);
      
      int int2 = simpleCharStream0.getLine();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(349, simpleCharStream0.getEndColumn());
      assertEquals(349, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(349, simpleCharStream0.getEndLine());
      assertEquals(349, simpleCharStream0.getColumn());
      assertEquals(349, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(348, simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      StringReader stringReader0 = new StringReader("y.uZAvvAl6^s>3R");
      assertNotNull(stringReader0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 349, 349, 349);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      int int0 = simpleCharStream0.getBeginColumn();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, int0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      stringReader0.mark(8);
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      stringReader0.close();
      simpleCharStream0.tokenBegin = 0;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      
      simpleCharStream0.backup(0);
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(348, simpleCharStream0.bufpos);
      
      simpleCharStream0.prevCharIsLF = true;
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      int int1 = simpleCharStream0.getLine();
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(348, simpleCharStream0.bufpos);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      simpleCharStream0.backup(0);
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(348, simpleCharStream0.bufpos);
      
      simpleCharStream0.UpdateLineColumn('(');
      assertEquals(350, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(350, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(348, simpleCharStream0.bufpos);
      
      simpleCharStream0.backup(71);
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(277, simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 10);
      assertNotNull(pushbackInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, 280, (-1), 4070);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.Done();
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      int int0 = simpleCharStream0.getTabSize(280);
      assertEquals(8, int0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getColumn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      int int0 = (-1570);
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, (String) null, (-1570), (-1825), (-1942));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 71;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, 71, 71);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      int int1 = 7;
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) null, "", (-1), 7, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(4063);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.bufpos = 2266;
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)104;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-114), (byte) (-29), (byte) (-99), (byte)104}, byteArray0);
      
      int int0 = simpleCharStream0.getEndLine();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, int0);
      assertEquals(2266, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, 71, 71);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.adjustBeginLineColumn(71, 7);
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(72, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-9);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-9), (byte)0, (byte) (-90), (byte)0, (byte)1, (byte)0, (byte)0}, byteArray0);
      
      int int0 = byteArrayInputStream0.read(byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-9), (byte)0, (byte) (-90), (byte)0, (byte)1, (byte)0, (byte)0}, byteArray0);
      
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(72, simpleCharStream0.getBeginLine());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte) (-9), (byte)0, (byte) (-90), (byte)0, (byte)1, (byte)0, (byte)0}, byteArray0);
      
      int int1 = simpleCharStream0.getBeginLine();
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(72, simpleCharStream0.getBeginLine());
      assertEquals(72, int1);
      assertFalse(int1 == int0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      simpleCharStream0.tokenBegin = 71;
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(71, simpleCharStream0.getBeginLine());
      
      String string0 = simpleCharStream0.GetImage();
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(71, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(string0);
      
      int int2 = simpleCharStream0.getBeginLine();
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(71, simpleCharStream0.getBeginLine());
      assertEquals(71, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, (-2216), 8);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.line = (-2216);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      simpleCharStream0.backup(8);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4087, simpleCharStream0.bufpos);
      
      int int0 = simpleCharStream0.getEndColumn();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, int0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4087, simpleCharStream0.bufpos);
      
      StringReader stringReader0 = new StringReader("1 /oC Tx+7/");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, 47, (-1933));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      
      char char0 = simpleCharStream1.BeginToken();
      assertEquals((-1933), simpleCharStream1.getColumn());
      assertEquals((-1933), simpleCharStream1.getBeginColumn());
      assertEquals(47, simpleCharStream1.getEndLine());
      assertEquals((-1933), simpleCharStream1.getEndColumn());
      assertEquals(47, simpleCharStream1.getLine());
      assertEquals(47, simpleCharStream1.getBeginLine());
      assertEquals('1', char0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream1.bufpos);
      
      int int1 = simpleCharStream0.getLine();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, int1);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertTrue(int1 == int0);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4087, simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) pipedInputStream0, (String) null, 0, 0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, (-2216), 8);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.line = (-2216);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      simpleCharStream0.backup(8);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(4087, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      int int0 = simpleCharStream0.getEndColumn();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, int0);
      assertEquals(4087, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      StringReader stringReader0 = new StringReader("1 /oC Tx+7/");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, 47, (-1933));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      
      char char0 = simpleCharStream1.readChar();
      assertEquals((-1933), simpleCharStream1.getEndColumn());
      assertEquals(47, simpleCharStream1.getLine());
      assertEquals(47, simpleCharStream1.getBeginLine());
      assertEquals((-1933), simpleCharStream1.getBeginColumn());
      assertEquals(47, simpleCharStream1.getEndLine());
      assertEquals((-1933), simpleCharStream1.getColumn());
      assertEquals('1', char0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream1.bufpos);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, 71, 71);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.adjustBeginLineColumn(71, 7);
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(72, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-9), (byte)51, (byte) (-90), (byte)0, (byte)1, (byte)0, (byte)0}, byteArray0);
      
      int int0 = byteArrayInputStream0.read(byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-9), (byte)51, (byte) (-90), (byte)0, (byte)1, (byte)0, (byte)0}, byteArray0);
      
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(72, simpleCharStream0.getBeginLine());
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-9), (byte)51, (byte) (-90), (byte)0, (byte)1, (byte)0, (byte)0}, byteArray0);
      
      int int1 = simpleCharStream0.getBeginLine();
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(72, simpleCharStream0.getBeginLine());
      assertEquals(72, int1);
      assertFalse(int1 == int0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      simpleCharStream0.adjustBeginLineColumn((-166), 10);
      assertEquals((-164), simpleCharStream0.getBeginLine());
      assertEquals(10, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      String string0 = simpleCharStream0.GetImage();
      assertEquals((-164), simpleCharStream0.getBeginLine());
      assertEquals(10, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(string0);
      
      int int2 = simpleCharStream0.getBeginLine();
      assertEquals((-164), simpleCharStream0.getBeginLine());
      assertEquals(10, simpleCharStream0.getBeginColumn());
      assertEquals((-164), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      long long0 = pipedInputStream0.skip(0L);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, long0);
      
      simpleCharStream0.ReInit((InputStream) pipedInputStream0, (String) null, 0, 0, 0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      String string0 = simpleCharStream0.GetImage();
      assertEquals(0, pipedInputStream0.available());
      assertEquals("", string0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.adjustBeginLineColumn(0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 1401, (-1712));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.line = 1401;
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      simpleCharStream0.backup((-1712));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1711, simpleCharStream0.bufpos);
      
      int int0 = simpleCharStream0.getEndColumn();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, int0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1711, simpleCharStream0.bufpos);
      
      StringReader stringReader0 = new StringReader("1 /oC Tx+7/");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, 47, (-1933));
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      
      char char0 = simpleCharStream1.BeginToken();
      assertEquals(47, simpleCharStream1.getLine());
      assertEquals(47, simpleCharStream1.getBeginLine());
      assertEquals((-1933), simpleCharStream1.getEndColumn());
      assertEquals((-1933), simpleCharStream1.getBeginColumn());
      assertEquals(47, simpleCharStream1.getEndLine());
      assertEquals((-1933), simpleCharStream1.getColumn());
      assertEquals('1', char0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream1.bufpos);
      
      simpleCharStream0.adjustBeginLineColumn((-1292), 2048);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1711, simpleCharStream0.bufpos);
      
      int int1 = simpleCharStream1.getEndLine();
      assertEquals(47, simpleCharStream1.getLine());
      assertEquals(47, simpleCharStream1.getBeginLine());
      assertEquals((-1933), simpleCharStream1.getEndColumn());
      assertEquals((-1933), simpleCharStream1.getBeginColumn());
      assertEquals(47, simpleCharStream1.getEndLine());
      assertEquals((-1933), simpleCharStream1.getColumn());
      assertEquals(47, int1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(int1 == int0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream1.bufpos);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 1401, (-1712));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.line = 1401;
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      simpleCharStream0.backup((-1712));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1711, simpleCharStream0.bufpos);
      
      int int0 = simpleCharStream0.getEndColumn();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, int0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1711, simpleCharStream0.bufpos);
      
      StringReader stringReader0 = new StringReader("1 /oC Tx+7/");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, 47, (-1933));
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      
      char char0 = simpleCharStream1.BeginToken();
      assertEquals((-1933), simpleCharStream1.getEndColumn());
      assertEquals(47, simpleCharStream1.getLine());
      assertEquals(47, simpleCharStream1.getBeginLine());
      assertEquals((-1933), simpleCharStream1.getBeginColumn());
      assertEquals((-1933), simpleCharStream1.getColumn());
      assertEquals(47, simpleCharStream1.getEndLine());
      assertEquals('1', char0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertEquals(0, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      String string0 = simpleCharStream0.GetImage();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1711, simpleCharStream0.bufpos);
      assertNotNull(string0);
      
      simpleCharStream1.adjustBeginLineColumn(10, 10);
      assertEquals(10, simpleCharStream1.getEndLine());
      assertEquals(10, simpleCharStream1.getBeginColumn());
      assertEquals(10, simpleCharStream1.getEndColumn());
      assertEquals(10, simpleCharStream1.getLine());
      assertEquals(10, simpleCharStream1.getColumn());
      assertEquals(10, simpleCharStream1.getBeginLine());
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertEquals(0, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, 71, 71);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.adjustBeginLineColumn(71, 7);
      assertEquals(72, simpleCharStream0.getBeginLine());
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-9);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-9), (byte)0, (byte) (-90), (byte)0, (byte)1, (byte)0, (byte)0}, byteArray0);
      
      int int0 = byteArrayInputStream0.read(byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-9), (byte)0, (byte) (-90), (byte)0, (byte)1, (byte)0, (byte)0}, byteArray0);
      
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0);
      assertEquals(7, byteArray0.length);
      assertEquals(72, simpleCharStream0.getBeginLine());
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-9), (byte)0, (byte) (-90), (byte)0, (byte)1, (byte)0, (byte)0}, byteArray0);
      
      int int1 = simpleCharStream0.getBeginLine();
      assertEquals(72, simpleCharStream0.getBeginLine());
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(72, int1);
      assertFalse(int1 == int0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      String string0 = simpleCharStream0.GetImage();
      assertEquals(72, simpleCharStream0.getBeginLine());
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(string0);
      
      int int2 = simpleCharStream0.getBeginLine();
      assertEquals(72, simpleCharStream0.getBeginLine());
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(72, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      char[] charArray0 = simpleCharStream0.GetSuffix(0);
      assertEquals(0, charArray0.length);
      assertEquals(72, simpleCharStream0.getBeginLine());
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, 71, 71);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      simpleCharStream0.adjustBeginLineColumn(71, 7);
      assertEquals(72, simpleCharStream0.getBeginLine());
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)51;
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) null, 2048, (int) (byte)51, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("RD<1zK2O!@sE");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      int int0 = 972;
      simpleCharStream0.ReInit((Reader) stringReader0, 972, 972);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      simpleCharStream0.bufpos = 972;
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '9';
      simpleCharStream0.ExpandBuff(true);
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5068, simpleCharStream0.bufpos);
      
      charArray0[1] = 'q';
      int int1 = (-1);
      simpleCharStream0.FillBuff();
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5068, simpleCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        stringReader0.read(charArray0, 5068, 1666);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("RD<1zK2O!@sE");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.ReInit((Reader) stringReader0, 972, 972);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      char[] charArray0 = new char[2];
      simpleCharStream0.bufpos = (int) '>';
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      
      simpleCharStream0.ExpandBuff(true);
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4158, simpleCharStream0.bufpos);
      
      charArray0[1] = 'e';
      // Undeclared exception!
      try { 
        stringReader0.read(charArray0, (-1), 972);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 1401, (-1712));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.line = 1401;
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      simpleCharStream0.backup((-1712));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1711, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      int int0 = simpleCharStream0.getEndColumn();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, int0);
      assertEquals(1711, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      StringReader stringReader0 = new StringReader("1 /oC Tx+7/");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, 47, (-1933));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      
      simpleCharStream1.available = (-1933);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      
      // Undeclared exception!
      try { 
        simpleCharStream1.BeginToken();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 1401, (-1712));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.line = 1401;
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      simpleCharStream0.backup((-1712));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1711, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      int int0 = simpleCharStream0.getEndColumn();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, int0);
      assertEquals(1711, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      StringReader stringReader0 = new StringReader("1 /oC Tx+7/");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, 47, (-1933));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      
      char char0 = simpleCharStream1.BeginToken();
      assertEquals((-1933), simpleCharStream1.getColumn());
      assertEquals(47, simpleCharStream1.getEndLine());
      assertEquals((-1933), simpleCharStream1.getEndColumn());
      assertEquals((-1933), simpleCharStream1.getBeginColumn());
      assertEquals(47, simpleCharStream1.getLine());
      assertEquals(47, simpleCharStream1.getBeginLine());
      assertEquals('1', char0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream1.bufpos);
      
      int int1 = simpleCharStream1.getColumn();
      assertEquals((-1933), simpleCharStream1.getColumn());
      assertEquals(47, simpleCharStream1.getEndLine());
      assertEquals((-1933), simpleCharStream1.getEndColumn());
      assertEquals((-1933), simpleCharStream1.getBeginColumn());
      assertEquals(47, simpleCharStream1.getLine());
      assertEquals(47, simpleCharStream1.getBeginLine());
      assertEquals((-1933), int1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(int1 == int0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream1.bufpos);
      
      int int2 = simpleCharStream1.getEndLine();
      assertEquals((-1933), simpleCharStream1.getColumn());
      assertEquals(47, simpleCharStream1.getEndLine());
      assertEquals((-1933), simpleCharStream1.getEndColumn());
      assertEquals((-1933), simpleCharStream1.getBeginColumn());
      assertEquals(47, simpleCharStream1.getLine());
      assertEquals(47, simpleCharStream1.getBeginLine());
      assertEquals(47, int2);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream1.bufpos);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 1401, (-1712));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      charArray0[1] = '|';
      charArray0[2] = 'j';
      simpleCharStream0.buffer = charArray0;
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      simpleCharStream0.line = 1401;
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      simpleCharStream0.backup((-1712));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(1711, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      int int0 = simpleCharStream0.getEndColumn();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, int0);
      assertEquals(1711, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      StringReader stringReader0 = new StringReader("1 /oC Tx+7/");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, 47, (-1933));
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      
      char char0 = simpleCharStream1.BeginToken();
      assertEquals(47, simpleCharStream1.getLine());
      assertEquals((-1933), simpleCharStream1.getBeginColumn());
      assertEquals((-1933), simpleCharStream1.getEndColumn());
      assertEquals(47, simpleCharStream1.getBeginLine());
      assertEquals((-1933), simpleCharStream1.getColumn());
      assertEquals(47, simpleCharStream1.getEndLine());
      assertEquals('1', char0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertEquals(0, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      simpleCharStream1.UpdateLineColumn('1');
      assertEquals((-1932), simpleCharStream1.getEndColumn());
      assertEquals(47, simpleCharStream1.getLine());
      assertEquals((-1932), simpleCharStream1.getBeginColumn());
      assertEquals(47, simpleCharStream1.getBeginLine());
      assertEquals((-1932), simpleCharStream1.getColumn());
      assertEquals(47, simpleCharStream1.getEndLine());
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertEquals(0, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 1401, (-1712));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.backup((-1712));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1711, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      int int0 = simpleCharStream0.getEndColumn();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, int0);
      assertEquals(1711, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      StringReader stringReader0 = new StringReader("1 /oC Tx+7/");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, 47, (-1933));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      
      char char0 = simpleCharStream1.BeginToken();
      assertEquals((-1933), simpleCharStream1.getColumn());
      assertEquals((-1933), simpleCharStream1.getBeginColumn());
      assertEquals(47, simpleCharStream1.getEndLine());
      assertEquals(47, simpleCharStream1.getLine());
      assertEquals((-1933), simpleCharStream1.getEndColumn());
      assertEquals(47, simpleCharStream1.getBeginLine());
      assertEquals('1', char0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream1.bufpos);
      
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      assertEquals(0, pipedInputStream1.available());
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      assertNotNull(pipedInputStream1);
      
      simpleCharStream0.ReInit((InputStream) pipedInputStream1, (String) null);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, pipedInputStream1.available());
      assertFalse(pipedInputStream0.equals((Object)pipedInputStream1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      assertNotSame(pipedInputStream0, pipedInputStream1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(pipedInputStream1, pipedInputStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      int int1 = simpleCharStream0.getBeginColumn();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, int1);
      assertFalse(pipedInputStream0.equals((Object)pipedInputStream1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertTrue(int1 == int0);
      assertNotSame(pipedInputStream0, pipedInputStream1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader("RD<1zK2O!@sE");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      int int0 = 972;
      simpleCharStream0.ReInit((Reader) stringReader0, 972, 972);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      simpleCharStream0.tokenBegin = 972;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '>';
      char char0 = 'q';
      // Undeclared exception!
      try { 
        simpleCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedReader pipedReader1 = new PipedReader();
      assertFalse(pipedReader1.equals((Object)pipedReader0));
      assertNotNull(pipedReader1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader1, 2048, 2048, 2048);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(pipedReader1.equals((Object)pipedReader0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '|';
      charArray0[1] = 'w';
      charArray0[2] = '=';
      charArray0[3] = '%';
      charArray0[4] = '\"';
      charArray0[5] = '.';
      charArray0[6] = 'l';
      charArray0[7] = 'w';
      simpleCharStream0.available = 595;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      simpleCharStream0.buffer = charArray0;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        simpleCharStream0.GetSuffix(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = 0;
      simpleCharStream0.ReInit((InputStream) pipedInputStream0, (String) null, 3, 3);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      long long0 = pipedInputStream0.skip(0L);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, long0);
      
      simpleCharStream0.ReInit((InputStream) pipedInputStream0, (String) null, 0, 0, 15);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      try { 
        simpleCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("RD<1zK2O!@sE");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = 'k';
      charArray0[2] = 'Y';
      charArray0[3] = 'G';
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 6, 6);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      char char0 = simpleCharStream0.readChar();
      assertEquals(6, simpleCharStream0.getEndLine());
      assertEquals(6, simpleCharStream0.getBeginLine());
      assertEquals(6, simpleCharStream0.getBeginColumn());
      assertEquals(6, simpleCharStream0.getLine());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals('R', char0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      charArray0[4] = '1';
      // Undeclared exception!
      try { 
        stringReader0.read(charArray0, 4063, 4063);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader("iJwi*92)<1yh0B");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 47, (-1933));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(47, simpleCharStream0.getLine());
      assertEquals((-1933), simpleCharStream0.getEndColumn());
      assertEquals(47, simpleCharStream0.getBeginLine());
      assertEquals((-1933), simpleCharStream0.getBeginColumn());
      assertEquals(47, simpleCharStream0.getEndLine());
      assertEquals((-1933), simpleCharStream0.getColumn());
      assertEquals('i', char0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, 71, 71);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.adjustBeginLineColumn(71, 7);
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(72, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-9), (byte)51, (byte) (-90), (byte)0, (byte)1, (byte)0, (byte)0}, byteArray0);
      
      int int0 = byteArrayInputStream0.read(byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-9), (byte)51, (byte) (-90), (byte)0, (byte)1, (byte)0, (byte)0}, byteArray0);
      
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(72, simpleCharStream0.getBeginLine());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte) (-9), (byte)51, (byte) (-90), (byte)0, (byte)1, (byte)0, (byte)0}, byteArray0);
      
      int int1 = simpleCharStream0.getBeginLine();
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(72, simpleCharStream0.getBeginLine());
      assertEquals(72, int1);
      assertFalse(int1 == int0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      String string0 = simpleCharStream0.GetImage();
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(72, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(string0);
      
      int int2 = simpleCharStream0.getBeginLine();
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(72, simpleCharStream0.getBeginLine());
      assertEquals(72, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      int int3 = simpleCharStream0.getBeginColumn();
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(72, simpleCharStream0.getBeginLine());
      assertEquals(7, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.ReInit((InputStream) pipedInputStream0, (String) null, 0, 0, 15);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      String string0 = simpleCharStream0.GetImage();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(string0);
      
      simpleCharStream0.adjustBeginLineColumn(0, 3);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      simpleCharStream0.backup(483);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-469), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "";
      String string1 = "1 /oC Tx+7/";
      StringReader stringReader0 = new StringReader("1 /oC Tx+7/");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 2048, 47, 2048);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.ExpandBuff(false);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      StringReader stringReader1 = new StringReader("1 /oC Tx+7/");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.BeginToken();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0, 1526, 1526);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.maxNextCharInd = 6;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(1526, simpleCharStream0.getEndLine());
      assertEquals(1526, simpleCharStream0.getBeginLine());
      assertEquals(1526, simpleCharStream0.getBeginColumn());
      assertEquals(1526, simpleCharStream0.getEndColumn());
      assertEquals(1526, simpleCharStream0.getLine());
      assertEquals(1526, simpleCharStream0.getColumn());
      assertEquals('\u0000', char0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      simpleCharStream0.ExpandBuff(false);
      assertEquals(1526, simpleCharStream0.getEndLine());
      assertEquals(1526, simpleCharStream0.getBeginLine());
      assertEquals(1526, simpleCharStream0.getBeginColumn());
      assertEquals(1526, simpleCharStream0.getEndColumn());
      assertEquals(1526, simpleCharStream0.getLine());
      assertEquals(1526, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      char[] charArray0 = simpleCharStream0.GetSuffix(2175);
      assertEquals(2175, charArray0.length);
      assertEquals(1526, simpleCharStream0.getEndLine());
      assertEquals(1526, simpleCharStream0.getBeginLine());
      assertEquals(1526, simpleCharStream0.getBeginColumn());
      assertEquals(1526, simpleCharStream0.getEndColumn());
      assertEquals(1526, simpleCharStream0.getLine());
      assertEquals(1526, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(charArray0);
      
      simpleCharStream0.Done();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      PipedReader pipedReader1 = new PipedReader();
      assertFalse(pipedReader1.equals((Object)pipedReader0));
      assertNotNull(pipedReader1);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The magic number cannot be null");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((Reader) pipedReader1, 1364, 6, (-1077));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      simpleCharStream0.bufcolumn = intArray0;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.getBeginColumn());
      
      simpleCharStream0.Done();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      simpleCharStream0.maxNextCharInd = 4091;
      // Undeclared exception!
      try { 
        simpleCharStream0.BeginToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Reader reader0 = null;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 0;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, (String) null, 0, 4082);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      int int1 = 4095;
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) pipedInputStream0, 0, (-866), (-558));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("RD<1zK2O!@sE");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      stringReader0.reset();
      simpleCharStream0.ReInit((Reader) stringReader0, 972, 972);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      simpleCharStream0.setTabSize((-4190));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      int int0 = simpleCharStream0.getTabSize(2653);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-4190), int0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "Jp/*rlM/uLF%*";
      StringReader stringReader0 = new StringReader("Jp/*rlM/uLF%*");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 0, 4668, 0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.ReInit((Reader) stringReader0, 18, 1616, 0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, 71, 71);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.adjustBeginLineColumn(71, 7);
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(72, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)0;
      simpleCharStream0.adjustBeginLineColumn((byte) (-90), 0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-88), simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-9), (byte)51, (byte) (-90), (byte)0, (byte)1, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        byteArrayInputStream0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.tokenBegin = (-2435);
      assertEquals(0, pipedInputStream0.available());
      
      long long0 = pipedInputStream0.skip((-125L));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, long0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.GetImage();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 716;
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = 2692;
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      intArray0[8] = (-1);
      simpleCharStream0.bufcolumn = intArray0;
      assertEquals(716, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) null, "The magic number must contain at least one byte");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 4071;
      PipedReader pipedReader0 = new PipedReader(4071);
      assertNotNull(pipedReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      InputStream inputStream0 = null;
      String string0 = "";
      int int1 = (-850);
      simpleCharStream0.inputStream = (Reader) pipedReader0;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) null, "", 4071, (-850));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)86;
      byteArray0[0] = (byte)86;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)86, (byte)0, (byte)0, (byte)0, (byte)48}, byteArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)48, (byte)0, (byte)48);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)86, (byte)0, (byte)0, (byte)0, (byte)48}, byteArray0);
      
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (int) (byte)0, 969, (int) (byte)48);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)86, (byte)0, (byte)0, (byte)0, (byte)48}, byteArray0);
      
      String string0 = simpleCharStream0.GetImage();
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)86, (byte)0, (byte)0, (byte)0, (byte)48}, byteArray0);
      
      simpleCharStream0.backup((byte)0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(47, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)86, (byte)0, (byte)0, (byte)0, (byte)48}, byteArray0);
      
      simpleCharStream0.setTabSize(9);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(47, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)86, (byte)0, (byte)0, (byte)0, (byte)48}, byteArray0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.BeginToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      int int0 = 0;
      long long0 = pipedInputStream0.skip(0L);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, long0);
      
      simpleCharStream0.ReInit((InputStream) pipedInputStream0, (String) null, 0, 0, 1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      try { 
        simpleCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("uZ<PBCh&&61");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'u';
      charArray0[1] = 'G';
      charArray0[2] = '(';
      charArray0[3] = 'l';
      charArray0[4] = '4';
      charArray0[5] = 'y';
      charArray0[6] = 'M';
      int int0 = stringReader0.read(charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, int0);
      assertArrayEquals(new char[] {'u', 'Z', '<', 'P', 'B', 'C', 'h'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      int int0 = 0;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0, (-1), 0, 0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      pipedReader0.close();
      simpleCharStream0.ReInit((Reader) pipedReader0, 0, 0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-16);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-49), (byte)0, (byte) (-122), (byte) (-16)}, byteArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte) (-49), (byte)0, (byte) (-122), (byte) (-16)}, byteArray0);
      
      int int0 = 6;
      // Undeclared exception!
      try { 
        simpleCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.adjustBeginLineColumn((-1174), 2);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals((-1173), simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      long long0 = pushbackInputStream0.skip(0L);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, long0);
      
      simpleCharStream0.column = 366;
      assertEquals(0, pipedInputStream0.available());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals((-1173), simpleCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        pipedInputStream0.connect((PipedOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte) (-22);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)99, 0);
      assertEquals(6, byteArray0.length);
      assertEquals((-93), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)99, (byte)23, (byte) (-24), (byte)44, (byte) (-44), (byte) (-22)}, byteArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (-1), 48);
      assertEquals(6, byteArray0.length);
      assertEquals((-93), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)99, (byte)23, (byte) (-24), (byte)44, (byte) (-44), (byte) (-22)}, byteArray0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'W';
      charArray0[1] = '|';
      charArray0[2] = '}';
      pipedWriter0.write(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'W', '|', '}'}, charArray0);
      
      simpleCharStream0.ReInit((Reader) pipedReader0, 4, (int) (byte)99, 880);
      assertEquals(6, byteArray0.length);
      assertEquals((-93), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)99, (byte)23, (byte) (-24), (byte)44, (byte) (-44), (byte) (-22)}, byteArray0);
      
      int int0 = simpleCharStream0.getTabSize((-1758));
      assertEquals(6, byteArray0.length);
      assertEquals((-93), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(8, int0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)99, (byte)23, (byte) (-24), (byte)44, (byte) (-44), (byte) (-22)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      String string0 = null;
      int int0 = 0;
      int int1 = 1;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      long long0 = pipedInputStream0.skip(0L);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, long0);
      
      int int2 = simpleCharStream0.getBeginLine();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      PipedReader pipedReader0 = new PipedReader(1804);
      assertNotNull(pipedReader0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((Reader) pipedReader0, 1804, 0, (-269));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      InputStream inputStream0 = null;
      int int0 = (-286);
      int int1 = 418;
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null, (-286), (-286), 418);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Reader reader0 = null;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-84);
      byteArray0[0] = (byte) (-84);
      byte byte1 = (byte) (-29);
      byteArray0[1] = (byte) (-29);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-29)}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-29)}, byteArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte) (-29), (byte) (-29));
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-29)}, byteArray0);
      
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-29)}, byteArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-29);
      intArray0[1] = (int) (byte) (-29);
      intArray0[2] = (int) (byte) (-29);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      simpleCharStream0.bufcolumn = intArray0;
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals((-29), simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      try { 
        simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, "$[iAVoap6\"2OX-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, 0, 0, 0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.backup((-1736));
      assertEquals(1735, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(343L);
      assertEquals(0L, long0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.ReInit((Reader) stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      simpleCharStream0.backup(1208);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2887, simpleCharStream0.bufpos);
      
      char char0 = simpleCharStream0.readChar();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals('\u0000', char0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2888, simpleCharStream0.bufpos);
      
      simpleCharStream0.available = 0;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      char char1 = simpleCharStream0.readChar();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals('\u0000', char1);
      assertTrue(char1 == char0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2889, simpleCharStream0.bufpos);
      
      int int0 = simpleCharStream0.getColumn();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, int0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2889, simpleCharStream0.bufpos);
      
      int int1 = simpleCharStream0.getColumn();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2889, simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(pipedInputStream0, "7`W>`';F");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(4096);
      assertNotNull(pipedReader0);
      
      pipedReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0, 4096, 4096, 739);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      int int0 = simpleCharStream0.getBeginLine();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, int0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      char[] charArray0 = simpleCharStream0.GetSuffix(7);
      assertEquals(7, charArray0.length);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      int int0 = 6;
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 6);
      assertNotNull(pipedReader0);
      
      Writer writer0 = pipedWriter0.append('c');
      assertSame(pipedWriter0, writer0);
      assertSame(writer0, pipedWriter0);
      assertNotNull(writer0);
      
      boolean boolean0 = pipedReader0.ready();
      assertTrue(boolean0);
      assertSame(pipedWriter0, writer0);
      
      boolean boolean1 = pipedReader0.ready();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertSame(pipedWriter0, writer0);
      
      Writer writer1 = pipedWriter0.append('T');
      assertSame(pipedWriter0, writer1);
      assertSame(pipedWriter0, writer0);
      assertSame(writer1, pipedWriter0);
      assertSame(writer1, writer0);
      assertNotNull(writer1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0, 6, 6);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      simpleCharStream0.ReInit((Reader) pipedReader0, (-349), 0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertSame(pipedWriter0, writer1);
      assertSame(pipedWriter0, writer0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      simpleCharStream0.tokenBegin = 1240;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      try { 
        simpleCharStream0.ReInit((InputStream) pipedInputStream0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)97;
      int int0 = 450;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)97, 450);
      assertEquals(1, byteArray0.length);
      assertEquals((-96), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)97}, byteArray0);
      
      int int1 = 2660;
      int int2 = 0;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 2660, 0, 0);
      assertEquals(1, byteArray0.length);
      assertEquals((-96), byteArrayInputStream0.available());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)97}, byteArray0);
      
      long long0 = byteArrayInputStream0.skip(0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-96L), long0);
      assertArrayEquals(new byte[] {(byte)97}, byteArray0);
      
      byteArrayInputStream0.close();
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)97}, byteArray0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      int int0 = 0;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0, (-1), 0, 0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      pipedReader0.close();
      try { 
        simpleCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)86;
      byteArray0[0] = (byte)86;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)86, (byte)0, (byte)0, (byte)0, (byte)48}, byteArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)48, (byte)0, (byte)48);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)86, (byte)0, (byte)0, (byte)0, (byte)48}, byteArray0);
      
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (int) (byte)0, 969, (int) (byte)48);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)86, (byte)0, (byte)0, (byte)0, (byte)48}, byteArray0);
      
      String string0 = simpleCharStream0.GetImage();
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)86, (byte)0, (byte)0, (byte)0, (byte)48}, byteArray0);
      
      simpleCharStream0.backup((byte)0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(47, simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)86, (byte)0, (byte)0, (byte)0, (byte)48}, byteArray0);
      
      simpleCharStream0.setTabSize(9);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(47, simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)86, (byte)0, (byte)0, (byte)0, (byte)48}, byteArray0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      int int0 = 1234;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)0, 1234);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      String string0 = simpleCharStream0.GetImage();
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 299, 0, (byte)0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N");
      assertNotNull(stringReader0);
      
      int int0 = 4096;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 8, 4096);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0, 1526, 1526);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.maxNextCharInd = 6;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      boolean boolean0 = false;
      simpleCharStream0.ExpandBuff(false);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      try { 
        simpleCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)79, (byte)124, (byte)0, (byte)3}, byteArray0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte)79, (byte)124, (byte)0, (byte)3}, byteArray0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)79, (byte)124, (byte)0, (byte)3}, byteArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(bufferedInputStream0);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)79, (byte)124, (byte)0, (byte)3}, byteArray0);
      
      byteArrayInputStream0.close();
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)79, (byte)124, (byte)0, (byte)3}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)79, (byte)124, (byte)0, (byte)3}, byteArray0);
      
      simpleCharStream0.ReInit((InputStream) bufferedInputStream0, 8, 0);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)79, (byte)124, (byte)0, (byte)3}, byteArray0);
      
      long long0 = sequenceInputStream0.skip(1L);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0L, long0);
      assertArrayEquals(new byte[] {(byte)79, (byte)124, (byte)0, (byte)3}, byteArray0);
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)79, (byte)124, (byte)0, (byte)3}, byteArray0);
      
      sequenceInputStream0.close();
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)79, (byte)124, (byte)0, (byte)3}, byteArray0);
      
      try { 
        simpleCharStream0.ReInit((InputStream) bufferedInputStream0, "fr5)~,}T80(waJR7>T6", 1, 0, (int) (byte)79);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(3729);
      assertNotNull(pipedReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 8);
      assertNotNull(pushbackInputStream0);
      
      simpleCharStream0.ReInit((InputStream) pushbackInputStream0, 8, (-1512), 3729);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("RD<1zK2O!@sE");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.ReInit((Reader) stringReader0, 972, 972);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      simpleCharStream0.setTabSize((-4190));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      String string0 = "";
      int int0 = (-1802);
      int int1 = 0;
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(pipedInputStream0, "", (-1802), 0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%8]h>#D[= f>_[O{BW");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.GetSuffix((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      int int0 = 2683;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0, 8, 2683, 2683);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      try { 
        simpleCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      InputStream inputStream0 = null;
      String string0 = "org.apache.commons.io.file.CountingPathVisitor";
      int int0 = 0;
      int int1 = 0;
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null, "org.apache.commons.io.file.CountingPathVisitor", 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, 2548, 0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.GetSuffix((-667));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Reader reader0 = null;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      String string0 = simpleCharStream0.GetImage();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(string0);
      
      int int0 = simpleCharStream0.getBeginColumn();
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, int0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-113);
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-6);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-113), (byte) (-6)}, byteArray0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-113), (byte) (-6)}, byteArray0);
      
      byteArrayInputStream0.mark(0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-113), (byte) (-6)}, byteArray0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.configuration2.plist.SimpleCharStream");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      int int0 = simpleCharStream0.getBeginColumn();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, int0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'J';
      charArray0[1] = '%';
      charArray0[2] = '?';
      charArray0[3] = 'J';
      charArray0[4] = ':';
      // Undeclared exception!
      try { 
        stringReader0.read(charArray0, (-61), (-61));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      String string0 = null;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, (String) null, 1343, 1343);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      long long0 = pipedInputStream0.skip((-125L));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, long0);
      
      String string0 = simpleCharStream0.GetImage();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(string0);
      
      int int0 = simpleCharStream0.getTabSize((-753));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(8, int0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.UpdateLineColumn(';');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, (String) null, 810, 3060);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.adjustBeginLineColumn(3060, 0);
      assertEquals(3061, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      String string0 = null;
      int int0 = 0;
      int int1 = 4096;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(mockFileInputStream0, (String) null, 0, 4096, 4096);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-1754));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)6;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)6, 8);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-12), (byte)0, (byte)76, (byte)6}, byteArray0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 877);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-12), (byte)0, (byte)76, (byte)6}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-12), (byte)0, (byte)76, (byte)6}, byteArray0);
      
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(dataInputStream0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertNotNull(bufferedInputStream1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-12), (byte)0, (byte)76, (byte)6}, byteArray0);
      
      boolean boolean0 = bufferedInputStream1.markSupported();
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(boolean0);
      assertFalse(bufferedInputStream0.equals((Object)bufferedInputStream1));
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertNotSame(bufferedInputStream0, bufferedInputStream1);
      assertNotSame(bufferedInputStream1, bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-12), (byte)0, (byte)76, (byte)6}, byteArray0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream1, byteArrayInputStream0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(bufferedInputStream0.equals((Object)bufferedInputStream1));
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertNotNull(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-12), (byte)0, (byte)76, (byte)6}, byteArray0);
      
      int int0 = bufferedInputStream1.available();
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, int0);
      assertFalse(bufferedInputStream0.equals((Object)bufferedInputStream1));
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertNotSame(bufferedInputStream0, bufferedInputStream1);
      assertNotSame(bufferedInputStream1, bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-12), (byte)0, (byte)76, (byte)6}, byteArray0);
      
      boolean boolean1 = sequenceInputStream0.markSupported();
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(boolean1);
      assertFalse(bufferedInputStream0.equals((Object)bufferedInputStream1));
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(bufferedInputStream0, bufferedInputStream1);
      assertNotSame(bufferedInputStream1, bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-12), (byte)0, (byte)76, (byte)6}, byteArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, (byte)0, 0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(bufferedInputStream0.equals((Object)bufferedInputStream1));
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-12), (byte)0, (byte)76, (byte)6}, byteArray0);
      
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      int int0 = (-1528);
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(pipedReader0, 0, 0, (-1528));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.configuration2.plist.SimpleCharStream");
      assertNotNull(stringReader0);
      
      int int0 = (-1561);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1561), (-1561));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1561);
      intArray0[4] = (-1561);
      intArray0[5] = (-1561);
      simpleCharStream0.bufcolumn = intArray0;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.getBeginColumn());
      
      simpleCharStream0.Done();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      simpleCharStream0.bufpos = 4171;
      simpleCharStream0.tabSize = (-1561);
      stringReader0.reset();
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      InputStream inputStream0 = null;
      int int0 = 1941;
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null, (String) null, 1941, 1941, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null, "org.apache.commons.configuration2.plist.SimpleCharStream");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      int int0 = (-498);
      int int1 = 0;
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, (-498), 0, (-498));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 6;
      PipedInputStream pipedInputStream0 = new PipedInputStream(6);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      boolean boolean0 = pipedInputStream0.markSupported();
      assertEquals(0, pipedInputStream0.available());
      assertFalse(boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 6, 6, 6);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0, 0, 2048);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      try { 
        simpleCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      int int0 = 8;
      int int1 = 1479;
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(pipedInputStream0, "", 8, 8, 1479);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 47, 47);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.column = 47;
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      simpleCharStream0.Done();
      assertEquals(0, pipedInputStream0.available());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndColumn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byte byte0 = (byte) (-98);
      byteArray0[1] = (byte) (-98);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)2, 8);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-98)}, byteArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-98)}, byteArray0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      simpleCharStream0.Done();
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-98)}, byteArray0);
      
      try { 
        simpleCharStream0.ReInit((InputStream) pipedInputStream0, "org.apache.commons.io.filefilter.CanReadFileFilter", 8, 0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)32;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)72, (byte)0, (byte)32}, byteArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 4096, (byte)0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)72, (byte)0, (byte)32}, byteArray0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.UpdateLineColumn(',');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-107), (byte) (-66), (byte)10, (byte)48, (byte)5, (byte) (-1)}, byteArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (-385), (byte) (-66));
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte) (-107), (byte) (-66), (byte)10, (byte)48, (byte)5, (byte) (-1)}, byteArray0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0, (-290), (-290), 0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.UpdateLineColumn('I');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 0;
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(8);
      assertNotNull(pipedReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.ExpandBuff(false);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      simpleCharStream0.prevCharIsLF = true;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      int int0 = simpleCharStream0.getTabSize(0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(8, int0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(3993);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.prevCharIsCR = true;
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      try { 
        simpleCharStream0.ReInit((InputStream) pipedInputStream0, "", 0, 0, 826);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(sequenceInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, 0, 0, 0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.adjustBeginLineColumn(0, 2048);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(V52S@ST");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      int int0 = 4078;
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 4078);
      assertNotNull(pipedReader0);
      
      int int1 = 0;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0, 4078, 4078, 0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 4;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "H");
      assertFalse(boolean0);
      
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null, "H", 4084, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(4063);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.tabSize = 2266;
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      StringReader stringReader0 = new StringReader("y.uZAvvAl6^s>3R");
      assertNotNull(stringReader0);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 349, 349, 349);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      int int0 = simpleCharStream0.getBeginColumn();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, int0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      stringReader0.mark(0);
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      
      stringReader0.close();
      boolean boolean5 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      
      simpleCharStream0.backup(15);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(333, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      int int1 = simpleCharStream0.getLine();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(333, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      simpleCharStream0.backup(0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(333, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      String string0 = simpleCharStream0.GetImage();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertEquals(333, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(string0);
      
      simpleCharStream0.adjustBeginLineColumn((-3968), 0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals((-3967), simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals((-3968), simpleCharStream0.getLine());
      assertEquals((-3968), simpleCharStream0.getEndLine());
      assertEquals(333, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      int int2 = simpleCharStream0.getColumn();
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals((-3967), simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals((-3968), simpleCharStream0.getLine());
      assertEquals((-3968), simpleCharStream0.getEndLine());
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(333, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      char[] charArray0 = simpleCharStream0.GetSuffix(0);
      assertEquals(0, charArray0.length);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals((-3967), simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals((-3968), simpleCharStream0.getLine());
      assertEquals((-3968), simpleCharStream0.getEndLine());
      assertEquals(333, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      simpleCharStream0.UpdateLineColumn('<');
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-3967), simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals((-3967), simpleCharStream0.getEndLine());
      assertEquals((-3967), simpleCharStream0.getLine());
      assertEquals(333, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      int int0 = 0;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0, 36, 0, 0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      pipedReader0.close();
      try { 
        simpleCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      char[] charArray0 = new char[8];
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, 71, 71);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.adjustBeginLineColumn(6, 6);
      assertEquals(7, simpleCharStream0.getBeginLine());
      assertEquals(6, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      simpleCharStream0.adjustBeginLineColumn(71, 7);
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(73, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-90);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-9), (byte)51, (byte) (-90), (byte)0, (byte)1, (byte)0, (byte)0}, byteArray0);
      
      int int0 = byteArrayInputStream0.read(byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-9), (byte)51, (byte) (-90), (byte)0, (byte)1, (byte)0, (byte)0}, byteArray0);
      
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(73, simpleCharStream0.getBeginLine());
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-9), (byte)51, (byte) (-90), (byte)0, (byte)1, (byte)0, (byte)0}, byteArray0);
      
      int int1 = simpleCharStream0.getBeginLine();
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(73, simpleCharStream0.getBeginLine());
      assertEquals(73, int1);
      assertFalse(int1 == int0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      String string0 = simpleCharStream0.GetImage();
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(73, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)51;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-9), (byte)51, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = byteArrayInputStream0.read(byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-9), (byte)51, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.setTabSize((-1));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, 71, 71);
      simpleCharStream0.adjustBeginLineColumn(71, 7);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)51;
      byte byte0 = (byte) (-90);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      simpleCharStream0.ReInit((Reader) null);
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      byteArrayInputStream0.read(byteArray0);
      simpleCharStream0.getBeginLine();
      String string0 = simpleCharStream0.GetImage();
      simpleCharStream0.getBeginLine();
      byteArrayInputStream0.reset();
      simpleCharStream0.GetImage();
      byteArrayInputStream0.markSupported();
      try { 
        simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, string0, (-1084), (-1));
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedReader pipedReader1 = new PipedReader();
      boolean boolean0 = SimpleCharStream.staticFlag;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader1, 2048, 1268, 2048);
      simpleCharStream0.GetSuffix(6);
      simpleCharStream0.getBeginLine();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-9);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, 2048, (-1731));
      int int0 = simpleCharStream0.getTabSize((-295));
      assertEquals(8, int0);
      
      simpleCharStream0.FillBuff();
      assertEquals((-1), simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      int int0 = 4070;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, (String) null);
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringReader stringReader0 = new StringReader("RPD<1zK2O!@sE");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      int int0 = 972;
      stringReader0.close();
      simpleCharStream0.ReInit((Reader) stringReader0, 972, 972);
      simpleCharStream0.bufpos = 972;
      char[] charArray0 = new char[2];
      charArray0[0] = '9';
      simpleCharStream0.ExpandBuff(true);
      charArray0[1] = 'q';
      int int1 = (-1);
      int int2 = 1666;
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, (-2216), 8);
      simpleCharStream0.line = (-2216);
      simpleCharStream0.backup(8);
      simpleCharStream0.getEndColumn();
      StringReader stringReader0 = new StringReader("1J /oC Tx+7/");
      simpleCharStream0.BeginToken();
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((Reader) stringReader0, 48, (-2410), (-2216));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1 /oC Tx+7/");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 47, (-1933));
      simpleCharStream0.prevCharIsLF = true;
      simpleCharStream0.BeginToken();
      simpleCharStream0.backup(1295);
      char char0 = simpleCharStream0.readChar();
      assertEquals(2802, simpleCharStream0.bufpos);
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      simpleCharStream0.ReInit((InputStream) pipedInputStream0, (String) null);
      pipedInputStream0.skip(0L);
      simpleCharStream0.ReInit((InputStream) pipedInputStream0, (String) null, 0, 0, 15);
      simpleCharStream0.adjustBeginLineColumn(0, 3);
      try { 
        simpleCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
}
