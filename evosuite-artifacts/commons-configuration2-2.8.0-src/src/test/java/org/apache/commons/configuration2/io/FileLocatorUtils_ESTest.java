/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 00:27:29 GMT 2022
 */

package org.apache.commons.configuration2.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.configuration2.io.BasePathLocationStrategy;
import org.apache.commons.configuration2.io.DefaultFileSystem;
import org.apache.commons.configuration2.io.FileLocationStrategy;
import org.apache.commons.configuration2.io.FileLocator;
import org.apache.commons.configuration2.io.FileLocatorUtils;
import org.apache.commons.configuration2.io.FileSystem;
import org.apache.commons.configuration2.io.FileSystemLocationStrategy;
import org.apache.commons.configuration2.io.VFSFileSystem;
import org.apache.commons.vfs2.FileSystemOptions;
import org.apache.commons.vfs2.provider.DefaultURLStreamHandler;
import org.apache.commons.vfs2.provider.VfsComponentContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileLocatorUtils_ESTest extends FileLocatorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      File file0 = FileLocatorUtils.getFile("file:file:/tmp/sourceURL", "file:file:/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/target/test-classes/");
      assertEquals("file:/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/target/test-classes/file:/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/target/test-classes", file0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      File file0 = FileLocatorUtils.getFile("file://file:/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/Logger%20name%20must%20not%20be%20null!/Logger%20name%20must%20not%20be%20null!", "file://file:/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/Logger%20name%20must%20not%20be%20null!/Logger%20name%20must%20not%20be%20null!");
      assertEquals("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/Logger name must not be null!/Logger name must not be null!", file0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0, fileSystemOptions0);
      URL uRL0 = MockURL.URL("qdIl=+69;Q7", "qdIl=+69;Q7", 4537, "qdIl=+69;Q7", (URLStreamHandler) defaultURLStreamHandler0);
      HashMap<String, URL> hashMap0 = new HashMap<String, URL>();
      FileLocator fileLocator0 = FileLocatorUtils.fromMap(hashMap0);
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = FileLocatorUtils.fileLocator(fileLocator0);
      fileLocator_FileLocatorBuilder0.sourceURL(uRL0);
      FileLocator fileLocator1 = new FileLocator(fileLocator_FileLocatorBuilder0);
      URL uRL1 = FileLocatorUtils.locateOrThrow(fileLocator1);
      assertEquals((-1), uRL1.getDefaultPort());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0, fileSystemOptions0);
      URL uRL0 = MockURL.URL("qdIl=+69;Q7", "qdIl=+69;Q7", 4537, "qdIl=+69;Q7", (URLStreamHandler) defaultURLStreamHandler0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      FileLocator fileLocator0 = FileLocatorUtils.fromMap(hashMap0);
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = FileLocatorUtils.fileLocator(fileLocator0);
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder1 = fileLocator_FileLocatorBuilder0.sourceURL(uRL0);
      FileLocator fileLocator1 = new FileLocator(fileLocator_FileLocatorBuilder1);
      URL uRL1 = FileLocatorUtils.locate(fileLocator1);
      assertEquals((-1), uRL1.getDefaultPort());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = FileLocatorUtils.toURL(mockFile0);
      HashMap<String, URL> hashMap0 = new HashMap<String, URL>();
      hashMap0.put("sourceURL", uRL0);
      FileLocator fileLocator0 = FileLocatorUtils.fromMap(hashMap0);
      URL uRL1 = FileLocatorUtils.locate(fileLocator0);
      assertNull(uRL1.getRef());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = FileLocatorUtils.toURL(mockFile0);
      String string0 = FileLocatorUtils.getFileName(uRL0);
      assertEquals("foo.bar", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      File file0 = FileLocatorUtils.getFile(".", "http://foo.bar");
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      File file0 = FileLocatorUtils.getFile(".", "./");
      assertNotNull(file0);
      assertEquals(".", file0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      File file0 = FileLocatorUtils.getFile("/", "");
      assertNotNull(file0);
      assertTrue(file0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("<G:E*/y{Y{cO]p]:P`[jFX");
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      File file0 = FileLocatorUtils.getFile("<G:E*", "y{Y{cO]p]:P`[jFX");
      assertNotNull(file0);
      assertTrue(file0.canExecute());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0, fileSystemOptions0);
      URL uRL0 = MockURL.URL("qdIl=+69;Q7", "qdIl=+69;Q7", 4537, "qdIl=+69;Q7", (URLStreamHandler) defaultURLStreamHandler0);
      String string0 = FileLocatorUtils.getBasePath(uRL0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler((VfsComponentContext) null, fileSystemOptions0);
      URL uRL0 = MockURL.URL("Cannot access property '", "TimeZone", 0, "", (URLStreamHandler) defaultURLStreamHandler0);
      File file0 = FileLocatorUtils.fileFromURL(uRL0);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      URL uRL0 = vFSFileSystem0.getURL("sourceURL/", ".");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("sourceURL/.");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "sourceURL");
      File file0 = FileLocatorUtils.fileFromURL(uRL0);
      assertEquals(1392409281320L, file0.lastModified());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      URL uRL0 = vFSFileSystem0.getURL("sourceURL/", ".");
      File file0 = FileLocatorUtils.fileFromURL(uRL0);
      assertEquals("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/sourceURL/.", file0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      URL uRL0 = MockURL.URL("file://");
      File file0 = FileLocatorUtils.fileFromURL(uRL0);
      assertEquals("", file0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      URI uRI0 = MockURI.URI("org.apache.commons.vfs2.FileObject", "org.apache.commons.vfs2.FileObject", "java.text.DateFormat");
      URL uRL0 = FileLocatorUtils.convertURIToURL(uRI0);
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      File file0 = FileLocatorUtils.constructFile("file:file:/home/ISSTA_USER/y%7BY%7BcO%5Dp%5D:P%60%5BjFX", "...");
      assertEquals("file:file:/home/ISSTA_USER/y%7BY%7BcO%5Dp%5D:P%60%5BjFX/...", file0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("ISO8601/ISO8601");
      FileSystemHandling.createFolder(evoSuiteFile0);
      File file0 = FileLocatorUtils.constructFile("ISO8601", "ISO8601");
      assertEquals("ISO8601/ISO8601", file0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("ISO8601/ISO8601");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "fileName");
      File file0 = FileLocatorUtils.constructFile("ISO8601", "ISO8601");
      assertEquals(9L, file0.length());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileLocatorUtils.toURL((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.io.FileLocatorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = FileLocatorUtils.fileLocator();
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder1 = fileLocator_FileLocatorBuilder0.fileName("$8 _hC0B98xK1jQv");
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder2 = fileLocator_FileLocatorBuilder1.basePath("file:///");
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder2);
      // Undeclared exception!
      try { 
        FileLocatorUtils.locateOrThrow(fileLocator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileLocatorUtils.locateFromClasspath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileLocatorUtils.getFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = FileLocatorUtils.fileLocator();
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder1 = fileLocator_FileLocatorBuilder0.fileName("file:");
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder2 = fileLocator_FileLocatorBuilder1.basePath("file:");
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder2);
      // Undeclared exception!
      try { 
        FileLocatorUtils.fullyInitializedLocator(fileLocator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = FileLocatorUtils.toURL(mockFile0);
      HashMap<String, URL> hashMap0 = new HashMap<String, URL>();
      hashMap0.put("fileName", uRL0);
      // Undeclared exception!
      try { 
        FileLocatorUtils.fromMap(hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.net.URL cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.configuration2.io.FileLocatorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileLocatorUtils.convertURIToURL((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      URI uRI0 = MockURI.URI("CD;,o+sd/", "", "CD;,o+sd/", (-1), "", "", "CD;,o+sd/");
      // Undeclared exception!
      try { 
        FileLocatorUtils.convertURIToURL(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileLocatorUtils.convertFileToURL((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.io.FileLocatorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileLocatorUtils.constructFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileLocatorUtils.appendPath((String) null, "<G:E*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<String, URL> hashMap0 = new HashMap<String, URL>();
      FileLocator fileLocator0 = FileLocatorUtils.fromMap(hashMap0);
      URL uRL0 = FileLocatorUtils.locate(fileLocator0);
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = FileLocatorUtils.fileLocator();
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder1 = fileLocator_FileLocatorBuilder0.fileName("./y{Y{cO]p]:P`[jFX");
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder2 = fileLocator_FileLocatorBuilder1.basePath("./y{Y{cO]p]:P`[jFX");
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder2);
      boolean boolean0 = FileLocatorUtils.isFullyInitialized(fileLocator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<String, BasePathLocationStrategy> hashMap0 = new HashMap<String, BasePathLocationStrategy>();
      FileLocator fileLocator0 = FileLocatorUtils.fromMap(hashMap0);
      boolean boolean0 = FileLocatorUtils.isFullyInitialized(fileLocator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = FileLocatorUtils.toURL(mockFile0);
      HashMap<String, URL> hashMap0 = new HashMap<String, URL>();
      hashMap0.put("sourceURL", uRL0);
      FileLocator fileLocator0 = FileLocatorUtils.fromMap(hashMap0);
      FileLocator fileLocator1 = FileLocatorUtils.fullyInitializedLocator(fileLocator0);
      boolean boolean0 = FileLocatorUtils.isFullyInitialized(fileLocator1);
      assertEquals("foo.bar", fileLocator1.getFileName());
      assertEquals("file:///tmp/", fileLocator1.getBasePath());
      assertNotSame(fileLocator1, fileLocator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FileLocatorUtils.put((FileLocator) null, hashMap0);
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileLocatorUtils.put((FileLocator) null, (Map<String, Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Map must not be null!
         //
         verifyException("org.apache.commons.configuration2.io.FileLocatorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<String, FileSystemLocationStrategy> hashMap0 = new HashMap<String, FileSystemLocationStrategy>();
      FileLocator fileLocator0 = FileLocatorUtils.fromMap(hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      FileLocatorUtils.put(fileLocator0, hashMap1);
      assertEquals(6, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileLocationStrategy fileLocationStrategy0 = FileLocatorUtils.obtainLocationStrategy((FileLocator) null);
      assertNotNull(fileLocationStrategy0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystem fileSystem0 = FileLocatorUtils.obtainFileSystem((FileLocator) null);
      assertNotNull(fileSystem0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<String, DefaultFileSystem> hashMap0 = new HashMap<String, DefaultFileSystem>();
      FileLocator fileLocator0 = FileLocatorUtils.fromMap(hashMap0);
      try { 
        FileLocatorUtils.locateOrThrow(fileLocator0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not locate: FileLocator [basePath=null, encoding=null, fileName=null, fileSystem=null, locationStrategy=null, sourceURL=null, urlConnectionOptions=null]
         //
         verifyException("org.apache.commons.configuration2.io.FileLocatorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      URL uRL0 = FileLocatorUtils.locateFromClasspath("sourceURL");
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      URL uRL0 = FileLocatorUtils.locate((FileLocator) null);
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = FileLocatorUtils.toURL(mockFile0);
      HashMap<String, URL> hashMap0 = new HashMap<String, URL>();
      hashMap0.put("sourceURL", uRL0);
      FileLocator fileLocator0 = FileLocatorUtils.fromMap(hashMap0);
      boolean boolean0 = FileLocatorUtils.isLocationDefined(fileLocator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = FileLocatorUtils.toURL(mockFile0);
      HashMap<String, URL> hashMap0 = new HashMap<String, URL>();
      hashMap0.put("sourceURL", uRL0);
      FileLocator fileLocator0 = FileLocatorUtils.fromMap(hashMap0);
      FileLocator fileLocator1 = FileLocatorUtils.fullyInitializedLocator(fileLocator0);
      boolean boolean0 = FileLocatorUtils.isLocationDefined(fileLocator1);
      assertEquals("foo.bar", fileLocator1.getFileName());
      assertTrue(boolean0);
      assertEquals("file:///tmp/", fileLocator1.getBasePath());
      assertNotSame(fileLocator1, fileLocator0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<String, URL> hashMap0 = new HashMap<String, URL>();
      FileLocator fileLocator0 = FileLocatorUtils.fromMap(hashMap0);
      boolean boolean0 = FileLocatorUtils.isLocationDefined(fileLocator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = FileLocatorUtils.isLocationDefined((FileLocator) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = FileLocatorUtils.fileLocator();
      fileLocator_FileLocatorBuilder0.basePath("");
      FileLocator fileLocator0 = fileLocator_FileLocatorBuilder0.create();
      boolean boolean0 = FileLocatorUtils.isFullyInitialized(fileLocator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      boolean boolean0 = FileLocatorUtils.isFullyInitialized((FileLocator) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = FileLocatorUtils.convertURIToURL(uRI0);
      String string0 = FileLocatorUtils.getFileName(uRL0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      URL uRL0 = vFSFileSystem0.getURL("org.apache.commonE.vfs2.util.FileObjectUils", "/");
      String string0 = FileLocatorUtils.getFileName(uRL0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = FileLocatorUtils.getFileName((URL) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      File file0 = FileLocatorUtils.getFile("[<LDu?_CiP", "/;Z.dc");
      assertEquals("/;Z.dc", file0.toString());
  }

  //@Test(timeout = 4000)
  public void test52()  throws Throwable  {
      URL uRL0 = FileLocatorUtils.locateFromClasspath("");
      String string0 = FileLocatorUtils.getBasePath(uRL0);
      assertEquals("file:///media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/target/test-classes/", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = FileLocatorUtils.getBasePath(uRL0);
      assertEquals("file://some/fake/but/wellformed/", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = FileLocatorUtils.convertURIToURL(uRI0);
      String string0 = FileLocatorUtils.getBasePath(uRL0);
      assertEquals("http://foo.bar", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = FileLocatorUtils.getBasePath((URL) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileLocator fileLocator0 = FileLocatorUtils.fromMap((Map<String, ?>) null);
      assertNull(fileLocator0.getBasePath());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = FileLocatorUtils.fileLocator();
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder1 = fileLocator_FileLocatorBuilder0.fileName("./y{Y{cO]p]:P`[jFX");
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder2 = fileLocator_FileLocatorBuilder1.basePath("./y{Y{cO]p]:P`[jFX");
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder2);
      FileLocator fileLocator1 = FileLocatorUtils.fullyInitializedLocator(fileLocator0);
      assertNotSame(fileLocator1, fileLocator0);
      assertFalse(fileLocator1.equals((Object)fileLocator0));
      assertEquals("./y{Y{cO]p]:P`[jFX", fileLocator1.getBasePath());
      assertEquals("./y{Y{cO]p]:P`[jFX", fileLocator1.getFileName());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = FileLocatorUtils.fileLocator();
      fileLocator_FileLocatorBuilder0.fileName("./y{Y{cO]p]:P`[jFX");
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      FileLocator fileLocator1 = FileLocatorUtils.fullyInitializedLocator(fileLocator0);
      assertEquals("file:///media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/./", fileLocator1.getBasePath());
      assertNotSame(fileLocator1, fileLocator0);
      assertEquals("./y{Y{cO]p]:P`[jFX", fileLocator1.getFileName());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = FileLocatorUtils.toURL(mockFile0);
      HashMap<String, URL> hashMap0 = new HashMap<String, URL>();
      hashMap0.put("sourceURL", uRL0);
      FileLocator fileLocator0 = FileLocatorUtils.fromMap(hashMap0);
      FileLocator fileLocator1 = FileLocatorUtils.fullyInitializedLocator(fileLocator0);
      assertNotNull(fileLocator1);
      
      FileLocator fileLocator2 = FileLocatorUtils.fullyInitializedLocator(fileLocator1);
      assertEquals("foo.bar", fileLocator2.getFileName());
      assertNotSame(fileLocator2, fileLocator0);
      assertEquals("file:///tmp/", fileLocator2.getBasePath());
      assertSame(fileLocator2, fileLocator1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      File file0 = FileLocatorUtils.constructFile("basePath", "/tmp/sourceURL/");
      assertTrue(file0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = FileLocatorUtils.fileLocator();
      fileLocator_FileLocatorBuilder0.fileName("./U pUBq:/");
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      URL uRL0 = FileLocatorUtils.locateOrThrow(fileLocator0);
      assertEquals("", uRL0.getHost());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = FileLocatorUtils.appendPath("./y{Y{cO]p]:P`[jFX", "./y{Y{cO]p]:P`[jFX");
      assertEquals("./y{Y{cO]p]:P`[jFX/y{Y{cO]p]:P`[jFX", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      FileLocator fileLocator0 = FileLocatorUtils.fromMap(map0);
      FileLocator fileLocator1 = FileLocatorUtils.fullyInitializedLocator(fileLocator0);
      assertNull(fileLocator1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MockFile mockFile0 = new MockFile("CD;,o+sd/", "");
      URL uRL0 = FileLocatorUtils.convertFileToURL(mockFile0);
      assertEquals("file", uRL0.getProtocol());
  }
}
