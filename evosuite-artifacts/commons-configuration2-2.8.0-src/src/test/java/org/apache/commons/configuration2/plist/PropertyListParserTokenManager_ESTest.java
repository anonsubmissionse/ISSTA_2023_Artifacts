/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 01:01:50 GMT 2022
 */

package org.apache.commons.configuration2.plist;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.StringReader;
import org.apache.commons.configuration2.plist.PropertyListParserTokenManager;
import org.apache.commons.configuration2.plist.SimpleCharStream;
import org.apache.commons.configuration2.plist.Token;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PropertyListParserTokenManager_ESTest extends PropertyListParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":~8><i:4X u");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-348), (-348), 2924);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      propertyListParserTokenManager0.jjround = (-348);
      Token token0 = propertyListParserTokenManager0.getNextToken();
      assertEquals(8, simpleCharStream0.bufpos);
      assertEquals((-348), token0.endLine);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":~8><i1:44X u");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-348), 0, 2924);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      propertyListParserTokenManager0.getNextToken();
      Token token0 = propertyListParserTokenManager0.getNextToken();
      assertEquals(12, simpleCharStream0.bufpos);
      assertEquals((-348), token0.endLine);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, (-2757), (-2757));
      PropertyListParserTokenManager propertyListParserTokenManager0 = null;
      try {
        propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0, 3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 3. State unchanged.
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)25;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0, (byte)2);
      // Undeclared exception!
      try { 
        propertyListParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("o@aS/v");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      propertyListParserTokenManager0.getNextToken();
      assertEquals(5, simpleCharStream0.bufpos);
      assertEquals(6, simpleCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 1898);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      Token token0 = propertyListParserTokenManager0.getNextToken();
      assertNotNull(token0);
      
      propertyListParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals("", token0.toString());
      assertEquals(0, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 1898);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      propertyListParserTokenManager0.ReInit(simpleCharStream0, 0);
      assertEquals((-1), simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 1898);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      Token token0 = propertyListParserTokenManager0.getNextToken();
      assertNotNull(token0);
      
      Token token1 = propertyListParserTokenManager0.jjFillToken();
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals("", token1.toString());
      assertEquals(0, token1.beginColumn);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      propertyListParserTokenManager0.getNextToken();
      simpleCharStream0.tokenBegin = (-4414);
      // Undeclared exception!
      try { 
        propertyListParserTokenManager0.jjFillToken();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager((SimpleCharStream) null);
      // Undeclared exception!
      try { 
        propertyListParserTokenManager0.jjFillToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      // Undeclared exception!
      try { 
        propertyListParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager((SimpleCharStream) null, 0);
      // Undeclared exception!
      try { 
        propertyListParserTokenManager0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":~8><i1:44X u");
      char[] charArray0 = new char[4];
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-348), 0, 2924);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      simpleCharStream0.buffer = charArray0;
      // Undeclared exception!
      try { 
        propertyListParserTokenManager0.getNextToken();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0, 0, 0, 0);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      // Undeclared exception!
      try { 
        propertyListParserTokenManager0.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.configuration2.plist.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0);
      PropertyListParserTokenManager propertyListParserTokenManager0 = null;
      try {
        propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 1898);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      propertyListParserTokenManager0.SwitchTo(0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      // Undeclared exception!
      try { 
        propertyListParserTokenManager0.SwitchTo((-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":~d><{AU:44Xu");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-348), (-348), 2924);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      propertyListParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"s&z\"");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      propertyListParserTokenManager0.jjround = (-1);
      Token token0 = propertyListParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|~7Ndjaw`#^(<");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      propertyListParserTokenManager0.getNextToken();
      propertyListParserTokenManager0.curLexState = 1;
      // Undeclared exception!
      try { 
        propertyListParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 14.  Encountered: <EOF> after : \"\"
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Y:~8><i1:44X u");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-348), (-348), 2924);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      // Undeclared exception!
      try { 
        propertyListParserTokenManager0.SwitchTo(7);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 7. State unchanged.
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0, (byte)2);
      Token token0 = propertyListParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(27, token0.kind);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-79);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0, (byte)2);
      // Undeclared exception!
      try { 
        propertyListParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":~8><i1:44X u");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-348), (-348), 2924);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-89);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (-348), (int) (byte) (-89));
      propertyListParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        propertyListParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -348, column -88.  Encountered: \"\\u0167\" (359), after : \"\"
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":~8><i1:44X u");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-348), (-348), 2924);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      byte[] byteArray0 = new byte[10];
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-32);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (-348), (int) (byte)34);
      propertyListParserTokenManager0.getNextToken();
      propertyListParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":~8><i1:44X u");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-348), (-348), 2924);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      byte[] byteArray0 = new byte[10];
      byteArray0[2] = (byte)34;
      byteArray0[6] = (byte) (-19);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (-348), (int) (byte)34);
      propertyListParserTokenManager0.getNextToken();
      propertyListParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":~8><i1:44X u");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-348), (-348), 2924);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-4);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip(1L);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (-348), (int) (byte) (-4));
      Token token0 = propertyListParserTokenManager0.getNextToken();
      assertEquals(5, simpleCharStream0.bufpos);
      assertEquals((-348), token0.endLine);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":~8><i1:44X u");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-348), (-348), 2924);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)34;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-32);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (-348), (int) (byte)34);
      propertyListParserTokenManager0.getNextToken();
      propertyListParserTokenManager0.getNextToken();
      assertEquals(37, simpleCharStream0.getBeginColumn());
      assertEquals(43, simpleCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":~8><i1:44X u");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-348), (-348), 2924);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)66;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip(1L);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (-348), (int) (byte)66);
      Token token0 = propertyListParserTokenManager0.getNextToken();
      assertEquals(5, simpleCharStream0.bufpos);
      assertEquals((-348), token0.endLine);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":~d><{AU:44Xu");
      char[] charArray0 = new char[4];
      stringReader0.read(charArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-348), (-348), 2924);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      Token token0 = propertyListParserTokenManager0.getNextToken();
      assertEquals((-348), simpleCharStream0.getBeginColumn());
      assertEquals((-348), token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"s&z\"");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      propertyListParserTokenManager0.getNextToken();
      //  // Unstable assertion: assertEquals(3, simpleCharStream0.bufpos);
      //  // Unstable assertion: assertEquals(4, simpleCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":~8><i1:44X u");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-348), (-348), 2924);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      byte[] byteArray0 = new byte[10];
      byteArray0[3] = (byte) (-32);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (-348), (int) (byte)34);
      propertyListParserTokenManager0.getNextToken();
      assertEquals(9, simpleCharStream0.bufpos);
      assertEquals(43, simpleCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":~8><i1:44X u");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-348), (-348), 2924);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)34;
      byteArray0[2] = (byte)34;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (-348), (int) (byte)34);
      propertyListParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(36, simpleCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":~8><i1:44X u");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-348), (-348), 2924);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (-348), (int) (byte)10);
      Token token0 = propertyListParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(18, token0.kind);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":~8><i1:44X u");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-348), (-348), 2924);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)34;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (-348), (int) (byte)34);
      propertyListParserTokenManager0.getNextToken();
      Token token0 = propertyListParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals((-348), token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":~8><i1:44X u");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-348), (-348), 2924);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)62;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (-348), (int) (byte)10);
      propertyListParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(6, simpleCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<*=TLiD");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-348), 0, 2924);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      propertyListParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, simpleCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<*BD");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-348), (-10), 2924);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      propertyListParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals((-7), simpleCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<*D");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-348), (-348), 2924);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      Token token0 = propertyListParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(20, token0.kind);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)21);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, (String) null);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      propertyListParserTokenManager0.getNextToken();
      assertEquals(7, simpleCharStream0.bufpos);
      assertEquals(8, simpleCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":~8><i1:44X u");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-348), (-348), 2924);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip(1L);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (-348), (int) (byte)47);
      propertyListParserTokenManager0.getNextToken();
      assertEquals(5, simpleCharStream0.bufpos);
      assertEquals(52, simpleCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":~8><i1:44X u");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-348), (-348), 2924);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)34;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip(1L);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (-348), (int) (byte)34);
      propertyListParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(34, simpleCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}y(2.6");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      Token token0 = propertyListParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":~d><{AU:44Xu");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-348), (-348), 2924);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      propertyListParserTokenManager0.getNextToken();
      Token token0 = propertyListParserTokenManager0.getNextToken();
      assertEquals(5, simpleCharStream0.bufpos);
      assertEquals((-343), token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Y:~8><i1:44X u");
      char[] charArray0 = new char[4];
      stringReader0.read(charArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-348), (-348), 2924);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      propertyListParserTokenManager0.getNextToken();
      assertEquals(7, simpleCharStream0.bufpos);
      assertEquals((-341), simpleCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e=");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      propertyListParserTokenManager0.getNextToken();
      Token token0 = propertyListParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(17, token0.kind);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ijVj6X;6R");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      propertyListParserTokenManager0.getNextToken();
      propertyListParserTokenManager0.getNextToken();
      assertEquals(7, simpleCharStream0.bufpos);
      assertEquals(8, simpleCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)21);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, (String) null);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      Token token0 = propertyListParserTokenManager0.getNextToken();
      assertEquals(7, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9:~8>\"i1:4SX u");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-342), (-342), 2924);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)41;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (-342), (int) (byte)14);
      propertyListParserTokenManager0.getNextToken();
      Token token0 = propertyListParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals((-342), token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|~7Ndjaw`#^(<");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      propertyListParserTokenManager0.getNextToken();
      Token token0 = propertyListParserTokenManager0.getNextToken();
      assertEquals(11, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<*");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-354), 0, 2924);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      propertyListParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, simpleCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager((SimpleCharStream) null, 0);
      // Undeclared exception!
      try { 
        propertyListParserTokenManager0.ReInit((SimpleCharStream) null, (-1278));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1278. State unchanged.
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-348), (-348), 2924);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      Token token0 = propertyListParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals((-348), token0.endLine);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager((SimpleCharStream) null, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(",3@`WFhit~-z");
      propertyListParserTokenManager0.setDebugStream(mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":~8><AU:44Xu");
      char[] charArray0 = new char[4];
      stringReader0.read(charArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-348), 0, 2924);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      Token token0 = propertyListParserTokenManager0.getNextToken();
      assertEquals(7, simpleCharStream0.bufpos);
      assertEquals(7, token0.endColumn);
  }
}
