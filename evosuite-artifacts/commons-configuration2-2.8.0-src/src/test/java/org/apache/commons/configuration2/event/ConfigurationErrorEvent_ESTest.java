/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 01:11:38 GMT 2022
 */

package org.apache.commons.configuration2.event;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.configuration2.event.ConfigurationErrorEvent;
import org.apache.commons.configuration2.event.EventType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConfigurationErrorEvent_ESTest extends ConfigurationErrorEvent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      EventType<ConfigurationErrorEvent> eventType0 = ConfigurationErrorEvent.WRITE;
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      ConfigurationErrorEvent configurationErrorEvent0 = new ConfigurationErrorEvent(object0, eventType0, eventType0, "", (Object) null, mockThrowable0);
      Object object1 = configurationErrorEvent0.getPropertyValue();
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      EventType<ConfigurationErrorEvent> eventType0 = ConfigurationErrorEvent.READ;
      MockThrowable mockThrowable0 = new MockThrowable();
      ConfigurationErrorEvent configurationErrorEvent0 = new ConfigurationErrorEvent(object0, eventType0, eventType0, "2$)biaG4jDQeo@-A", object0, mockThrowable0);
      ConfigurationErrorEvent configurationErrorEvent1 = new ConfigurationErrorEvent(configurationErrorEvent0, configurationErrorEvent0.WRITE, configurationErrorEvent0.READ, (String) null, (Object) null, mockThrowable0);
      String string0 = configurationErrorEvent1.getPropertyName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EventType<ConfigurationErrorEvent> eventType0 = ConfigurationErrorEvent.WRITE;
      MockIOException mockIOException0 = new MockIOException("");
      MockThrowable mockThrowable0 = new MockThrowable("", mockIOException0);
      ConfigurationErrorEvent configurationErrorEvent0 = new ConfigurationErrorEvent("g@v3HYk5.P\"RUWe<`Y", eventType0, eventType0, "", "g@v3HYk5.P\"RUWe<`Y", mockThrowable0);
      String string0 = configurationErrorEvent0.getPropertyName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Object object0 = new Object();
      EventType<ConfigurationErrorEvent> eventType0 = ConfigurationErrorEvent.ANY;
      ConfigurationErrorEvent configurationErrorEvent0 = new ConfigurationErrorEvent(object0, eventType0, (EventType<?>) null, "", "g@v3HYko.P\"HUWe6`Y", mockThrowable0);
      EventType<?> eventType1 = configurationErrorEvent0.getErrorOperationType();
      assertNull(eventType1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      EventType<ConfigurationErrorEvent> eventType0 = ConfigurationErrorEvent.READ;
      MockThrowable mockThrowable0 = new MockThrowable();
      ConfigurationErrorEvent configurationErrorEvent0 = new ConfigurationErrorEvent(object0, eventType0, eventType0, "2$)biaG4jDQeo@-A", object0, mockThrowable0);
      Throwable throwable0 = configurationErrorEvent0.getCause();
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EventType<ConfigurationErrorEvent> eventType0 = ConfigurationErrorEvent.ANY;
      MockThrowable mockThrowable0 = new MockThrowable("H?*}&=L<");
      MockIOException mockIOException0 = new MockIOException(mockThrowable0);
      ConfigurationErrorEvent configurationErrorEvent0 = null;
      try {
        configurationErrorEvent0 = new ConfigurationErrorEvent((Object) null, eventType0, eventType0, "H?*}&=L<", "H?*}&=L<", mockIOException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      MockThrowable mockThrowable0 = new MockThrowable("");
      MockIOException mockIOException0 = new MockIOException(mockThrowable0);
      ConfigurationErrorEvent configurationErrorEvent0 = null;
      try {
        configurationErrorEvent0 = new ConfigurationErrorEvent(object0, (EventType<? extends ConfigurationErrorEvent>) null, (EventType<?>) null, (String) null, (Object) null, mockIOException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Event type must not be null!
         //
         verifyException("org.apache.commons.configuration2.event.Event", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EventType<ConfigurationErrorEvent> eventType0 = ConfigurationErrorEvent.ANY;
      ConfigurationErrorEvent configurationErrorEvent0 = new ConfigurationErrorEvent("/", eventType0, eventType0, "/", "/", (Throwable) null);
      EventType<?> eventType1 = configurationErrorEvent0.getErrorOperationType();
      assertEquals("ERROR", eventType1.getName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EventType<ConfigurationErrorEvent> eventType0 = ConfigurationErrorEvent.ANY;
      ConfigurationErrorEvent configurationErrorEvent0 = new ConfigurationErrorEvent("/", eventType0, eventType0, "/", "/", (Throwable) null);
      Throwable throwable0 = configurationErrorEvent0.getCause();
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EventType<ConfigurationErrorEvent> eventType0 = ConfigurationErrorEvent.ANY;
      ConfigurationErrorEvent configurationErrorEvent0 = new ConfigurationErrorEvent("/", eventType0, eventType0, "/", "/", (Throwable) null);
      String string0 = configurationErrorEvent0.getPropertyName();
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EventType<ConfigurationErrorEvent> eventType0 = ConfigurationErrorEvent.WRITE;
      MockIOException mockIOException0 = new MockIOException();
      MockThrowable mockThrowable0 = new MockThrowable("", mockIOException0);
      ConfigurationErrorEvent configurationErrorEvent0 = new ConfigurationErrorEvent("g@v3HYk5.P\"RUWe<`Y", eventType0, eventType0, "", "g@v3HYk5.P\"RUWe<`Y", mockThrowable0);
      Object object0 = configurationErrorEvent0.getPropertyValue();
      assertEquals("g@v3HYk5.P\"RUWe<`Y", object0);
  }
}
