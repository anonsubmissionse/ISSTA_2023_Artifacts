/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 00:36:42 GMT 2022
 */

package org.apache.commons.configuration2.plist;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.util.Enumeration;
import org.apache.commons.configuration2.plist.ParseException;
import org.apache.commons.configuration2.plist.PropertyListParser;
import org.apache.commons.configuration2.plist.PropertyListParserTokenManager;
import org.apache.commons.configuration2.plist.SimpleCharStream;
import org.apache.commons.configuration2.plist.Token;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.lib.FileAccessRes;
import org.hsqldb.rowio.RowInputBinary;
import org.hsqldb.rowio.RowInputBinary180;
import org.hsqldb.rowio.RowInputTextLog;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PropertyListParser_ESTest extends PropertyListParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PropertyListParser propertyListParser0 = new PropertyListParser(pipedReader0);
      try { 
        propertyListParser0.filterData("<i>");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to parse the byte[] : Illegal hexadecimal character i at index 1
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PropertyListParser propertyListParser0 = new PropertyListParser(pipedReader0);
      String string0 = propertyListParser0.removeQuotes("\"\"");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertyListParser.JJCalls propertyListParser_JJCalls0 = new PropertyListParser.JJCalls();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[k|s/(dEl_z1{0q9");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      PropertyListParser propertyListParser0 = new PropertyListParser(propertyListParserTokenManager0);
      propertyListParser0.String();
      try { 
        propertyListParser0.Element();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \" \"{\" \"{ \"\" at line 1, column 13.
         // Was expecting one of:
         //     \")\" ...
         //     \",\" ...
         //     
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager((SimpleCharStream) null);
      PropertyListParser propertyListParser0 = new PropertyListParser(propertyListParserTokenManager0);
      String string0 = propertyListParser0.unescapeQuotes("M??f,66]$^i");
      assertEquals("M??f,66]$^i", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, (-111), (-111), 0);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      PropertyListParser propertyListParser0 = new PropertyListParser(propertyListParserTokenManager0);
      String string0 = propertyListParser0.unescapeQuotes("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PropertyListParser propertyListParser0 = new PropertyListParser(pipedReader0);
      String string0 = propertyListParser0.removeQuotes("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      RowInputBinary rowInputBinary0 = new RowInputBinary(byteArray0);
      PropertyListParser propertyListParser0 = new PropertyListParser(rowInputBinary0);
      propertyListParser0.token = null;
      Token token0 = propertyListParser0.getToken((byte) (-22));
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RowInputBinary rowInputBinary0 = new RowInputBinary(8192);
      PropertyListParser propertyListParser0 = new PropertyListParser(rowInputBinary0);
      propertyListParser0.getToken(1);
      ParseException parseException0 = propertyListParser0.generateParseException();
      assertNotNull(parseException0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager((SimpleCharStream) null);
      PropertyListParser propertyListParser0 = new PropertyListParser(propertyListParserTokenManager0);
      byte[] byteArray0 = propertyListParser0.filterData("D");
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PropertyListParser propertyListParser0 = new PropertyListParser(pipedReader0);
      byte[] byteArray0 = propertyListParser0.filterData("<>");
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<>");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1172), (-827), 24);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      PropertyListParser propertyListParser0 = new PropertyListParser(propertyListParserTokenManager0);
      byte[] byteArray0 = propertyListParser0.Data();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RowInputBinary rowInputBinary0 = new RowInputBinary(4318);
      PropertyListParser propertyListParser0 = new PropertyListParser(rowInputBinary0);
      // Undeclared exception!
      try { 
        propertyListParser0.unescapeQuotes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-105);
      RowInputBinary rowInputBinary0 = new RowInputBinary(byteArray0);
      PropertyListParser propertyListParser0 = new PropertyListParser(rowInputBinary0);
      propertyListParser0.getNextToken();
      // Undeclared exception!
      try { 
        propertyListParser0.parse();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"\\u0117\" (279), after : \"\"
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PropertyListParser propertyListParser0 = new PropertyListParser((Reader) null);
      // Undeclared exception!
      try { 
        propertyListParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(205);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 205, 205);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      PropertyListParser propertyListParser0 = new PropertyListParser(propertyListParserTokenManager0);
      char[] charArray0 = new char[0];
      simpleCharStream0.buffer = charArray0;
      // Undeclared exception!
      try { 
        propertyListParser0.parse();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\\\"");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      int[] intArray0 = new int[1];
      simpleCharStream0.bufline = intArray0;
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      PropertyListParser propertyListParser0 = new PropertyListParser(propertyListParserTokenManager0);
      // Undeclared exception!
      try { 
        propertyListParser0.parse();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-113);
      RowInputBinary rowInputBinary0 = new RowInputBinary(byteArray0);
      PropertyListParser propertyListParser0 = new PropertyListParser(rowInputBinary0);
      // Undeclared exception!
      try { 
        propertyListParser0.getToken(624);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"\\u010f\" (271), after : \"\"
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RowInputBinary rowInputBinary0 = new RowInputBinary(8192);
      PropertyListParser propertyListParser0 = new PropertyListParser(rowInputBinary0);
      // Undeclared exception!
      propertyListParser0.getToken(8192);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PropertyListParser propertyListParser0 = new PropertyListParser((Reader) null);
      // Undeclared exception!
      try { 
        propertyListParser0.getToken(679);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 170, 1732);
      simpleCharStream0.available = 2147483645;
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      PropertyListParser propertyListParser0 = new PropertyListParser(propertyListParserTokenManager0);
      // Undeclared exception!
      try { 
        propertyListParser0.getToken(14);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(2);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0, 2, 0);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      PropertyListParser propertyListParser0 = new PropertyListParser(propertyListParserTokenManager0);
      simpleCharStream0.Done();
      // Undeclared exception!
      try { 
        propertyListParser0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 170, 1732);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      PropertyListParser propertyListParser0 = new PropertyListParser(propertyListParserTokenManager0);
      simpleCharStream0.ExpandBuff(false);
      // Undeclared exception!
      try { 
        propertyListParser0.getNextToken();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 170, 1732);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      PropertyListParser propertyListParser0 = new PropertyListParser(propertyListParserTokenManager0);
      simpleCharStream0.bufline = propertyListParserTokenManager0.jjnewLexState;
      // Undeclared exception!
      try { 
        propertyListParser0.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-105);
      RowInputBinary rowInputBinary0 = new RowInputBinary(byteArray0);
      PropertyListParser propertyListParser0 = new PropertyListParser(rowInputBinary0);
      propertyListParser0.String();
      // Undeclared exception!
      try { 
        propertyListParser0.String();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"\\u0117\" (279), after : \"\"
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PropertyListParser propertyListParser0 = new PropertyListParser((PropertyListParserTokenManager) null);
      // Undeclared exception!
      try { 
        propertyListParser0.String();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Tuple tag=");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      PropertyListParser propertyListParser0 = new PropertyListParser(propertyListParserTokenManager0);
      simpleCharStream0.bufpos = (-93);
      // Undeclared exception!
      try { 
        propertyListParser0.String();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      RowInputBinary rowInputBinary0 = new RowInputBinary(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(rowInputBinary0);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      PropertyListParser propertyListParser0 = new PropertyListParser(propertyListParserTokenManager0);
      // Undeclared exception!
      try { 
        propertyListParser0.ReInit((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PropertyListParser propertyListParser0 = new PropertyListParser(sequenceInputStream0);
      // Undeclared exception!
      try { 
        propertyListParser0.ReInit((InputStream) sequenceInputStream0, ",Y?T={Yv`AC$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.UnsupportedEncodingException: ,Y?T={Yv`AC$
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      RowInputBinary rowInputBinary0 = new RowInputBinary(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(rowInputBinary0, (byte)0, (byte)84, 1158);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      PropertyListParser propertyListParser0 = new PropertyListParser(propertyListParserTokenManager0);
      // Undeclared exception!
      try { 
        propertyListParser0.ReInit((InputStream) rowInputBinary0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      RowInputBinary180 rowInputBinary180_0 = new RowInputBinary180(byteArray0);
      PropertyListParser propertyListParser0 = new PropertyListParser(rowInputBinary180_0);
      // Undeclared exception!
      try { 
        propertyListParser0.ReInit((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PropertyListParser propertyListParser0 = new PropertyListParser(pipedReader0);
      try { 
        propertyListParser0.Property();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 0, column 0.
         // Was expecting one of:
         //     <STRING> ...
         //     <QUOTED_STRING> ...
         //     
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-105);
      RowInputBinary rowInputBinary0 = new RowInputBinary(byteArray0);
      PropertyListParser propertyListParser0 = new PropertyListParser(rowInputBinary0);
      // Undeclared exception!
      try { 
        propertyListParser0.Property();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"\\u0117\" (279), after : \"\"
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RowInputBinary rowInputBinary0 = new RowInputBinary(16384);
      PropertyListParser propertyListParser0 = new PropertyListParser(rowInputBinary0);
      // Undeclared exception!
      propertyListParser0.Property();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PropertyListParser propertyListParser0 = new PropertyListParser((Reader) null);
      // Undeclared exception!
      try { 
        propertyListParser0.Property();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RowInputTextLog rowInputTextLog0 = new RowInputTextLog();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(rowInputTextLog0, 11, 17, 1139);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      simpleCharStream0.bufpos = 1139;
      PropertyListParser propertyListParser0 = new PropertyListParser(propertyListParserTokenManager0);
      // Undeclared exception!
      try { 
        propertyListParser0.Property();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-105);
      RowInputBinary rowInputBinary0 = new RowInputBinary(byteArray0);
      rowInputBinary0.readShort();
      PropertyListParser propertyListParser0 = new PropertyListParser(rowInputBinary0);
      // Undeclared exception!
      try { 
        propertyListParser0.Element();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\u0117\" (279), after : \"\"
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PropertyListParser propertyListParser0 = new PropertyListParser((PropertyListParserTokenManager) null);
      // Undeclared exception!
      try { 
        propertyListParser0.Element();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<>");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1192), (-1192), 24);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      PropertyListParser propertyListParser0 = new PropertyListParser(propertyListParserTokenManager0);
      simpleCharStream0.available = (-1192);
      // Undeclared exception!
      try { 
        propertyListParser0.Element();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<>");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1192), (-1192), 24);
      simpleCharStream0.backup(8);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      PropertyListParser propertyListParser0 = new PropertyListParser(propertyListParserTokenManager0);
      // Undeclared exception!
      try { 
        propertyListParser0.Element();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      RowInputBinary180 rowInputBinary180_0 = new RowInputBinary180(byteArray0);
      PropertyListParser propertyListParser0 = new PropertyListParser(rowInputBinary180_0);
      StringReader stringReader0 = new StringReader("<<wbjY]UYLF5\"3Dh");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 160, (byte)15, 2);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0, 2);
      propertyListParser0.ReInit(propertyListParserTokenManager0);
      // Undeclared exception!
      try { 
        propertyListParser0.Dictionary();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 160, column 32.  Encountered: <EOF> after : \"\"
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RowInputBinary rowInputBinary0 = new RowInputBinary(16384);
      PropertyListParser propertyListParser0 = new PropertyListParser(rowInputBinary0);
      // Undeclared exception!
      propertyListParser0.Dictionary();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, (-111), (-111), 0);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      PropertyListParser propertyListParser0 = new PropertyListParser(propertyListParserTokenManager0);
      // Undeclared exception!
      try { 
        propertyListParser0.Dictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\\\"");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      int[] intArray0 = new int[1];
      simpleCharStream0.bufline = intArray0;
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      PropertyListParser propertyListParser0 = new PropertyListParser(propertyListParserTokenManager0);
      // Undeclared exception!
      try { 
        propertyListParser0.Dictionary();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RowInputBinary rowInputBinary0 = new RowInputBinary();
      PropertyListParser propertyListParser0 = new PropertyListParser(rowInputBinary0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      rowInputBinary0.resetRow((-17179869185L), 268435456);
      // Undeclared exception!
      propertyListParser0.Date();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager((SimpleCharStream) null);
      PropertyListParser propertyListParser0 = new PropertyListParser(propertyListParserTokenManager0);
      // Undeclared exception!
      try { 
        propertyListParser0.Date();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      RowInputBinary rowInputBinary0 = new RowInputBinary(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(rowInputBinary0, (byte)0, (byte)84, 1158);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      PropertyListParser propertyListParser0 = new PropertyListParser(propertyListParserTokenManager0);
      simpleCharStream0.bufpos = 134217728;
      // Undeclared exception!
      try { 
        propertyListParser0.Date();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-105);
      RowInputBinary rowInputBinary0 = new RowInputBinary(byteArray0);
      PropertyListParser propertyListParser0 = new PropertyListParser(rowInputBinary0);
      propertyListParser0.String();
      // Undeclared exception!
      try { 
        propertyListParser0.Data();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"\\u0117\" (279), after : \"\"
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PropertyListParser propertyListParser0 = new PropertyListParser((PropertyListParserTokenManager) null);
      // Undeclared exception!
      try { 
        propertyListParser0.Data();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 170, 1732);
      simpleCharStream0.ExpandBuff(false);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      PropertyListParser propertyListParser0 = new PropertyListParser(propertyListParserTokenManager0);
      // Undeclared exception!
      try { 
        propertyListParser0.Data();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RowInputBinary rowInputBinary0 = new RowInputBinary(8192);
      PropertyListParser propertyListParser0 = new PropertyListParser(rowInputBinary0);
      Token token0 = propertyListParser0.getToken(1);
      token0.kind = 2147483646;
      // Undeclared exception!
      try { 
        propertyListParser0.Data();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147483646
         //
         verifyException("org.apache.commons.configuration2.plist.ParseException", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PropertyListParser propertyListParser0 = new PropertyListParser(pipedReader0);
      SimpleCharStream simpleCharStream0 = propertyListParser0.jj_input_stream;
      simpleCharStream0.inBuf = 40000;
      // Undeclared exception!
      propertyListParser0.Array();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, (-111), (-111), 0);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      PropertyListParser propertyListParser0 = new PropertyListParser(propertyListParserTokenManager0);
      // Undeclared exception!
      try { 
        propertyListParser0.Array();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      RowInputBinary rowInputBinary0 = new RowInputBinary(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(rowInputBinary0, (byte)0, (byte)0, (byte)0);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      PropertyListParser propertyListParser0 = new PropertyListParser(propertyListParserTokenManager0);
      // Undeclared exception!
      try { 
        propertyListParser0.Array();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RowInputBinary rowInputBinary0 = new RowInputBinary();
      PropertyListParser propertyListParser0 = null;
      try {
        propertyListParser0 = new PropertyListParser(rowInputBinary0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.UnsupportedEncodingException: 
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PropertyListParser propertyListParser0 = null;
      try {
        propertyListParser0 = new PropertyListParser((InputStream) null, ">");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PropertyListParser propertyListParser0 = null;
      try {
        propertyListParser0 = new PropertyListParser((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      RowInputBinary rowInputBinary0 = new RowInputBinary(8192);
      PropertyListParser propertyListParser0 = new PropertyListParser(rowInputBinary0);
      // Undeclared exception!
      try { 
        propertyListParser0.generateParseException();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.plist.ParseException", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PropertyListParser propertyListParser0 = new PropertyListParser(pipedInputStream0);
      propertyListParser0.ReInit((InputStream) pipedInputStream0, (String) null);
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FileAccessRes fileAccessRes0 = new FileAccessRes();
      InputStream inputStream0 = fileAccessRes0.openInputStreamElement("");
      PropertyListParser propertyListParser0 = new PropertyListParser(inputStream0, (String) null);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)123;
      RowInputBinary180 rowInputBinary180_0 = new RowInputBinary180(byteArray0);
      PropertyListParser propertyListParser0 = new PropertyListParser(rowInputBinary180_0);
      rowInputBinary180_0.readShort();
      try { 
        propertyListParser0.Element();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 1, column 3.
         // Was expecting:
         //     \"=\" ...
         //     
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PropertyListParser propertyListParser0 = new PropertyListParser(pipedInputStream0);
      try { 
        propertyListParser0.Element();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 0, column 0.
         // Was expecting one of:
         //     \"{\" ...
         //     <DATA> ...
         //     <DATE> ...
         //     <STRING> ...
         //     <QUOTED_STRING> ...
         //     
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)123;
      RowInputBinary180 rowInputBinary180_0 = new RowInputBinary180(byteArray0);
      PropertyListParser propertyListParser0 = new PropertyListParser(rowInputBinary180_0);
      propertyListParser0.getNextToken();
      try { 
        propertyListParser0.Dictionary();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 1, column 5.
         // Was expecting:
         //     \"=\" ...
         //     
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[k|s/(dEl_z1{0q9");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      PropertyListParser propertyListParser0 = new PropertyListParser(propertyListParserTokenManager0);
      propertyListParser0.Element();
      try { 
        propertyListParser0.Element();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \" \"{\" \"{ \"\" at line 1, column 13.
         // Was expecting one of:
         //     \")\" ...
         //     \",\" ...
         //     
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      RowInputBinary rowInputBinary0 = new RowInputBinary(8192);
      PropertyListParser propertyListParser0 = new PropertyListParser(rowInputBinary0);
      Token token0 = propertyListParser0.getToken(1);
      Token token1 = propertyListParser0.getToken(48);
      assertEquals(0, rowInputBinary0.available());
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      RowInputBinary rowInputBinary0 = new RowInputBinary(1037);
      PropertyListParser propertyListParser0 = new PropertyListParser(rowInputBinary0);
      Token token0 = propertyListParser0.getToken(1);
      assertEquals(1037L, rowInputBinary0.getPos());
      
      Token token1 = propertyListParser0.getNextToken();
      assertSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PropertyListParser propertyListParser0 = new PropertyListParser(pipedReader0);
      propertyListParser0.ReInit((Reader) pipedReader0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PropertyListParser propertyListParser0 = new PropertyListParser(pipedReader0);
      try { 
        propertyListParser0.String();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 0, column 0.
         // Was expecting one of:
         //     <STRING> ...
         //     <QUOTED_STRING> ...
         //     
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[k|s/(dEl_z1{0q9");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      PropertyListParser propertyListParser0 = new PropertyListParser(propertyListParserTokenManager0);
      propertyListParser0.Element();
      try { 
        propertyListParser0.Array();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \" \"{\" \"{ \"\" at line 1, column 13.
         // Was expecting one of:
         //     \")\" ...
         //     \",\" ...
         //     
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Sm>Eju>vr]\"hNamml");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      PropertyListParser propertyListParser0 = new PropertyListParser(propertyListParserTokenManager0);
      propertyListParser0.Element();
      try { 
        propertyListParser0.Element();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \" \"\\\"\" \"\\\" \"\" at line 1, column 11.
         // Was expecting one of:
         //     \"{\" ...
         //     <DATA> ...
         //     <DATE> ...
         //     <STRING> ...
         //     <QUOTED_STRING> ...
         //     
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 948, 948, 24);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      PropertyListParser propertyListParser0 = new PropertyListParser(propertyListParserTokenManager0);
      try { 
        propertyListParser0.Element();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \" \">\" \"> \"\" at line 948, column 948.
         // Was expecting one of:
         //     \"{\" ...
         //     <DATA> ...
         //     <DATE> ...
         //     <STRING> ...
         //     <QUOTED_STRING> ...
         //     
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1192), (-1192), 24);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      PropertyListParser propertyListParser0 = new PropertyListParser(propertyListParserTokenManager0);
      try { 
        propertyListParser0.Element();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \" \"<\" \"< \"\" at line -1192, column -1192.
         // Was expecting one of:
         //     \"{\" ...
         //     <DATA> ...
         //     <DATE> ...
         //     <STRING> ...
         //     <QUOTED_STRING> ...
         //     
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Tuple tag=");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      PropertyListParser propertyListParser0 = new PropertyListParser(propertyListParserTokenManager0);
      propertyListParser0.getNextToken();
      propertyListParser0.String();
      try { 
        propertyListParser0.Element();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \" \"=\" \"= \"\" at line 1, column 10.
         // Was expecting one of:
         //     \"{\" ...
         //     <DATA> ...
         //     <DATE> ...
         //     <STRING> ...
         //     <QUOTED_STRING> ...
         //     
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)59;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PropertyListParser propertyListParser0 = new PropertyListParser(byteArrayInputStream0);
      try { 
        propertyListParser0.Element();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \" \";\" \"; \"\" at line 1, column 1.
         // Was expecting one of:
         //     \"{\" ...
         //     <DATA> ...
         //     <DATE> ...
         //     <STRING> ...
         //     <QUOTED_STRING> ...
         //     
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[3] = (byte)125;
      RowInputBinary180 rowInputBinary180_0 = new RowInputBinary180(byteArray0);
      PropertyListParser propertyListParser0 = new PropertyListParser(rowInputBinary180_0);
      propertyListParser0.getNextToken();
      try { 
        propertyListParser0.Element();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \" \"}\" \"} \"\" at line 1, column 4.
         // Was expecting one of:
         //     \"{\" ...
         //     <DATA> ...
         //     <DATE> ...
         //     <STRING> ...
         //     <QUOTED_STRING> ...
         //     
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[k|s/({dEl_z1{0q9");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      PropertyListParser propertyListParser0 = new PropertyListParser(propertyListParserTokenManager0);
      propertyListParser0.Element();
      try { 
        propertyListParser0.Element();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \" \"{\" \"{ \"\" at line 1, column 14.
         // Was expecting:
         //     \"=\" ...
         //     
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      PropertyListParser propertyListParser0 = new PropertyListParser((PropertyListParserTokenManager) null);
      try { 
        propertyListParser0.filterData("<");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to parse the byte[] : Illegal hexadecimal character < at index 1
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<>");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1192), (-1192), 24);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      PropertyListParser propertyListParser0 = new PropertyListParser(propertyListParserTokenManager0);
      propertyListParser0.Element();
      assertEquals((-1192), simpleCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      RowInputBinary rowInputBinary0 = new RowInputBinary(16384);
      PropertyListParser propertyListParser0 = new PropertyListParser(rowInputBinary0);
      byte[] byteArray0 = propertyListParser0.filterData((String) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PropertyListParser propertyListParser0 = new PropertyListParser(pipedReader0);
      String string0 = propertyListParser0.removeQuotes("\"");
      assertEquals("\"", string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager((SimpleCharStream) null);
      PropertyListParser propertyListParser0 = new PropertyListParser(propertyListParserTokenManager0);
      String string0 = propertyListParser0.removeQuotes("\"3");
      assertEquals("\"3", string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PropertyListParser propertyListParser0 = new PropertyListParser(pipedReader0);
      String string0 = propertyListParser0.removeQuotes((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      PropertyListParser propertyListParser0 = new PropertyListParser((Reader) null);
      propertyListParser0.enable_tracing();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      RowInputBinary rowInputBinary0 = new RowInputBinary(8192);
      PropertyListParser propertyListParser0 = new PropertyListParser(rowInputBinary0);
      try { 
        propertyListParser0.Data();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \" <STRING> \" \"\" at line 1, column 1.
         // Was expecting:
         //     <DATA> ...
         //     
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(205);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 205, 205);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      PropertyListParser propertyListParser0 = new PropertyListParser(propertyListParserTokenManager0);
      try { 
        propertyListParser0.parse();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 0, column 0.
         // Was expecting:
         //     \"{\" ...
         //     
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      RowInputBinary rowInputBinary0 = new RowInputBinary(1037);
      PropertyListParser propertyListParser0 = new PropertyListParser(rowInputBinary0);
      try { 
        propertyListParser0.parseDate("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Input string too short: , index: 0
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListConfiguration$DateComponentParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      RowInputBinary rowInputBinary0 = new RowInputBinary(8192);
      PropertyListParser propertyListParser0 = new PropertyListParser(rowInputBinary0);
      propertyListParser0.ReInit((InputStream) rowInputBinary0);
      assertTrue(rowInputBinary0.markSupported());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      PropertyListParser propertyListParser0 = new PropertyListParser((Reader) null);
      propertyListParser0.disable_tracing();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"Jj[WFf:3l\"");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      PropertyListParserTokenManager propertyListParserTokenManager0 = new PropertyListParserTokenManager(simpleCharStream0);
      PropertyListParser propertyListParser0 = new PropertyListParser(propertyListParserTokenManager0);
      Object object0 = propertyListParser0.Element();
      assertEquals("Jj[WFf:3l", object0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PropertyListParser propertyListParser0 = new PropertyListParser(pipedInputStream0);
      try { 
        propertyListParser0.Date();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 0, column 0.
         // Was expecting:
         //     <DATE> ...
         //     
         //
         verifyException("org.apache.commons.configuration2.plist.PropertyListParser", e);
      }
  }
}
