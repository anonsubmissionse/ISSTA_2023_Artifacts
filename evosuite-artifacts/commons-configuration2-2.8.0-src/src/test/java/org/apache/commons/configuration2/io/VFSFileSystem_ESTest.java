/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 00:28:47 GMT 2022
 */

package org.apache.commons.configuration2.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URI;
import java.net.URL;
import org.apache.commons.configuration2.io.ConfigurationLogger;
import org.apache.commons.configuration2.io.VFSFileSystem;
import org.apache.commons.logging.impl.Log4JLogger;
import org.apache.commons.vfs2.FileContent;
import org.apache.commons.vfs2.FileName;
import org.apache.commons.vfs2.FileObject;
import org.apache.commons.vfs2.FileSystemConfigBuilder;
import org.apache.commons.vfs2.FileSystemManager;
import org.apache.commons.vfs2.VFS;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VFSFileSystem_ESTest extends VFSFileSystem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(fileSystemManager0).toString();
      doReturn((FileName) null).when(fileSystemManager0).resolveName(any(org.apache.commons.vfs2.FileName.class) , anyString());
      doReturn((FileName) null).when(fileSystemManager0).resolveURI(anyString());
      VFS.setManager(fileSystemManager0);
      // Undeclared exception!
      try { 
        vFSFileSystem0.getPath((File) null, (URL) null, "org.apache.commons.vfs2.FileName$MockitoMock$1277435924@0000000002", "EpOhjiJ-_\"Y\")n~5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.io.VFSFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      String string0 = vFSFileSystem0.getPath((File) null, (URL) null, "'! Ignoring.", "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      MockFile mockFile0 = new MockFile("9F>[]qe**R`\"4", "");
      URL uRL0 = mockFile0.toURL();
      String string0 = vFSFileSystem0.getPath(mockFile0, uRL0, "fileSystem", (String) null);
      assertEquals("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/9F>[]qe**R`\"4", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      URL uRL0 = MockURL.getHttpExample();
      try { 
        vFSFileSystem0.getOutputStream(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to access http://www.someFakeButWellFormedURL.org/fooExample
         //
         verifyException("org.apache.commons.configuration2.io.VFSFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      try { 
        vFSFileSystem0.getInputStream(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to access ftp://ftp.someFakeButWellFormedURL.org/fooExample
         //
         verifyException("org.apache.commons.configuration2.io.VFSFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      String string0 = vFSFileSystem0.getFileName(":3NsWh");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      String string0 = vFSFileSystem0.getBasePath("P.:xr");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      FileName fileName1 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn("").when(fileName1).toString();
      doReturn("").when(fileName1).getBaseName();
      doReturn(fileName0).when(fileName1).getParent();
      FileName fileName2 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn("").when(fileName2).getURI();
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(fileSystemManager0).toString();
      doReturn(fileName2).when(fileSystemManager0).resolveName(any(org.apache.commons.vfs2.FileName.class) , anyString());
      doReturn(fileName1).when(fileSystemManager0).resolveURI(anyString());
      VFS.setManager(fileSystemManager0);
      String string0 = vFSFileSystem0.getPath((File) null, (URL) null, (String) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      MockFile mockFile0 = new MockFile("EpOhjiJ-_\"Y\")n~5", "");
      URL uRL0 = mockFile0.toURL();
      FileSystemConfigBuilder fileSystemConfigBuilder0 = mock(FileSystemConfigBuilder.class, new ViolatedAssumptionAnswer());
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(fileContent0).getOutputStream();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileContent0).when(fileObject0).getContent();
      doReturn(false).when(fileObject0).isFolder();
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn("", (String) null).when(fileSystemManager0).toString();
      doReturn((FileSystemConfigBuilder) null).when(fileSystemManager0).getFileSystemConfigBuilder(anyString());
      doReturn(fileObject0).when(fileSystemManager0).resolveFile(anyString() , any(org.apache.commons.vfs2.FileSystemOptions.class));
      VFS.setManager(fileSystemManager0);
      OutputStream outputStream0 = vFSFileSystem0.getOutputStream(uRL0);
      assertNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      MockFile mockFile0 = new MockFile("EpOhjiJ-_\"Y\")n~5", "");
      URL uRL0 = mockFile0.toURL();
      FileSystemConfigBuilder fileSystemConfigBuilder0 = mock(FileSystemConfigBuilder.class, new ViolatedAssumptionAnswer());
      MockPrintStream mockPrintStream0 = new MockPrintStream("EpOhjiJ-_\"Y\")n~5");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 1);
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn((FileContent) null).when(fileObject0).getContent();
      doReturn(false).when(fileObject0).isFolder();
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(fileSystemManager0).toString();
      doReturn(fileSystemConfigBuilder0).when(fileSystemManager0).getFileSystemConfigBuilder(anyString());
      doReturn(fileObject0).when(fileSystemManager0).resolveFile(anyString() , any(org.apache.commons.vfs2.FileSystemOptions.class));
      VFS.setManager(fileSystemManager0);
      try { 
        vFSFileSystem0.getOutputStream(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot access content of file:/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/EpOhjiJ-_\"Y\")n~5
         //
         verifyException("org.apache.commons.configuration2.io.VFSFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      String string0 = vFSFileSystem0.getFileName("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn("").when(fileName0).toString();
      doReturn((String) null).when(fileName0).getBaseName();
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn("").when(fileSystemManager0).toString();
      doReturn(fileName0).when(fileSystemManager0).resolveURI(anyString());
      VFS.setManager(fileSystemManager0);
      String string0 = vFSFileSystem0.getFileName("DefaultFilesystemManager.close: not all components are closed: ");
      //  // Unstable assertion: assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      // Undeclared exception!
      try { 
        vFSFileSystem0.locateFromURL("GGdBM.pJ2", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.provider.UriParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      Log4JLogger log4JLogger0 = new Log4JLogger();
      ConfigurationLogger configurationLogger0 = new ConfigurationLogger(log4JLogger0);
      vFSFileSystem0.setLogger(configurationLogger0);
      // Undeclared exception!
      try { 
        vFSFileSystem0.locateFromURL("org.apache.commons.vfs2.provider.res.ResourceFileNameParser", "/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/9F>[]qe**R`\"4/fileSystem");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.log4j.CategoryKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn("EpOhjiJ-_\"Y\")n~5").when(fileName0).toString();
      doReturn((FileName) null).when(fileName0).getParent();
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn("EpOhjiJ-_\"Y\")n~5", (String) null).when(fileSystemManager0).toString();
      doReturn(fileName0, (FileName) null).when(fileSystemManager0).resolveURI(anyString());
      VFS.setManager(fileSystemManager0);
      vFSFileSystem0.getBasePath("file:///media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/");
      // Undeclared exception!
      try { 
        vFSFileSystem0.getURL("file:///media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/", "file:///media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.io.VFSFileSystem$VFSURLStreamHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      // Undeclared exception!
      try { 
        vFSFileSystem0.getOutputStream((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      // Undeclared exception!
      try { 
        vFSFileSystem0.getInputStream((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      // Undeclared exception!
      try { 
        vFSFileSystem0.getFileName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.provider.UriParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      // Undeclared exception!
      try { 
        vFSFileSystem0.getBasePath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.provider.UriParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      URL uRL0 = vFSFileSystem0.getURL((String) null, "");
      assertEquals((-1), uRL0.getPort());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      URL uRL0 = vFSFileSystem0.locateFromURL("file:///media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/", "0r~gt0[##r>;h");
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      URL uRL0 = vFSFileSystem0.locateFromURL("0r~gt0[##r>;h", "file:///media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/");
      assertEquals("", uRL0.getAuthority());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      URL uRL0 = vFSFileSystem0.locateFromURL((String) null, "log4j: ");
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      // Undeclared exception!
      try { 
        vFSFileSystem0.getURL((String) null, ":#M*jKaW+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not parse basePath: null and fileName: :#M*jKaW+
         //
         verifyException("org.apache.commons.configuration2.io.VFSFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      String string0 = vFSFileSystem0.getPath((File) null, (URL) null, (String) null, ":#M*jKaW+");
      assertEquals(":#M*jKaW+", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      MockFile mockFile0 = new MockFile("EpOhjiJ-_\"Y\")n~5", "EpOhjiJ-_\"Y\")n~5");
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn("EpOhjiJ-_\"Y\")n~5", "EpOhjiJ-_\"Y\")n~5", "EpOhjiJ-_\"Y\")n~5").when(fileSystemManager0).toString();
      doReturn((FileName) null).when(fileSystemManager0).resolveName(any(org.apache.commons.vfs2.FileName.class) , anyString());
      doReturn((FileName) null, (FileName) null).when(fileSystemManager0).resolveURI(anyString());
      VFS.setManager(fileSystemManager0);
      URL uRL0 = mockFile0.toURL();
      // Undeclared exception!
      try { 
        vFSFileSystem0.getPath((File) null, uRL0, "EpOhjiJ-_\"Y\")n~5", "EpOhjiJ-_\"Y\")n~5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.io.VFSFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      MockFile mockFile0 = new MockFile("", "");
      URL uRL0 = mockFile0.toURL();
      String string0 = vFSFileSystem0.getPath((File) null, uRL0, "", "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      MockFile mockFile0 = new MockFile("EpOhjiJ-_\"Y\")n~5", "EpOhjiJ-_\"Y\")n~5");
      URL uRL0 = mockFile0.toURL();
      FileSystemConfigBuilder fileSystemConfigBuilder0 = mock(FileSystemConfigBuilder.class, new ViolatedAssumptionAnswer());
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn((FileContent) null).when(fileObject0).getContent();
      doReturn(false).when(fileObject0).isFolder();
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn("EpOhjiJ-_\"Y\")n~5", "EpOhjiJ-_\"Y\")n~5").when(fileSystemManager0).toString();
      doReturn(fileSystemConfigBuilder0).when(fileSystemManager0).getFileSystemConfigBuilder(anyString());
      doReturn(fileObject0).when(fileSystemManager0).resolveFile(anyString() , any(org.apache.commons.vfs2.FileSystemOptions.class));
      VFS.setManager(fileSystemManager0);
      try { 
        vFSFileSystem0.getOutputStream(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot access content of file:/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/EpOhjiJ-_\"Y\")n~5/EpOhjiJ-_\"Y\")n~5
         //
         verifyException("org.apache.commons.configuration2.io.VFSFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      MockFile mockFile0 = new MockFile("", "");
      URL uRL0 = mockFile0.toURL();
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, "d*8J,8/]!F8g").when(fileSystemManager0).toString();
      doReturn((FileSystemConfigBuilder) null).when(fileSystemManager0).getFileSystemConfigBuilder(anyString());
      doReturn((FileObject) null).when(fileSystemManager0).resolveFile(anyString() , any(org.apache.commons.vfs2.FileSystemOptions.class));
      VFS.setManager(fileSystemManager0);
      try { 
        vFSFileSystem0.getOutputStream(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot save a configuration to a directory
         //
         verifyException("org.apache.commons.configuration2.io.VFSFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URL uRL0 = MockURI.toURL(uRI0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/foo.bar");
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      InputStream inputStream0 = vFSFileSystem0.getInputStream(uRL0);
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      URL uRL0 = vFSFileSystem0.getURL("Cannot access content of ", "\"}2.+*ghTRoCYv^Gc?6");
      try { 
        vFSFileSystem0.getInputStream(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File not found
         //
         verifyException("org.apache.commons.configuration2.io.VFSFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      URL uRL0 = vFSFileSystem0.locateFromURL("file:///media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/", "");
      try { 
        vFSFileSystem0.getInputStream(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot load a configuration from a directory
         //
         verifyException("org.apache.commons.configuration2.io.VFSFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      String string0 = vFSFileSystem0.getFileName("TeqO\"gy7yss");
      assertEquals("TeqO%22gy7yss", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      String string0 = vFSFileSystem0.getBasePath("Uw38HVhB@4");
      assertEquals("file:///media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      String string0 = vFSFileSystem0.getBasePath("file:///media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/");
      assertNotNull(string0);
      assertEquals("file:///media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      URL uRL0 = vFSFileSystem0.getURL("file:///media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/", "Uw38HVhB@4");
      try { 
        MockURL.openStream(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // VFS URLs can only be used with VFS APIs
         //
         verifyException("org.apache.commons.configuration2.io.VFSFileSystem$VFSURLStreamHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      URL uRL0 = vFSFileSystem0.getURL("file:///media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/", "file:///media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/");
      try { 
        vFSFileSystem0.getOutputStream(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot save a configuration to a directory
         //
         verifyException("org.apache.commons.configuration2.io.VFSFileSystem", e);
      }
  }
}
