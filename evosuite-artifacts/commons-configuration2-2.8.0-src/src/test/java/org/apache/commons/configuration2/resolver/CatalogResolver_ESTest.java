/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 01:00:16 GMT 2022
 */

package org.apache.commons.configuration2.resolver;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Map;
import java.util.function.Function;
import org.apache.commons.configuration2.interpol.ConfigurationInterpolator;
import org.apache.commons.configuration2.interpol.InterpolatorSpecification;
import org.apache.commons.configuration2.io.ConfigurationLogger;
import org.apache.commons.configuration2.io.DefaultFileSystem;
import org.apache.commons.configuration2.io.FileSystem;
import org.apache.commons.configuration2.io.VFSFileSystem;
import org.apache.commons.configuration2.resolver.CatalogResolver;
import org.apache.xml.resolver.Catalog;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xml.sax.InputSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CatalogResolver_ESTest extends CatalogResolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CatalogResolver catalogResolver0 = new CatalogResolver();
      catalogResolver0.setCatalogFiles("--SH3Sfd\"e;$gLP6");
      InputSource inputSource0 = catalogResolver0.resolveEntity("--SH3Sfd\"e;$gLP6", "");
      assertNull(inputSource0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CatalogResolver.CatalogManager catalogResolver_CatalogManager0 = new CatalogResolver.CatalogManager();
      CatalogResolver.Catalog catalogResolver_Catalog0 = (CatalogResolver.Catalog)catalogResolver_CatalogManager0.getPrivateCatalog();
      String string0 = catalogResolver_Catalog0.normalizeURI("EE.X*g+`!2");
      assertEquals("EE.X*g+%60!2", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CatalogResolver.CatalogManager catalogResolver_CatalogManager0 = new CatalogResolver.CatalogManager();
      ConfigurationInterpolator configurationInterpolator0 = catalogResolver_CatalogManager0.getInterpolator();
      assertNull(configurationInterpolator0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CatalogResolver.CatalogManager catalogResolver_CatalogManager0 = new CatalogResolver.CatalogManager();
      FileSystem fileSystem0 = catalogResolver_CatalogManager0.getFileSystem();
      assertNull(fileSystem0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CatalogResolver.CatalogManager catalogResolver_CatalogManager0 = new CatalogResolver.CatalogManager();
      Catalog catalog0 = catalogResolver_CatalogManager0.getCatalog();
      assertEquals(18, Catalog.SYSTEM_SUFFIX);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CatalogResolver.CatalogManager catalogResolver_CatalogManager0 = new CatalogResolver.CatalogManager();
      String string0 = catalogResolver_CatalogManager0.getBaseDir();
      assertEquals("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CatalogResolver.Catalog catalogResolver_Catalog0 = new CatalogResolver.Catalog();
      // Undeclared exception!
      try { 
        catalogResolver_Catalog0.normalizeURI("dVd*moH1}0nV");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xml.resolver.CatalogManager cannot be cast to org.apache.commons.configuration2.resolver.CatalogResolver$CatalogManager
         //
         verifyException("org.apache.commons.configuration2.resolver.CatalogResolver$Catalog", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CatalogResolver.Catalog catalogResolver_Catalog0 = new CatalogResolver.Catalog();
      // Undeclared exception!
      try { 
        catalogResolver_Catalog0.loadSystemCatalogs();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xml.resolver.CatalogManager cannot be cast to org.apache.commons.configuration2.resolver.CatalogResolver$CatalogManager
         //
         verifyException("org.apache.commons.configuration2.resolver.CatalogResolver$Catalog", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CatalogResolver catalogResolver0 = new CatalogResolver();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("xcatalog");
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      catalogResolver0.setFileSystem(vFSFileSystem0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "\":wD;OiT@3lag");
      InputSource inputSource0 = catalogResolver0.resolveEntity("\":wD;OiT@3lag", "Xi0u");
      assertNull(inputSource0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CatalogResolver.CatalogManager catalogResolver_CatalogManager0 = new CatalogResolver.CatalogManager();
      catalogResolver_CatalogManager0.setBaseDir((String) null);
      assertEquals("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src", catalogResolver_CatalogManager0.getBaseDir());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CatalogResolver.CatalogManager catalogResolver_CatalogManager0 = new CatalogResolver.CatalogManager();
      InterpolatorSpecification interpolatorSpecification0 = mock(InterpolatorSpecification.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(interpolatorSpecification0).getDefaultLookups();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getInterpolator();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getParentInterpolator();
      doReturn((Map) null).when(interpolatorSpecification0).getPrefixLookups();
      doReturn((Function) null).when(interpolatorSpecification0).getStringConverter();
      ConfigurationInterpolator configurationInterpolator0 = ConfigurationInterpolator.fromSpecification(interpolatorSpecification0);
      catalogResolver_CatalogManager0.setInterpolator(configurationInterpolator0);
      assertEquals("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src", catalogResolver_CatalogManager0.getBaseDir());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CatalogResolver.CatalogManager catalogResolver_CatalogManager0 = new CatalogResolver.CatalogManager();
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      catalogResolver_CatalogManager0.setFileSystem(defaultFileSystem0);
      assertEquals("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src", catalogResolver_CatalogManager0.getBaseDir());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CatalogResolver catalogResolver0 = new CatalogResolver();
      InterpolatorSpecification interpolatorSpecification0 = mock(InterpolatorSpecification.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(interpolatorSpecification0).getDefaultLookups();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getInterpolator();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getParentInterpolator();
      doReturn((Map) null).when(interpolatorSpecification0).getPrefixLookups();
      doReturn((Function) null).when(interpolatorSpecification0).getStringConverter();
      ConfigurationInterpolator configurationInterpolator0 = ConfigurationInterpolator.fromSpecification(interpolatorSpecification0);
      catalogResolver0.setInterpolator(configurationInterpolator0);
      InputSource inputSource0 = catalogResolver0.resolveEntity("k^L>r_ys[G", "k^L>r_ys[G");
      assertNull(inputSource0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CatalogResolver.Catalog catalogResolver_Catalog0 = new CatalogResolver.Catalog();
      catalogResolver_Catalog0.parseCatalog("Im}*l#zg1MS%", "");
      assertEquals(10, Catalog.ENTITY);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CatalogResolver catalogResolver0 = new CatalogResolver();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("xcatalog");
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      catalogResolver0.setFileSystem(vFSFileSystem0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "org.apache.comons.jexl2.parser.ASTMapEtry");
      InputSource inputSource0 = catalogResolver0.resolveEntity("org.apache.comons.jexl2.parser.ASTMapEtry", "org.apache.commons.configuration2.interpol.ConfigurationInterpolator.defaultPrefixLookups");
      assertNull(inputSource0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CatalogResolver.CatalogManager catalogResolver_CatalogManager0 = new CatalogResolver.CatalogManager();
      Catalog catalog0 = catalogResolver_CatalogManager0.getPrivateCatalog();
      Catalog catalog1 = catalogResolver_CatalogManager0.getPrivateCatalog();
      assertSame(catalog1, catalog0);
      assertNotNull(catalog1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CatalogResolver.CatalogManager catalogResolver_CatalogManager0 = new CatalogResolver.CatalogManager();
      catalogResolver_CatalogManager0.getPrivateCatalog();
      CatalogResolver catalogResolver0 = new CatalogResolver();
      InputSource inputSource0 = catalogResolver0.resolveEntity("ePOt5K(99csj", "U<[fUHC>0q");
      assertNull(inputSource0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CatalogResolver.CatalogManager catalogResolver_CatalogManager0 = new CatalogResolver.CatalogManager();
      catalogResolver_CatalogManager0.setBaseDir("");
      assertEquals("", catalogResolver_CatalogManager0.getBaseDir());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CatalogResolver catalogResolver0 = new CatalogResolver();
      catalogResolver0.resolveEntity("", "");
      InputSource inputSource0 = catalogResolver0.resolveEntity("", "");
      assertNull(inputSource0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CatalogResolver catalogResolver0 = new CatalogResolver();
      catalogResolver0.setDebug(true);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CatalogResolver catalogResolver0 = new CatalogResolver();
      catalogResolver0.setDebug(false);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CatalogResolver catalogResolver0 = new CatalogResolver();
      catalogResolver0.setBaseDir((String) null);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CatalogResolver catalogResolver0 = new CatalogResolver();
      ConfigurationLogger configurationLogger0 = catalogResolver0.getLogger();
      catalogResolver0.setLogger(configurationLogger0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CatalogResolver catalogResolver0 = new CatalogResolver();
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      catalogResolver0.setInterpolator(configurationInterpolator0);
      InputSource inputSource0 = catalogResolver0.resolveEntity("org.apache.commons.jexl2.parser.ASTMapEntry", (String) null);
      assertNull(inputSource0);
  }
}
